const crc = require('crc')

const b1 = Buffer.from([36,64,171,25,167,79,96,0,160,240,18,22,186,8,1,0,198,49,250,205,93,146,230,63,179,120,94,71,156,164,176,191,147,49,164,108,255,13,132,64,211,186,78,66,226,161,159,59,128,195,30,59,194,244,115,187,249,2,149,208,166,75,114,28,78,247,208,63,79,218,251,188,0,19,15,0,246,3,100,0,9,9,50,48,1,1,0,0,54,0,34,2,213,1,96,0,36,64,36,105,161,15,32,0,160,240,18,22,186,8,15,0,220,0,148,0,137,0,172,0,177,65,132,66,39,243,71,66,36,64,235,47,54,23,68,0,160,240,18,22,186,8,1,52,255,1,255,1,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,36,64,158,253,50,23,44,0,160,240,18,22,186,8,255,1,0,0,0,0,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208])
const b2 = Buffer.from([36,64,71,182,167,79,96,0,184,236,18,22,186,8,1,0,237,247,200,210,93,146,230,63,28,234,108,58,156,164,176,191,45,170,218,54,48,15,132,64,210,186,78,66,98,239,161,59,204,207,212,58,243,49,50,187,249,2,149,208,57,3,29,191,207,247,208,63,104,70,253,188,0,19,15,0,246,3,100,0,9,9,50,48,1,1,0,0,53,0,24,2,203,1,96,0,36,64,83,97,161,15,32,0,184,236,18,22,186,8,15,0,220,0,148,0,137,0,172,0,110,98,129,66,53,203,67,66,36,64,104,155,54,23,68,0,184,236,18,22,186,8,1,52,255,1,255,1,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,36,64,77,133,50,23,44,0,184,236,18,22,186,8,255,1,0,0,0,0,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208])
const b3 = Buffer.from([36,64,79,65,167,79,96,0,208,232,18,22,186,8,1,0,161,161,229,217,93,146,230,63,123,16,219,216,155,164,176,191,92,158,32,94,225,15,132,64,210,186,78,66,134,35,21,59,111,170,223,186,30,40,166,58,249,2,149,208,155,66,57,96,80,248,208,63,197,223,251,188,0,19,15,0,246,3,100,0,9,9,50,48,1,1,0,0,58,0,36,2,0,2,96,0,36,64,19,51,161,15,32,0,208,232,18,22,186,8,15,0,220,0,148,0,137,0,172,0,158,170,132,66,117,105,90,66,36,64,213,185,54,23,68,0,208,232,18,22,186,8,1,52,255,1,255,1,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,36,64,30,218,50,23,44,0,208,232,18,22,186,8,255,1,0,0,0,0,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208])
const b4 = Buffer.from([36,64,177,19,167,79,96,0,232,228,18,22,186,8,1,0,22,210,89,218,93,146,230,63,46,237,149,145,155,164,176,191,95,154,122,80,76,16,132,64,210,186,78,66,182,222,209,59,90,253,187,186,0,225,202,59,249,2,149,208,117,122,186,36,209,248,208,63,151,41,254,188,0,19,15,0,246,3,100,0,9,9,50,48,1,1,0,0,55,0,53,2,24,2,96,0,36,64,35,53,161,15,32,0,232,228,18,22,186,8,15,0,220,0,148,0,137,0,172,0,235,171,136,66,173,111,100,66,36,64,202,242,54,23,68,0,232,228,18,22,186,8,1,52,255,1,255,1,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,0,0,0,32,95,160,18,194,36,64,222,201,50,23,44,0,232,228,18,22,186,8,255,1,0,0,0,0,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208,249,2,149,208])


const getIndexes = (buff) => {
    const pattern = Buffer.from('$@', 'ascii')
    const indexes = []
    let i = 0
    while (i < (buff.length - 1)) {
        const index = buff.indexOf(pattern, i)
        if (index < 0) break
        indexes.push(index)
        i = index + 1
        // console.log(i)
    }
    return indexes
}

const getHeader = (buff) => {
    return {
        c_r_c: buff.subarray(2, 4).readUInt16LE(),
        id: buff.subarray(4, 6).readUInt16LE(),
        len: buff.subarray(6, 8).readUInt16LE()
    }
}

const getCRC = buff => crc.crc16xmodem(buff)

const isValidFrame = (len) => (len % 4) === 0

const indexesB1 = getIndexes(b1)
console.log('indexes', indexesB1)
const { c_r_c, id, len } = getHeader(b1.subarray(indexesB1[0]))
console.log('crc', c_r_c, '\nid ', id, '\nlen', len)
if (isValidFrame(len)) {
    const frame = b1.subarray(indexesB1[0], len)
    const encodedData = frame.subarray(4)
    const calculatedCRC = getCRCc(encodedData)
    console.log('crc', calculatedCRC)
    if (c_r_c === calculatedCRC) {
        
    }
}

// const indexesB2 = getIndexes(b2)
// console.log(indexesB2)
// const indexesB3 = getIndexes(b3)
// console.log(indexesB3)
// const indexesB4 = getIndexes(b4)
// console.log(indexesB4)