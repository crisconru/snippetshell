{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"","text":"\u00cdndice \u00b6 Cosas que toco (si no hay enlaces es porque no hay apuntes sobre eso). Software Lenguajes + IDEs Python JavaScript Visual Studio code Web Frontend HTML CSS VanillaJS Frameworks / Libs JS React VueJS Backend JavaScript Python FastAPI Django GUI Python JavaScript Mobile Android iOS Cross-Platform Hardware Protocolos Serie Arduino Platformio Micropython IoT MQTT RabbitMQ Node-Red ESPHome Devops Docker Git Gitflow Ansible Linux Terminal ZSH TMUX Bash Scripting Bluetooth Comandos Fecha y Hora Ficheros Redes Linux SSH iptables IPv6","title":"\u00cdndice"},{"location":"#indice","text":"Cosas que toco (si no hay enlaces es porque no hay apuntes sobre eso). Software Lenguajes + IDEs Python JavaScript Visual Studio code Web Frontend HTML CSS VanillaJS Frameworks / Libs JS React VueJS Backend JavaScript Python FastAPI Django GUI Python JavaScript Mobile Android iOS Cross-Platform Hardware Protocolos Serie Arduino Platformio Micropython IoT MQTT RabbitMQ Node-Red ESPHome Devops Docker Git Gitflow Ansible Linux Terminal ZSH TMUX Bash Scripting Bluetooth Comandos Fecha y Hora Ficheros Redes Linux SSH iptables IPv6","title":"\u00cdndice"},{"location":"devops/ansible/ansible/","text":"Ansible \u00b6 Ansible es una herramienta de configuraci\u00f3n de equipos (por decirlo muy resumidamente). Lo que hace es, a trav\u00e9s de SSH, configurar equipos remotos. Estos equipos remotos no necesitan tener un agente / cliente de Ansible, solo SSH y poder usar sudo. Instalaci\u00f3n \u00b6 sudo apt install ansible # El siguiente comando es para ver que est\u00e1 instalado correctamente ansible --version Si no lo detectara, har\u00eda falta lo siguiente sudo apt install software-properties-common sudo apt-add-repository ppa:ansible/ansible sudo apt update && sudo apt install -y ansible Configuraci\u00f3n \u00b6 /etc/ansible -> Carpeta con los ficheros de configuraci\u00f3n: /etc/ansible/ansible.cfg -> Configuraci\u00f3n. /etc/ansible/hosts -> Inventario de equipos administrados. Inventario \u00b6 Se llama inventario al grupo de equipos / hosts, que se van a administrar con Ansible. Los hay est\u00e1ticos, es decir, un fichero, o din\u00e1micos, que dependen de una llamada a un proveedor de cloud. Est\u00e1tico \u00b6 El fichero de inventario por defecto es /etc/ansible/hosts , aunque se puede definir otro. Usa formato INI . Equipo local \u00b6 Para que todo suceda en el propio equipo, definimos -> localhost . Si queremos que no use SSH para el equipo local (cosa que tiene sentido), habr\u00eda que poner localhost ansible_connection=local [ equipo ] localhost ansible_connection = local Equipo remoto \u00b6 Para actuar sobre un equipo remoto tienes que a\u00f1adirle una clave SSH al host que se va a configurar con Ansible # Generar clave (poner passphrase por seguridad) ssh-keygen -t <algoritmo-cifrado> # ssh-keygen -t rsa # Copiar clave al host ssh-copy-id -i <ruta-clave-privada> <usuario-host>@<host> # ssh-copy-id ~/.ssh/id_rsa pi@raspberrypi Luego debes a\u00f1adirlo al inventario [ rpis ] raspberrypi 192 .168.0.101 Grupos children \u00b6 Suponte que tienes dos grupos distintos, que quieres actuar tanto por separado, como conjuntamente, para ello tienes que usar la directiva :children . [ raspbian ] raspberrypi [ ubuntu ] 192 .168.0.101 [ rpis:children ] raspbian ubuntu Variables \u00b6 Usa la directiva :vars . [ rpis:children ] raspbian ubuntu [ rpis:vars ] # variables Tienen prioridad las variables directas / locales de cada host, por encima de las del grupo, ejemplo: [ raspbian ] raspberrypi <variable> = <valor1> [ rpis:children ] raspbian [ rpis:vars ] <variable> = <valor2> En este caso, <variable> tendr\u00e1 <valor1> . Se pueden agrupar las variables en: /etc/ansible/host_vars/<host>.yml -> Un fichero yaml de variables para cada host. /etc/ansible/group_vars/<grupo>.yml -> Un fichero yaml de variables para cada grupo de hosts. Las variables ir\u00e1n en formato YAML, es decir, <variable>: <valor> . Algunas variables: ansible_connection -> ssh (por defecto) | local . ansible_connection=ssh : ansible_host ansible_port ansible_user ansible_ssh_private_key_file [ raspbian ] rpi1 ansible_host = 192 .168.0.101 ansible_user = pi ansible_become -> false (por defecto) | true ansible_become=true : ansible_become_method -> su | sudo ansible_become_user (root) Patrones \u00b6 Si tienes varios hosts con nombres como web1.domino.com web2.dominio.com web3.dominio.com Te puedes referir a ellos como web[1:3].dominio.com . Si en cambio tienes web-a.dominio.com web-b.dominio.com web-c.dominio.com Puedes usar web-[a:c].dominio.com . Elegir inventario \u00b6 Con la opci\u00f3n -i <fichero-de-hosts> eliges que inventario quieres, para si por ejemplo tienes diferentes entornos de desarrollo, pruebas y producci\u00f3n. Din\u00e1mico \u00b6 En vez de usar un fichero local, como el /etc/ansible/hosts , se hace una llamada a un proveedor cloud (que es el que te lo da) a trav\u00e9s de un script generado por los creadores de Ansible. Estos scripts est\u00e1n en github.com/ansible/ansible en la secci\u00f3n contrib/inventory . Para ejecutarlos, simplemente usamos el script como fichero de host, seleccion\u00e1ndolo con la opci\u00f3n -i <script>.py . Combinar inventarios \u00b6 Si en un directorio / carpeta tienes un inventario est\u00e1tico y otro din\u00e1mico, con especificar con -i ese directorio, usar\u00e1 primero el est\u00e1tico y luego el din\u00e1mico. Se recomienda usar la opci\u00f3n --list-hosts al menos la primera vez para comprobar que haga la uni\u00f3n de los inventarios. Comandos \u00b6 A los comandos que se introducen \"a pelo\", se les llama comandos Ad hoc , y son para comprobar cosas r\u00e1pido. tiene la estructura: ansible [ -i <inventario> ] [ <opciones> ] <hosts> [ -m <modulo> ] [ -a <comando-o-argumentos> ] <opciones> : --limit <filtro> -> Para poder definir a que hosts afecta. <filtro> puede ser host1,host2,host3,... -> Lista de hosts. grupo1:grupo2:grupo3:... -> Lista de grupos. grupo1:&grupo2 -> La intersecci\u00f3n / lo com\u00fan de grupo1 y grupo2. grupo1:!grupo2 -> Grupo 1 excepto lo com\u00fan / intersecci\u00f3n de grupo 2. --user <usuario> --become -> Ser root -f <numero de procesos simultaneos> -> Para que se haga en paralelo / simult\u00e1neamente. <hosts> -> servidores : grupos: all (todos los hosts). modulo -> setup | ping | apt | yum | ... Mirar la docu `` Ping \u00b6 Para hacer un hello world har\u00edamos ansible <host> -m ping Por ejemplo ansible localhost -m ping Comando normal \u00b6 Para usar un comando habr\u00eda que hacer ansible <host> -a <comando> Por ejemplo ansible <host> -a hostname Y te devuelve el nombre del host en la red. Comando para todos los hosts \u00b6 ansible all ... Definir el usuario con el que vamos a realizar la acci\u00f3n \u00b6 ansible <host> -u <usuario> -a <comando> Esto se puede automatizar cambiando el fichero de host /etc/ansible/hosts con <host> ansible_user = <usuario> Crear un usuario root en los hosts \u00b6 ansible <host> -m user -a \"name=<usuario-nuevo> state=present\" --become Ahora tendr\u00e9 que a\u00f1adir la opci\u00f3n --become cada vez que quiera usar este usuario. Configuraci\u00f3n \u00b6 Todo est\u00e1 autodocumentado en el fichero de configuraci\u00f3n global /etc/ansible/ansible.cfg : Contiene valores por defecto. Configuraci\u00f3n de escalar permisos. Opciones de OpenSSH. Opciones de SELinux. Configuraci\u00f3n de Ansible Galaxy . La priorizaci\u00f3n de busqueda de archivos de configuraci\u00f3n es: Variable de entorno ANSIBLE_CONFIG . Fichero locales ansible.cfg y .ansible.cfg . Fichero global /etc/ansible/ansible.cfg . Windows \u00b6 Info oficial -> aqu\u00ed . Para poder ser usado en m\u00e1quinas Windows hace falta: En la m\u00e1quina con Ansible: Instalar pywinrm -> pip install pywinrm . Definir connection al valor winrm -> -c winrm . En la m\u00e1quina Windows: Tener PowerShell 3.0 o superior. Habilitar control remoto con el script ConfigureRemotingForAnsible.ps1 desde la web de Ansible. Habilitar puerto 5986 . Ignorar certificado SSL -> ansible_winrm_server_cert_validation=ignore . Playbook \u00b6 Un playbook es un fichero con un conjunto de recetas (tareas) ordenadas, para no tener que ir introduciendo todo a mano con comandos ad hoc. Usa formato YAML. --- - name : Mi playbook hosts : all remote_user : pi become : true tasks : - name : copiar fichero hosts copy : src=/etc/hosts dest=/etc/hosts Para ejecutarlo ansible-playbook [ -i <inventario> ] [ <opciones> ] <fichero.yml> Opciones \u00b6 -i <inventario> -> Indicar el inventario en formato fichero (est\u00e1tico) / script (din\u00e1mico) / directorio (est\u00e1tico + din\u00e1mico). --syntax-check -> Comprobar sintaxus del playbook. --list-tasks -> Listar tareas. --step -> Pregunta paso a paso. --start-at-task=<tarea> -> Empezar por una tarea concreta. --forks=<num de tareas> | -f <num de tareas> -> Cantidad de tareas en paralelo (por defecto <num de tareas> es 5 ). -v | -vv | -vvv -> Aumentar el verbose (informaci\u00f3n de cada operaci\u00f3n que se hace). Variables \u00b6 TODO:","title":"Ansible"},{"location":"devops/ansible/ansible/#ansible","text":"Ansible es una herramienta de configuraci\u00f3n de equipos (por decirlo muy resumidamente). Lo que hace es, a trav\u00e9s de SSH, configurar equipos remotos. Estos equipos remotos no necesitan tener un agente / cliente de Ansible, solo SSH y poder usar sudo.","title":"Ansible"},{"location":"devops/ansible/ansible/#instalacion","text":"sudo apt install ansible # El siguiente comando es para ver que est\u00e1 instalado correctamente ansible --version Si no lo detectara, har\u00eda falta lo siguiente sudo apt install software-properties-common sudo apt-add-repository ppa:ansible/ansible sudo apt update && sudo apt install -y ansible","title":"Instalaci\u00f3n"},{"location":"devops/ansible/ansible/#configuracion","text":"/etc/ansible -> Carpeta con los ficheros de configuraci\u00f3n: /etc/ansible/ansible.cfg -> Configuraci\u00f3n. /etc/ansible/hosts -> Inventario de equipos administrados.","title":"Configuraci\u00f3n"},{"location":"devops/ansible/ansible/#inventario","text":"Se llama inventario al grupo de equipos / hosts, que se van a administrar con Ansible. Los hay est\u00e1ticos, es decir, un fichero, o din\u00e1micos, que dependen de una llamada a un proveedor de cloud.","title":"Inventario"},{"location":"devops/ansible/ansible/#estatico","text":"El fichero de inventario por defecto es /etc/ansible/hosts , aunque se puede definir otro. Usa formato INI .","title":"Est\u00e1tico"},{"location":"devops/ansible/ansible/#equipo-local","text":"Para que todo suceda en el propio equipo, definimos -> localhost . Si queremos que no use SSH para el equipo local (cosa que tiene sentido), habr\u00eda que poner localhost ansible_connection=local [ equipo ] localhost ansible_connection = local","title":"Equipo local"},{"location":"devops/ansible/ansible/#equipo-remoto","text":"Para actuar sobre un equipo remoto tienes que a\u00f1adirle una clave SSH al host que se va a configurar con Ansible # Generar clave (poner passphrase por seguridad) ssh-keygen -t <algoritmo-cifrado> # ssh-keygen -t rsa # Copiar clave al host ssh-copy-id -i <ruta-clave-privada> <usuario-host>@<host> # ssh-copy-id ~/.ssh/id_rsa pi@raspberrypi Luego debes a\u00f1adirlo al inventario [ rpis ] raspberrypi 192 .168.0.101","title":"Equipo remoto"},{"location":"devops/ansible/ansible/#grupos-children","text":"Suponte que tienes dos grupos distintos, que quieres actuar tanto por separado, como conjuntamente, para ello tienes que usar la directiva :children . [ raspbian ] raspberrypi [ ubuntu ] 192 .168.0.101 [ rpis:children ] raspbian ubuntu","title":"Grupos children"},{"location":"devops/ansible/ansible/#variables","text":"Usa la directiva :vars . [ rpis:children ] raspbian ubuntu [ rpis:vars ] # variables Tienen prioridad las variables directas / locales de cada host, por encima de las del grupo, ejemplo: [ raspbian ] raspberrypi <variable> = <valor1> [ rpis:children ] raspbian [ rpis:vars ] <variable> = <valor2> En este caso, <variable> tendr\u00e1 <valor1> . Se pueden agrupar las variables en: /etc/ansible/host_vars/<host>.yml -> Un fichero yaml de variables para cada host. /etc/ansible/group_vars/<grupo>.yml -> Un fichero yaml de variables para cada grupo de hosts. Las variables ir\u00e1n en formato YAML, es decir, <variable>: <valor> . Algunas variables: ansible_connection -> ssh (por defecto) | local . ansible_connection=ssh : ansible_host ansible_port ansible_user ansible_ssh_private_key_file [ raspbian ] rpi1 ansible_host = 192 .168.0.101 ansible_user = pi ansible_become -> false (por defecto) | true ansible_become=true : ansible_become_method -> su | sudo ansible_become_user (root)","title":"Variables"},{"location":"devops/ansible/ansible/#patrones","text":"Si tienes varios hosts con nombres como web1.domino.com web2.dominio.com web3.dominio.com Te puedes referir a ellos como web[1:3].dominio.com . Si en cambio tienes web-a.dominio.com web-b.dominio.com web-c.dominio.com Puedes usar web-[a:c].dominio.com .","title":"Patrones"},{"location":"devops/ansible/ansible/#elegir-inventario","text":"Con la opci\u00f3n -i <fichero-de-hosts> eliges que inventario quieres, para si por ejemplo tienes diferentes entornos de desarrollo, pruebas y producci\u00f3n.","title":"Elegir inventario"},{"location":"devops/ansible/ansible/#dinamico","text":"En vez de usar un fichero local, como el /etc/ansible/hosts , se hace una llamada a un proveedor cloud (que es el que te lo da) a trav\u00e9s de un script generado por los creadores de Ansible. Estos scripts est\u00e1n en github.com/ansible/ansible en la secci\u00f3n contrib/inventory . Para ejecutarlos, simplemente usamos el script como fichero de host, seleccion\u00e1ndolo con la opci\u00f3n -i <script>.py .","title":"Din\u00e1mico"},{"location":"devops/ansible/ansible/#combinar-inventarios","text":"Si en un directorio / carpeta tienes un inventario est\u00e1tico y otro din\u00e1mico, con especificar con -i ese directorio, usar\u00e1 primero el est\u00e1tico y luego el din\u00e1mico. Se recomienda usar la opci\u00f3n --list-hosts al menos la primera vez para comprobar que haga la uni\u00f3n de los inventarios.","title":"Combinar inventarios"},{"location":"devops/ansible/ansible/#comandos","text":"A los comandos que se introducen \"a pelo\", se les llama comandos Ad hoc , y son para comprobar cosas r\u00e1pido. tiene la estructura: ansible [ -i <inventario> ] [ <opciones> ] <hosts> [ -m <modulo> ] [ -a <comando-o-argumentos> ] <opciones> : --limit <filtro> -> Para poder definir a que hosts afecta. <filtro> puede ser host1,host2,host3,... -> Lista de hosts. grupo1:grupo2:grupo3:... -> Lista de grupos. grupo1:&grupo2 -> La intersecci\u00f3n / lo com\u00fan de grupo1 y grupo2. grupo1:!grupo2 -> Grupo 1 excepto lo com\u00fan / intersecci\u00f3n de grupo 2. --user <usuario> --become -> Ser root -f <numero de procesos simultaneos> -> Para que se haga en paralelo / simult\u00e1neamente. <hosts> -> servidores : grupos: all (todos los hosts). modulo -> setup | ping | apt | yum | ... Mirar la docu ``","title":"Comandos"},{"location":"devops/ansible/ansible/#ping","text":"Para hacer un hello world har\u00edamos ansible <host> -m ping Por ejemplo ansible localhost -m ping","title":"Ping"},{"location":"devops/ansible/ansible/#comando-normal","text":"Para usar un comando habr\u00eda que hacer ansible <host> -a <comando> Por ejemplo ansible <host> -a hostname Y te devuelve el nombre del host en la red.","title":"Comando normal"},{"location":"devops/ansible/ansible/#comando-para-todos-los-hosts","text":"ansible all ...","title":"Comando para todos los hosts"},{"location":"devops/ansible/ansible/#definir-el-usuario-con-el-que-vamos-a-realizar-la-accion","text":"ansible <host> -u <usuario> -a <comando> Esto se puede automatizar cambiando el fichero de host /etc/ansible/hosts con <host> ansible_user = <usuario>","title":"Definir el usuario con el que vamos a realizar la acci\u00f3n"},{"location":"devops/ansible/ansible/#crear-un-usuario-root-en-los-hosts","text":"ansible <host> -m user -a \"name=<usuario-nuevo> state=present\" --become Ahora tendr\u00e9 que a\u00f1adir la opci\u00f3n --become cada vez que quiera usar este usuario.","title":"Crear un usuario root en los hosts"},{"location":"devops/ansible/ansible/#configuracion_1","text":"Todo est\u00e1 autodocumentado en el fichero de configuraci\u00f3n global /etc/ansible/ansible.cfg : Contiene valores por defecto. Configuraci\u00f3n de escalar permisos. Opciones de OpenSSH. Opciones de SELinux. Configuraci\u00f3n de Ansible Galaxy . La priorizaci\u00f3n de busqueda de archivos de configuraci\u00f3n es: Variable de entorno ANSIBLE_CONFIG . Fichero locales ansible.cfg y .ansible.cfg . Fichero global /etc/ansible/ansible.cfg .","title":"Configuraci\u00f3n"},{"location":"devops/ansible/ansible/#windows","text":"Info oficial -> aqu\u00ed . Para poder ser usado en m\u00e1quinas Windows hace falta: En la m\u00e1quina con Ansible: Instalar pywinrm -> pip install pywinrm . Definir connection al valor winrm -> -c winrm . En la m\u00e1quina Windows: Tener PowerShell 3.0 o superior. Habilitar control remoto con el script ConfigureRemotingForAnsible.ps1 desde la web de Ansible. Habilitar puerto 5986 . Ignorar certificado SSL -> ansible_winrm_server_cert_validation=ignore .","title":"Windows"},{"location":"devops/ansible/ansible/#playbook","text":"Un playbook es un fichero con un conjunto de recetas (tareas) ordenadas, para no tener que ir introduciendo todo a mano con comandos ad hoc. Usa formato YAML. --- - name : Mi playbook hosts : all remote_user : pi become : true tasks : - name : copiar fichero hosts copy : src=/etc/hosts dest=/etc/hosts Para ejecutarlo ansible-playbook [ -i <inventario> ] [ <opciones> ] <fichero.yml>","title":"Playbook"},{"location":"devops/ansible/ansible/#opciones","text":"-i <inventario> -> Indicar el inventario en formato fichero (est\u00e1tico) / script (din\u00e1mico) / directorio (est\u00e1tico + din\u00e1mico). --syntax-check -> Comprobar sintaxus del playbook. --list-tasks -> Listar tareas. --step -> Pregunta paso a paso. --start-at-task=<tarea> -> Empezar por una tarea concreta. --forks=<num de tareas> | -f <num de tareas> -> Cantidad de tareas en paralelo (por defecto <num de tareas> es 5 ). -v | -vv | -vvv -> Aumentar el verbose (informaci\u00f3n de cada operaci\u00f3n que se hace).","title":"Opciones"},{"location":"devops/ansible/ansible/#variables_1","text":"TODO:","title":"Variables"},{"location":"devops/docker/docker-aclaraciones/","text":"Aclaraciones \u00b6 Importante aclarar: Docker Host o solo Host -> Es la m\u00e1quina donde se van a ejecutar los contenedores. Docker Container o solo Contenedor -> Lo que entendemos por contenedor. Docker Image o solo Imagen -> Es el modelo sobre el que se basa el contenedor. Para que lo entendamos: Si un contenedor equivale a una VM (m\u00e1quina virtual). Una imagen equivale a una ISO (imagen del SO). Para cuando veamos comandos, hay que tener claro: <imagen> equivale al nombre de la imagen. <contenedor> equivale al id o nombre del contenedor, es indiferente.","title":"Aclaraciones"},{"location":"devops/docker/docker-aclaraciones/#aclaraciones","text":"Importante aclarar: Docker Host o solo Host -> Es la m\u00e1quina donde se van a ejecutar los contenedores. Docker Container o solo Contenedor -> Lo que entendemos por contenedor. Docker Image o solo Imagen -> Es el modelo sobre el que se basa el contenedor. Para que lo entendamos: Si un contenedor equivale a una VM (m\u00e1quina virtual). Una imagen equivale a una ISO (imagen del SO). Para cuando veamos comandos, hay que tener claro: <imagen> equivale al nombre de la imagen. <contenedor> equivale al id o nombre del contenedor, es indiferente.","title":"Aclaraciones"},{"location":"devops/docker/docker-comandos/","text":"Comandos de Docker \u00b6 Todos los comandos de Docker cuentan con ayuda. Para poder verla hacemos docker <comando> --help Por ejemplo, docker search --help nos sacar\u00e1 la ayuda del comando search . Para ver todos los comandos por la terminal podemos usar docker --help docker search - Buscar im\u00e1genes \u00b6 docker search [ <opciones> ] <imagen> Podemos buscar im\u00e1genes tanto desde la web, como desde la terminal con el comando docker search . Por ejemplo si quiero buscar una imagen de Ubuntu docker search ubuntu Y veremos la cantidad de im\u00e1genes disponibles de ubuntu que se han creado, oficiales o no, y cuantas estrellas / likes tienen. Si solo quisieramos ver por ejemplo las imagenes de ubuntu que sean de 14.04, har\u00edamos docker search ubuntu:14.04 docker pull - Descargar im\u00e1genes \u00b6 docker pull [ <opciones> ] <imagen> [ :<tag> | @<digest> ] Para poder descargar una imagen basta con poner docker pull <imagen> . Por ejemplo si queremos descargar la ubuntu oficial har\u00edamos docker pull ubuntu Pero si por ejemplo nos interesa m\u00e1s la ubuntu de pivotaldata, es tan sencillo como docker pull pivotaldata/ubuntu docker images - Im\u00e1genes en el sistema \u00b6 docker images [ <opciones> ] [ <repositorio> [ :<tag> ]] Con este comando podemos ver todas las imagenes que se han descargado en el sistema. OJO , imag\u00e9n es distinto de contenedor, podemos tener varios contenedores de la misma imagen. docker images docker ps - Contenedores ejecut\u00e1ndose / ejecutados \u00b6 docker ps [ <opciones> ] Para poder ver los contenedores ejecut\u00e1ndose hacemos docker ps Si en cambio queremos ver los que se han ejecutado docker ps -a docker run - Lanzar contenedores \u00b6 docker run [ <opciones> ] <imagen> [ <comando> ] [ <parametros> ] Es el comando estrella y sirve para lanzar un contenedor. Se comenta con m\u00e1s detalle en la siguiente secci\u00f3n -> Lanzar contenedores docker start / restart - Arrancar un contenedor parado / pausado \u00b6 docker start [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] docker restart [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] Con docker ps -a podemos ver los contenedores que ya no est\u00e1n activos ( STATUS = Exited ). Si queremos volver a la lanzar uno docker start <id-contenedor> Tambi\u00e9n existe el comando docker restart para reiniciar un contenedor. docker attach - Entrar en un contenedor activo \u00b6 docker attach [ <opciones> ] <contenedor> Para poder entrar dentro de un contenedor que se est\u00e1 ejecutando y ver que se est\u00e1 ejecutando. docker exec - Ejecutar comandos en un contenedor activo \u00b6 docker exec [ <opciones> ] <contenedor> <comando> [ <par\u00e1metros> ] Si queremos que en un contenedor activo se ejecute alg\u00fan comando. Por ejemplo abrir una consola docker exec -it <contenedor> bash docker stop - Parar un contenedor \u00b6 docker stop [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] Para acabar con la ejecuci\u00f3n de un contenedor. docker rm / rmi - Borrar contenedor / imagen \u00b6 docker rm [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] docker rmi [ <opciones> ] <imagen> [ <imagen1> <imagen2> ... ] El primero sirve para borrar contenedores y el segundo para im\u00e1genes. Si quisieramos que un contenedor se borrase una vez se dejara de ejecutar docker run --rm <contenedor> docker history - Ver el historial de creacion de una imagen \u00b6 docker history [ <opciones> ] <imagen> Para poder ver todos los pasos que ha llevado a cabo hacer una imagen. Se recomienda usar la opci\u00f3n -H para poder leerlo mejor docker history -H <imagen> docker logs - Ver los logs (salidas) de un contenedor \u00b6 docker logs [ <opciones> ] <contenedor> docker stats - Ver consumo de recursos de un contenedor \u00b6 docker stats [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] docker cp - Copiar ficheros a / desde un contenedor al sistema local \u00b6 # Copiar del sistema al contenedor docker cp [ <optiones> ] <src-path> <contenedor>:<dest-path> # Copiar del contenedor al sistema docker cp [ <optiones> ] <contenedor>:<src-path> <dest-path> docker inspect - Obtener informaci\u00f3n de bajo nivel de un contenedor \u00b6 docker inspect [ <opciones> ] <contenedor> [ <contenedor2> <contenedor3> ... ] docker commit - Crear una imagen a partir de un contenedor (modificado) \u00b6 docker commit [ <opciones> ] contenedor [ <repositorio> [ :<tag> ]] Esto se ve con m\u00e1s detalle en -> Crear im\u00e1genes Docker","title":"Comandos docker"},{"location":"devops/docker/docker-comandos/#comandos-de-docker","text":"Todos los comandos de Docker cuentan con ayuda. Para poder verla hacemos docker <comando> --help Por ejemplo, docker search --help nos sacar\u00e1 la ayuda del comando search . Para ver todos los comandos por la terminal podemos usar docker --help","title":"Comandos de Docker"},{"location":"devops/docker/docker-comandos/#docker-search-buscar-imagenes","text":"docker search [ <opciones> ] <imagen> Podemos buscar im\u00e1genes tanto desde la web, como desde la terminal con el comando docker search . Por ejemplo si quiero buscar una imagen de Ubuntu docker search ubuntu Y veremos la cantidad de im\u00e1genes disponibles de ubuntu que se han creado, oficiales o no, y cuantas estrellas / likes tienen. Si solo quisieramos ver por ejemplo las imagenes de ubuntu que sean de 14.04, har\u00edamos docker search ubuntu:14.04","title":"docker search - Buscar im\u00e1genes"},{"location":"devops/docker/docker-comandos/#docker-pull-descargar-imagenes","text":"docker pull [ <opciones> ] <imagen> [ :<tag> | @<digest> ] Para poder descargar una imagen basta con poner docker pull <imagen> . Por ejemplo si queremos descargar la ubuntu oficial har\u00edamos docker pull ubuntu Pero si por ejemplo nos interesa m\u00e1s la ubuntu de pivotaldata, es tan sencillo como docker pull pivotaldata/ubuntu","title":"docker pull - Descargar im\u00e1genes"},{"location":"devops/docker/docker-comandos/#docker-images-imagenes-en-el-sistema","text":"docker images [ <opciones> ] [ <repositorio> [ :<tag> ]] Con este comando podemos ver todas las imagenes que se han descargado en el sistema. OJO , imag\u00e9n es distinto de contenedor, podemos tener varios contenedores de la misma imagen. docker images","title":"docker images - Im\u00e1genes en el sistema"},{"location":"devops/docker/docker-comandos/#docker-ps-contenedores-ejecutandose-ejecutados","text":"docker ps [ <opciones> ] Para poder ver los contenedores ejecut\u00e1ndose hacemos docker ps Si en cambio queremos ver los que se han ejecutado docker ps -a","title":"docker ps - Contenedores ejecut\u00e1ndose / ejecutados"},{"location":"devops/docker/docker-comandos/#docker-run-lanzar-contenedores","text":"docker run [ <opciones> ] <imagen> [ <comando> ] [ <parametros> ] Es el comando estrella y sirve para lanzar un contenedor. Se comenta con m\u00e1s detalle en la siguiente secci\u00f3n -> Lanzar contenedores","title":"docker run - Lanzar contenedores"},{"location":"devops/docker/docker-comandos/#docker-start-restart-arrancar-un-contenedor-parado-pausado","text":"docker start [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] docker restart [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] Con docker ps -a podemos ver los contenedores que ya no est\u00e1n activos ( STATUS = Exited ). Si queremos volver a la lanzar uno docker start <id-contenedor> Tambi\u00e9n existe el comando docker restart para reiniciar un contenedor.","title":"docker start / restart - Arrancar un contenedor parado / pausado"},{"location":"devops/docker/docker-comandos/#docker-attach-entrar-en-un-contenedor-activo","text":"docker attach [ <opciones> ] <contenedor> Para poder entrar dentro de un contenedor que se est\u00e1 ejecutando y ver que se est\u00e1 ejecutando.","title":"docker attach - Entrar en un contenedor activo"},{"location":"devops/docker/docker-comandos/#docker-exec-ejecutar-comandos-en-un-contenedor-activo","text":"docker exec [ <opciones> ] <contenedor> <comando> [ <par\u00e1metros> ] Si queremos que en un contenedor activo se ejecute alg\u00fan comando. Por ejemplo abrir una consola docker exec -it <contenedor> bash","title":"docker exec - Ejecutar comandos en un contenedor activo"},{"location":"devops/docker/docker-comandos/#docker-stop-parar-un-contenedor","text":"docker stop [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] Para acabar con la ejecuci\u00f3n de un contenedor.","title":"docker stop - Parar un contenedor"},{"location":"devops/docker/docker-comandos/#docker-rm-rmi-borrar-contenedor-imagen","text":"docker rm [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ] docker rmi [ <opciones> ] <imagen> [ <imagen1> <imagen2> ... ] El primero sirve para borrar contenedores y el segundo para im\u00e1genes. Si quisieramos que un contenedor se borrase una vez se dejara de ejecutar docker run --rm <contenedor>","title":"docker rm / rmi - Borrar contenedor / imagen"},{"location":"devops/docker/docker-comandos/#docker-history-ver-el-historial-de-creacion-de-una-imagen","text":"docker history [ <opciones> ] <imagen> Para poder ver todos los pasos que ha llevado a cabo hacer una imagen. Se recomienda usar la opci\u00f3n -H para poder leerlo mejor docker history -H <imagen>","title":"docker history - Ver el historial de creacion de una imagen"},{"location":"devops/docker/docker-comandos/#docker-logs-ver-los-logs-salidas-de-un-contenedor","text":"docker logs [ <opciones> ] <contenedor>","title":"docker logs - Ver los logs (salidas) de un contenedor"},{"location":"devops/docker/docker-comandos/#docker-stats-ver-consumo-de-recursos-de-un-contenedor","text":"docker stats [ <opciones> ] <contenedor> [ <contenedor1> <contenedor2> ... ]","title":"docker stats - Ver consumo de recursos de un contenedor"},{"location":"devops/docker/docker-comandos/#docker-cp-copiar-ficheros-a-desde-un-contenedor-al-sistema-local","text":"# Copiar del sistema al contenedor docker cp [ <optiones> ] <src-path> <contenedor>:<dest-path> # Copiar del contenedor al sistema docker cp [ <optiones> ] <contenedor>:<src-path> <dest-path>","title":"docker cp - Copiar ficheros a / desde un contenedor al sistema local"},{"location":"devops/docker/docker-comandos/#docker-inspect-obtener-informacion-de-bajo-nivel-de-un-contenedor","text":"docker inspect [ <opciones> ] <contenedor> [ <contenedor2> <contenedor3> ... ]","title":"docker inspect - Obtener informaci\u00f3n de bajo nivel de un contenedor"},{"location":"devops/docker/docker-comandos/#docker-commit-crear-una-imagen-a-partir-de-un-contenedor-modificado","text":"docker commit [ <opciones> ] contenedor [ <repositorio> [ :<tag> ]] Esto se ve con m\u00e1s detalle en -> Crear im\u00e1genes Docker","title":"docker commit - Crear una imagen a partir de un contenedor (modificado)"},{"location":"devops/docker/docker-contenedores/","text":"Arrancar contenedores \u00b6 TODO Ejemplo, limitar memoria a 500MB y solo usar hasta 2 cores docker run -m \"500mb\" --cpu-set-cpus 0 -1 <imagen> Hello World \u00b6 Para hacer un Hola mundo en Docker, lo que se hace es ejecutar un contenedor de la imagen hello-world . Para ello podemos bajar la imagen con docker pull hello-world y luego ejecutarlo. O bien ejecutarlo directamente y ya docker se encarga de bajar la imagen si n est\u00e1 y ejecutarla. Para ello hacemos docker run hello-world Puertos \u00b6 Por defecto todos los contenedores tienen todos los puertos cerrados. En muchos casos tienen ciertos puertos para poder consumir un servicio y el propio contenedor te dice que puertos y que tr\u00e1fico soportan. La gracia aqu\u00ed est\u00e1 en que nosotros podemos asignarle cualquier puerto del Host a ese puerto del contenedor con la opci\u00f3n -p <puerto-host>:<puerto-contenedor> . En el ejemplo ejecuto un docker con un jenkins, y le as\u00edgno el puerto 80 de mi m\u00e1quina (que es el que usan los navegadores) al puerto 8080 del contenedor (que es por donde se despacha el jenkins). docker run -p 80 :8080 jenkins Esto es un buena soluci\u00f3n en cuestiones de seguridad y de escalabilidad, ya que el contenedor tiene los puertos por defecto pero el host no. Lanzar contenedor con comando \u00b6 Para ver por ejemplo el filesystem del contenedor ubuntu hacemos docker run ubuntu ls . Contenedores interactivos \u00b6 Para que el contenedor ubuntu no se pare por ejemplo, podemos acceder con la opci\u00f3n interactive y con tty docker run -i -t ubuntu bash Ahora estamos dentro del container y podemos ejecutar comandos o lo que queramos. Asignarle un nombre al contenedor \u00b6 Para asignarle un nombre al contenedor para ser usado de manera m\u00e1s c\u00f3moda, hay que usar la opci\u00f3n --name . Este nombre se podr\u00e1 usar en sustituci\u00f3n del id del contenedor en muchos comandos, haciendo as\u00ed m\u00e1s f\u00e1cil su uso. docker run --name perico -it ubuntu Si queremos renombrar un contenedor debemos usar el comando docker rename . docker rename <nombre-actual-del-contenedor> <nuevo-nombre-del-contenedor> Salir del contenedor \u00b6 Salir del contenedor y apagarlo / matarlo: Para salir del contenedor podemos ejecutar el comando exit Usar la combinaci\u00f3n Ctrl+D . Salir del contenedor pero mantenerlo activo: Mantener todo el rato la tecla Ctrl Luego pulsar P Despu\u00e9s Q Es decir -> Ctrl+P , D Limitar recursos \u00b6","title":"Lanzar contenedores"},{"location":"devops/docker/docker-contenedores/#arrancar-contenedores","text":"TODO Ejemplo, limitar memoria a 500MB y solo usar hasta 2 cores docker run -m \"500mb\" --cpu-set-cpus 0 -1 <imagen>","title":"Arrancar contenedores"},{"location":"devops/docker/docker-contenedores/#hello-world","text":"Para hacer un Hola mundo en Docker, lo que se hace es ejecutar un contenedor de la imagen hello-world . Para ello podemos bajar la imagen con docker pull hello-world y luego ejecutarlo. O bien ejecutarlo directamente y ya docker se encarga de bajar la imagen si n est\u00e1 y ejecutarla. Para ello hacemos docker run hello-world","title":"Hello World"},{"location":"devops/docker/docker-contenedores/#puertos","text":"Por defecto todos los contenedores tienen todos los puertos cerrados. En muchos casos tienen ciertos puertos para poder consumir un servicio y el propio contenedor te dice que puertos y que tr\u00e1fico soportan. La gracia aqu\u00ed est\u00e1 en que nosotros podemos asignarle cualquier puerto del Host a ese puerto del contenedor con la opci\u00f3n -p <puerto-host>:<puerto-contenedor> . En el ejemplo ejecuto un docker con un jenkins, y le as\u00edgno el puerto 80 de mi m\u00e1quina (que es el que usan los navegadores) al puerto 8080 del contenedor (que es por donde se despacha el jenkins). docker run -p 80 :8080 jenkins Esto es un buena soluci\u00f3n en cuestiones de seguridad y de escalabilidad, ya que el contenedor tiene los puertos por defecto pero el host no.","title":"Puertos"},{"location":"devops/docker/docker-contenedores/#lanzar-contenedor-con-comando","text":"Para ver por ejemplo el filesystem del contenedor ubuntu hacemos docker run ubuntu ls .","title":"Lanzar contenedor con comando"},{"location":"devops/docker/docker-contenedores/#contenedores-interactivos","text":"Para que el contenedor ubuntu no se pare por ejemplo, podemos acceder con la opci\u00f3n interactive y con tty docker run -i -t ubuntu bash Ahora estamos dentro del container y podemos ejecutar comandos o lo que queramos.","title":"Contenedores interactivos"},{"location":"devops/docker/docker-contenedores/#asignarle-un-nombre-al-contenedor","text":"Para asignarle un nombre al contenedor para ser usado de manera m\u00e1s c\u00f3moda, hay que usar la opci\u00f3n --name . Este nombre se podr\u00e1 usar en sustituci\u00f3n del id del contenedor en muchos comandos, haciendo as\u00ed m\u00e1s f\u00e1cil su uso. docker run --name perico -it ubuntu Si queremos renombrar un contenedor debemos usar el comando docker rename . docker rename <nombre-actual-del-contenedor> <nuevo-nombre-del-contenedor>","title":"Asignarle un nombre al contenedor"},{"location":"devops/docker/docker-contenedores/#salir-del-contenedor","text":"Salir del contenedor y apagarlo / matarlo: Para salir del contenedor podemos ejecutar el comando exit Usar la combinaci\u00f3n Ctrl+D . Salir del contenedor pero mantenerlo activo: Mantener todo el rato la tecla Ctrl Luego pulsar P Despu\u00e9s Q Es decir -> Ctrl+P , D","title":"Salir del contenedor"},{"location":"devops/docker/docker-contenedores/#limitar-recursos","text":"","title":"Limitar recursos"},{"location":"devops/docker/docker-dockercompose/","text":"Docker Compose \u00b6 Informaci\u00f3n oficial -> aqu\u00ed Es para aplicaciones multicontenedor. La nomenclatura que se sigue a la hora de nombrar el fichero es docker-compose-<nombre>.yml , y su formato es YAML . Si no se especifica nada, el fichero tiene que llamarse docker-compose.yml . Instalaci\u00f3n de Docker Compose \u00b6 Informaci\u00f3n oficial -> aqu\u00ed sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose up - Levantar contenedores con docker-compose \u00b6 docker-compose up [ <opciones> ] [ --scale <servicio> = <numero-instancias> ] [ <servicio1> <servicio2> ... ] Con este comando lanza docker-compose y ejecuta el fichero por defecto docker-compose.yml . docker-compose [ -p <nombre-proyecto> ] up [ -d ] Si queremos que levante un fichero docker-compose especifico, hacemos docker-compose [ -p <nombre-proyecto> ] -f <fichero-docker-compose> up [ -d ] docker-compose down - Parar y eliminar todo lo que ha hecho docker-compose \u00b6 docker-compose [ -f <fichero-docker-compose> ] down [ -d ] Estructura \u00b6 Tiene cuatro secciones: version -> Indica la version de Docker-Compose que se va a usar (poner '3' a menos que). Es OBLIGATORIA services -> Son los distintos servicios / contenedores que se van a crear Es OBLIGATORIA volumes -> opcional networks -> opcional version: services: volumes: networks: Un ejemplo con un contenedor de nginx. Si fuera por comandos har\u00edamos docker run -d --name nginx nginx Con docker-compose version: '3' services: web: container_name: nginx1 ports: - \"8080:80\" image: nginx Y para lanzarlo docker-compose up -d Para eliminar todo lo que ha hecho el anterior fichero hacemos docker-compose down services \u00b6 container_name -> Nombre del contenedor image -> Imagen con la que se va a crear build -> Ruta hasta el Dockerfile usar una imagen propia Versi\u00f3n corta version: '3' services: web: build: . Versi\u00f3n extendida version: '3' services: webapp: build: context: ./dir dockerfile: mi-dockerfile args: buildno: 1 command -> Mandarle un comando, sobreescribiendo el del Dockerfile (si lo hubiera). ports -> Exponer los puertos restart -> Pol\u00edtica de reinicio (informaci\u00f3n aqu\u00ed ) no -> Por defecto. on-failure -> Reiniciar el contenedor si hay un error. always -> Reiniciar si el contenedor se para (si se ha parado a mano, se reiniciar\u00e1 cuando se reinicie el demonio de docker). unless-stopped -> Parecido a always pero no se reinicia cuando se reinicia el demonio de docker. volumes \u00b6 version: \"3.2\" services: web: image: nginx:alpine volumes: - type: volume source: mydata target: /data volume: nocopy: true - type: bind source: ./static target: /opt/app/static db: image: postgres:latest volumes: - \"/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock\" - \"dbdata:/var/lib/postgresql/data\" volumes: mydata: dbdata: networks \u00b6 version: '3' services: web: networks: - some-network - other-network networks: some-network: other-network:","title":"Docker Compose"},{"location":"devops/docker/docker-dockercompose/#docker-compose","text":"Informaci\u00f3n oficial -> aqu\u00ed Es para aplicaciones multicontenedor. La nomenclatura que se sigue a la hora de nombrar el fichero es docker-compose-<nombre>.yml , y su formato es YAML . Si no se especifica nada, el fichero tiene que llamarse docker-compose.yml .","title":"Docker Compose"},{"location":"devops/docker/docker-dockercompose/#instalacion-de-docker-compose","text":"Informaci\u00f3n oficial -> aqu\u00ed sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose","title":"Instalaci\u00f3n de Docker Compose"},{"location":"devops/docker/docker-dockercompose/#docker-compose-up-levantar-contenedores-con-docker-compose","text":"docker-compose up [ <opciones> ] [ --scale <servicio> = <numero-instancias> ] [ <servicio1> <servicio2> ... ] Con este comando lanza docker-compose y ejecuta el fichero por defecto docker-compose.yml . docker-compose [ -p <nombre-proyecto> ] up [ -d ] Si queremos que levante un fichero docker-compose especifico, hacemos docker-compose [ -p <nombre-proyecto> ] -f <fichero-docker-compose> up [ -d ]","title":"docker-compose up - Levantar contenedores con docker-compose"},{"location":"devops/docker/docker-dockercompose/#docker-compose-down-parar-y-eliminar-todo-lo-que-ha-hecho-docker-compose","text":"docker-compose [ -f <fichero-docker-compose> ] down [ -d ]","title":"docker-compose down - Parar y eliminar todo lo que ha hecho docker-compose"},{"location":"devops/docker/docker-dockercompose/#estructura","text":"Tiene cuatro secciones: version -> Indica la version de Docker-Compose que se va a usar (poner '3' a menos que). Es OBLIGATORIA services -> Son los distintos servicios / contenedores que se van a crear Es OBLIGATORIA volumes -> opcional networks -> opcional version: services: volumes: networks: Un ejemplo con un contenedor de nginx. Si fuera por comandos har\u00edamos docker run -d --name nginx nginx Con docker-compose version: '3' services: web: container_name: nginx1 ports: - \"8080:80\" image: nginx Y para lanzarlo docker-compose up -d Para eliminar todo lo que ha hecho el anterior fichero hacemos docker-compose down","title":"Estructura"},{"location":"devops/docker/docker-dockercompose/#services","text":"container_name -> Nombre del contenedor image -> Imagen con la que se va a crear build -> Ruta hasta el Dockerfile usar una imagen propia Versi\u00f3n corta version: '3' services: web: build: . Versi\u00f3n extendida version: '3' services: webapp: build: context: ./dir dockerfile: mi-dockerfile args: buildno: 1 command -> Mandarle un comando, sobreescribiendo el del Dockerfile (si lo hubiera). ports -> Exponer los puertos restart -> Pol\u00edtica de reinicio (informaci\u00f3n aqu\u00ed ) no -> Por defecto. on-failure -> Reiniciar el contenedor si hay un error. always -> Reiniciar si el contenedor se para (si se ha parado a mano, se reiniciar\u00e1 cuando se reinicie el demonio de docker). unless-stopped -> Parecido a always pero no se reinicia cuando se reinicia el demonio de docker.","title":"services"},{"location":"devops/docker/docker-dockercompose/#volumes","text":"version: \"3.2\" services: web: image: nginx:alpine volumes: - type: volume source: mydata target: /data volume: nocopy: true - type: bind source: ./static target: /opt/app/static db: image: postgres:latest volumes: - \"/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock\" - \"dbdata:/var/lib/postgresql/data\" volumes: mydata: dbdata:","title":"volumes"},{"location":"devops/docker/docker-dockercompose/#networks","text":"version: '3' services: web: networks: - some-network - other-network networks: some-network: other-network:","title":"networks"},{"location":"devops/docker/docker-dockerfile/","text":"Dockerfile - Crear imagen desde cero \u00b6 Info oficial -> aqu\u00ed Para poder crear una imagen desde otra con todo lo que necesita, pero de manera m\u00e1s c\u00f3moda, lo que se usan son unos ficheros de texto llamados Dockerfile . Por defecto los ficheros se tienen que llamar as\u00ed, aunque se pueden cambiar. Estructura / Directivas del Dockerfile \u00b6 Este fichero tiene ciertas palabras clave o directivas: FROM \u00b6 Imagen base en la que se va a basar la nueva. FROM <image> [ AS <name> ] FROM <image> [ :<tag> ] [ AS <name> ] FROM <image> [ @<digest> ] [ AS <name> ] Es la primera directiva del Dockerfile . Puede haber varias FROM para usar lo que se llama el Multi-Stage-Build . Puede ir precedida de la directiva ARG ARG CODE_VERSION = latest FROM base: ${ CODE_VERSION } CMD /code/run-app FROM extras: ${ CODE_VERSION } CMD /code/run-extras LABEL \u00b6 Es para a\u00f1adir metadata a la imagen (autor, mantenedor, versi\u00f3n, etc). LABEL <key> = value<value> LABEL <key1> = <value1> <key2> = <value2> ... Puede haber m\u00e1s de una LABEL por Dockerfile . Consiste en un conjunto de clave-valor, y pueden ir varias por l\u00ednea. MAINTAINER -> Creador de la imagen, pero est\u00e1 deprecated. Usar LABEL . RUN \u00b6 Comandos a ejecutar ANTES de ser creada (por ejemplo, paquetes a instalarle a la imagen base). RUN <command> RUN [ \"executable\" , \"param1\" , \"param2\" ] Puede haber varias directivas RUN en un Dockerfile . Se debe usar comillas dobles \" no comillas simples ' . COPY \u00b6 Copia ficheros locales a la imagen. COPY <src> <dest> COPY <src1> <src2> ... <dest> COPY [ --chown = <user>:<group> ] <src> ... <dest> COPY [ --chown = <user>:<group> ] [ \"<src>\" , ... \"<dest>\" ] Puede haber varios COPY por Dockerfile . --chown solo se puede usar en Linux (en Windows no). ADD \u00b6 Hace lo mismo que COPY , pero adem\u00e1s solo copia ficheros locales. Puedes copiar contenido desde una URL, o si el fichero est\u00e1 comprimido, al usar ADD lo descomprime. ADD <src> <dest> ADD <src1> <src2> ... <dest> ADD [ --chown = <user>:<group> ] <src> ... <dest> ADD [ --chown = <user>:<group> ] [ \"<src>\" , ... \"<dest>\" ] Puede haber varios ADD en el Dockerfile . --chown solo sirve en Linux (en Windows no va). Se pueden usar ciertas reglas en <src> y <dest> como *.py (todos los ficheros que acaben en .py ). ENV \u00b6 Variable de entorno. ENV key value ENV <key1> = <value1> <key2> = <value2> ... Puede haber varias ENV por Dockerfile . Si alguna ENV es igual que alguna ARG , la sobreescribe ( ENV > ARG ). WORKDIR \u00b6 Directorio de trabajo de la imagen. WORKDIR <path> Puede haber varios WORKDIR dentro del Dockerfile (aunque no tiene sentido). Sirve para definir el directorio con las directivas RUN , CMD , ENTRYPOINT , COPY , ADD . Este ejemplo hace que el directorio de trabajo sea /a/b/c WORKDIR /a WORKDIR b WORKDIR c Que se podr\u00eda poner de manera m\u00e1s simple con WORKDIR /a/b/c EXPOSE -> Exponer por defecto un puerto del contenedor. EXPOSE <port> [ <port>/<protocol> ... ] Puede haber varios EXPOSE por Dockerfile . Si no se especifica el protocolo, por defecto toma tcp , pero si quieres udp tienes que especificarlo. Si quisieras que permita los dos protocolos, se debe incluir en dos l\u00edneas. EXPOSE 80 /tcp EXPOSE 80 /udp Con la opci\u00f3n -p se sobreescribe lo del Dockerfile docker run -p 80:80/tcp 80:80/udp ... . Esto se gestiona con docker network . USER -> Sirve para indicar dentro del Dockerfile un usuario. USER <user> [ :<group> ] USER <UID> [ :<GID> ] Puede haber varios USER dentro del Dockerfile . Son para ejecutar RUN , CMD o ENTRYPOINT con un usuario especifico, en lugar de root. El usuario por defecto de un Dockerfile es root. VOLUME -> Para persistencia de datos, indicamos al contenedor donde almacenar sus datos en un directorio del Docker Host (nuestra m\u00e1quina). VOLUME [ \"/data\" ] Esto es un concepto m\u00e1s avanzado y se ve en su propia secci\u00f3n. ENTRYPOINT -> CMD -> Acci\u00f3n por defecto al crear el contenedor. CMD [ \"executable\" , \"param1\" , \"param2\" ] CMD [ \"param1\" , \"param2\" ] CMD command param1 param2 Solo puede haber una CMD por Dockerfile . .dockerignore - Descartar ficheros para crear una imagen \u00b6 El .dockerignore equivale al .gitignore de git. Es un fichero donde indicarle al Dockerfile que archivos y/o directorios no cargar en la imagen. docker build - Construir imagen desde el Dockerfile \u00b6 docker build [ <opciones> ] [ <path> | <url> | - ] Info oficial -> aqu\u00ed Para crear la imagen con un Dockerfile que se llama Dockerfile se jecuta docker build Si queremos usar otro fichero con otro nombre como Dockerfile hay que usar la opci\u00f3n -f docker build -f <fichero-dockerfile> Se recomienda usar siempre la opci\u00f3n -t para asignarle un nombre y opcionalmente un tag a la imagen. Si no se especifica el tag, docker pone por defecto latest docker build -t <name> [ :<tag> ] Se le puede indicar el path donde est\u00e1 el Dockerfile , y este path puede ser incluso una url de un repo git. Se recomienda usar docker build -t <nombre>:<tag> <path-absoluto-hasta-el-dockerfile> Dangling images - Im\u00e1genes hu\u00e9rfanas / colgadas \u00b6 Si al construir varias im\u00e1genes del mismo Dockerfile , estas se llaman igual (porque no hemos especificado nombres y tags distintos), solo la m\u00e1s nueva tiene el nombre y todas las dem\u00e1s quedan hu\u00e9rfanas. Al usar docker images vemos come en su REPOSITORY pone <none> y en TAG pasa igual. Por eso HAY QUE USAR TAGS . La forma de ver todas estas im\u00e1genenes colgadas es con docker images -f dangling = true Lo l\u00f3gico es borrar todas estas im\u00e1genes, para ello a\u00f1adimos a la sentencia anterior -q para ver solo los ids y luego usar el comando docker rmi . Una forma autom\u00e1tica de hacer esto es docker images -f dangling = true -q | xargs docker rmi Multi-Stage-Build \u00b6 Es probable que a veces necesitemos usar algo (fichero, carpetas, ...) de alguna imagen para poder usarlo en otra. Tendr\u00edamos dos opciones: Crear una imagen con \"las dos imagenes dentro\", es decir, crear una imagen m\u00e1s pesada. Generar los recursos en una imagen temporal y copiarlos a la imagen final -> Multi-Stage-Build. La forma de hacer el paso 2. consiste en usar varios FROM dentro del Dockerfile . A cada FROM se asigna un alias y para poder llamar algo de esa imagen usamos la opci\u00f3n --from=<alias> . El \u00faltimo FROM es con el que se va a construir la imagen, pero los anteriores los ejecuta y podemos copiar los ficheros en las instrucciones a partir del \u00faltimo FROM . Un ejemplo FROM <imagen-que-genera-fichero> AS <alias-de-ayuda> # Operaciones FROM <imagen-final> COPY --from = <alias-de-ayuda> <fichero-src-en-la-imagen-de-arriba> <fichero-dest-en-mi-imagen-final> La imagen base va a ser <imagen-final> , y todas las dem\u00e1s no entran dentro, pero si se generan para poder hacer el COPY . Buenas pr\u00e1cticas Dockerfile \u00b6 Info oficial -> aqu\u00ed Contenedor ef\u00edmero -> F\u00e1cilmente destruible Un servicio por contenedor Crear un .dockerignore para evitar archivos pesados Cuantas menos capas mejor: Argumentos largos separados con \\ . Varios argumentos en una sola capa (en vez de muchas capas). No instalar paquetes innecesarios (solo el servicio). Usar Multi-Stage-Build. Usar LABEL para documentar (versiones, descripciones, etc).","title":"Dockerfile"},{"location":"devops/docker/docker-dockerfile/#dockerfile-crear-imagen-desde-cero","text":"Info oficial -> aqu\u00ed Para poder crear una imagen desde otra con todo lo que necesita, pero de manera m\u00e1s c\u00f3moda, lo que se usan son unos ficheros de texto llamados Dockerfile . Por defecto los ficheros se tienen que llamar as\u00ed, aunque se pueden cambiar.","title":"Dockerfile - Crear imagen desde cero"},{"location":"devops/docker/docker-dockerfile/#estructura-directivas-del-dockerfile","text":"Este fichero tiene ciertas palabras clave o directivas:","title":"Estructura / Directivas del Dockerfile"},{"location":"devops/docker/docker-dockerfile/#from","text":"Imagen base en la que se va a basar la nueva. FROM <image> [ AS <name> ] FROM <image> [ :<tag> ] [ AS <name> ] FROM <image> [ @<digest> ] [ AS <name> ] Es la primera directiva del Dockerfile . Puede haber varias FROM para usar lo que se llama el Multi-Stage-Build . Puede ir precedida de la directiva ARG ARG CODE_VERSION = latest FROM base: ${ CODE_VERSION } CMD /code/run-app FROM extras: ${ CODE_VERSION } CMD /code/run-extras","title":"FROM"},{"location":"devops/docker/docker-dockerfile/#label","text":"Es para a\u00f1adir metadata a la imagen (autor, mantenedor, versi\u00f3n, etc). LABEL <key> = value<value> LABEL <key1> = <value1> <key2> = <value2> ... Puede haber m\u00e1s de una LABEL por Dockerfile . Consiste en un conjunto de clave-valor, y pueden ir varias por l\u00ednea. MAINTAINER -> Creador de la imagen, pero est\u00e1 deprecated. Usar LABEL .","title":"LABEL"},{"location":"devops/docker/docker-dockerfile/#run","text":"Comandos a ejecutar ANTES de ser creada (por ejemplo, paquetes a instalarle a la imagen base). RUN <command> RUN [ \"executable\" , \"param1\" , \"param2\" ] Puede haber varias directivas RUN en un Dockerfile . Se debe usar comillas dobles \" no comillas simples ' .","title":"RUN"},{"location":"devops/docker/docker-dockerfile/#copy","text":"Copia ficheros locales a la imagen. COPY <src> <dest> COPY <src1> <src2> ... <dest> COPY [ --chown = <user>:<group> ] <src> ... <dest> COPY [ --chown = <user>:<group> ] [ \"<src>\" , ... \"<dest>\" ] Puede haber varios COPY por Dockerfile . --chown solo se puede usar en Linux (en Windows no).","title":"COPY"},{"location":"devops/docker/docker-dockerfile/#add","text":"Hace lo mismo que COPY , pero adem\u00e1s solo copia ficheros locales. Puedes copiar contenido desde una URL, o si el fichero est\u00e1 comprimido, al usar ADD lo descomprime. ADD <src> <dest> ADD <src1> <src2> ... <dest> ADD [ --chown = <user>:<group> ] <src> ... <dest> ADD [ --chown = <user>:<group> ] [ \"<src>\" , ... \"<dest>\" ] Puede haber varios ADD en el Dockerfile . --chown solo sirve en Linux (en Windows no va). Se pueden usar ciertas reglas en <src> y <dest> como *.py (todos los ficheros que acaben en .py ).","title":"ADD"},{"location":"devops/docker/docker-dockerfile/#env","text":"Variable de entorno. ENV key value ENV <key1> = <value1> <key2> = <value2> ... Puede haber varias ENV por Dockerfile . Si alguna ENV es igual que alguna ARG , la sobreescribe ( ENV > ARG ).","title":"ENV"},{"location":"devops/docker/docker-dockerfile/#workdir","text":"Directorio de trabajo de la imagen. WORKDIR <path> Puede haber varios WORKDIR dentro del Dockerfile (aunque no tiene sentido). Sirve para definir el directorio con las directivas RUN , CMD , ENTRYPOINT , COPY , ADD . Este ejemplo hace que el directorio de trabajo sea /a/b/c WORKDIR /a WORKDIR b WORKDIR c Que se podr\u00eda poner de manera m\u00e1s simple con WORKDIR /a/b/c EXPOSE -> Exponer por defecto un puerto del contenedor. EXPOSE <port> [ <port>/<protocol> ... ] Puede haber varios EXPOSE por Dockerfile . Si no se especifica el protocolo, por defecto toma tcp , pero si quieres udp tienes que especificarlo. Si quisieras que permita los dos protocolos, se debe incluir en dos l\u00edneas. EXPOSE 80 /tcp EXPOSE 80 /udp Con la opci\u00f3n -p se sobreescribe lo del Dockerfile docker run -p 80:80/tcp 80:80/udp ... . Esto se gestiona con docker network . USER -> Sirve para indicar dentro del Dockerfile un usuario. USER <user> [ :<group> ] USER <UID> [ :<GID> ] Puede haber varios USER dentro del Dockerfile . Son para ejecutar RUN , CMD o ENTRYPOINT con un usuario especifico, en lugar de root. El usuario por defecto de un Dockerfile es root. VOLUME -> Para persistencia de datos, indicamos al contenedor donde almacenar sus datos en un directorio del Docker Host (nuestra m\u00e1quina). VOLUME [ \"/data\" ] Esto es un concepto m\u00e1s avanzado y se ve en su propia secci\u00f3n. ENTRYPOINT -> CMD -> Acci\u00f3n por defecto al crear el contenedor. CMD [ \"executable\" , \"param1\" , \"param2\" ] CMD [ \"param1\" , \"param2\" ] CMD command param1 param2 Solo puede haber una CMD por Dockerfile .","title":"WORKDIR"},{"location":"devops/docker/docker-dockerfile/#dockerignore-descartar-ficheros-para-crear-una-imagen","text":"El .dockerignore equivale al .gitignore de git. Es un fichero donde indicarle al Dockerfile que archivos y/o directorios no cargar en la imagen.","title":".dockerignore - Descartar ficheros para crear una imagen"},{"location":"devops/docker/docker-dockerfile/#docker-build-construir-imagen-desde-el-dockerfile","text":"docker build [ <opciones> ] [ <path> | <url> | - ] Info oficial -> aqu\u00ed Para crear la imagen con un Dockerfile que se llama Dockerfile se jecuta docker build Si queremos usar otro fichero con otro nombre como Dockerfile hay que usar la opci\u00f3n -f docker build -f <fichero-dockerfile> Se recomienda usar siempre la opci\u00f3n -t para asignarle un nombre y opcionalmente un tag a la imagen. Si no se especifica el tag, docker pone por defecto latest docker build -t <name> [ :<tag> ] Se le puede indicar el path donde est\u00e1 el Dockerfile , y este path puede ser incluso una url de un repo git. Se recomienda usar docker build -t <nombre>:<tag> <path-absoluto-hasta-el-dockerfile>","title":"docker build - Construir imagen desde el Dockerfile"},{"location":"devops/docker/docker-dockerfile/#dangling-images-imagenes-huerfanas-colgadas","text":"Si al construir varias im\u00e1genes del mismo Dockerfile , estas se llaman igual (porque no hemos especificado nombres y tags distintos), solo la m\u00e1s nueva tiene el nombre y todas las dem\u00e1s quedan hu\u00e9rfanas. Al usar docker images vemos come en su REPOSITORY pone <none> y en TAG pasa igual. Por eso HAY QUE USAR TAGS . La forma de ver todas estas im\u00e1genenes colgadas es con docker images -f dangling = true Lo l\u00f3gico es borrar todas estas im\u00e1genes, para ello a\u00f1adimos a la sentencia anterior -q para ver solo los ids y luego usar el comando docker rmi . Una forma autom\u00e1tica de hacer esto es docker images -f dangling = true -q | xargs docker rmi","title":"Dangling images - Im\u00e1genes hu\u00e9rfanas / colgadas"},{"location":"devops/docker/docker-dockerfile/#multi-stage-build","text":"Es probable que a veces necesitemos usar algo (fichero, carpetas, ...) de alguna imagen para poder usarlo en otra. Tendr\u00edamos dos opciones: Crear una imagen con \"las dos imagenes dentro\", es decir, crear una imagen m\u00e1s pesada. Generar los recursos en una imagen temporal y copiarlos a la imagen final -> Multi-Stage-Build. La forma de hacer el paso 2. consiste en usar varios FROM dentro del Dockerfile . A cada FROM se asigna un alias y para poder llamar algo de esa imagen usamos la opci\u00f3n --from=<alias> . El \u00faltimo FROM es con el que se va a construir la imagen, pero los anteriores los ejecuta y podemos copiar los ficheros en las instrucciones a partir del \u00faltimo FROM . Un ejemplo FROM <imagen-que-genera-fichero> AS <alias-de-ayuda> # Operaciones FROM <imagen-final> COPY --from = <alias-de-ayuda> <fichero-src-en-la-imagen-de-arriba> <fichero-dest-en-mi-imagen-final> La imagen base va a ser <imagen-final> , y todas las dem\u00e1s no entran dentro, pero si se generan para poder hacer el COPY .","title":"Multi-Stage-Build"},{"location":"devops/docker/docker-dockerfile/#buenas-practicas-dockerfile","text":"Info oficial -> aqu\u00ed Contenedor ef\u00edmero -> F\u00e1cilmente destruible Un servicio por contenedor Crear un .dockerignore para evitar archivos pesados Cuantas menos capas mejor: Argumentos largos separados con \\ . Varios argumentos en una sola capa (en vez de muchas capas). No instalar paquetes innecesarios (solo el servicio). Usar Multi-Stage-Build. Usar LABEL para documentar (versiones, descripciones, etc).","title":"Buenas pr\u00e1cticas Dockerfile"},{"location":"devops/docker/docker-hub/","text":"Docker Hub \u00b6 Docker Hub es una plataforma online donde se suben y descargan im\u00e1genes docker. Siempre que necesitemos descargar una imagen, lo m\u00e1s seguro es que lo hagamos de aqu\u00ed. Lo primero que se recomienda despu\u00e9s de instalar Docker en nuestro pc, es hacerse una cuenta en Docker Hub. docker login \u00b6 Cuando tengamos una cuenta de Docker Hub, podemos loguearnos desde la terminal con docker login Nos pedir\u00e1 el usuario y contrase\u00f1a.","title":"Docker Hub"},{"location":"devops/docker/docker-hub/#docker-hub","text":"Docker Hub es una plataforma online donde se suben y descargan im\u00e1genes docker. Siempre que necesitemos descargar una imagen, lo m\u00e1s seguro es que lo hagamos de aqu\u00ed. Lo primero que se recomienda despu\u00e9s de instalar Docker en nuestro pc, es hacerse una cuenta en Docker Hub.","title":"Docker Hub"},{"location":"devops/docker/docker-hub/#docker-login","text":"Cuando tengamos una cuenta de Docker Hub, podemos loguearnos desde la terminal con docker login Nos pedir\u00e1 el usuario y contrase\u00f1a.","title":"docker login"},{"location":"devops/docker/docker-imagenes/","text":"Im\u00e1genes Docker \u00b6 TODO Crear im\u00e1genes con docker commit \u00b6 Supongamos que hemos abierto un contenedor, hemos modificado cosas y lo tenemos listo para trabajar. Si queremos crear una imagen as\u00ed para poder usarla, lo que har\u00edamos ser\u00eda docker commit <contenedor-modificado> <imagen-nueva> Podemos adem\u00e1s ejecutar comandos previos al commit para crear la nueva imagen. Por ejemplo, supongamos una imagen de ubuntu que le hemos instalado el servidor Apache2 y hemos lanzado el servicio. Con el siguiente comando exponemos el puerto 85 del contenedor y tenemos el apache2 en primer plano. docker commit --change = 'CMD [\"apache2ctl\", \"-D FOREGROUND\"]' -c \"EXPOSE 85\" <contenedor> <nueva-imagen>","title":"Crear im\u00e1genes"},{"location":"devops/docker/docker-imagenes/#imagenes-docker","text":"TODO","title":"Im\u00e1genes Docker"},{"location":"devops/docker/docker-imagenes/#crear-imagenes-con-docker-commit","text":"Supongamos que hemos abierto un contenedor, hemos modificado cosas y lo tenemos listo para trabajar. Si queremos crear una imagen as\u00ed para poder usarla, lo que har\u00edamos ser\u00eda docker commit <contenedor-modificado> <imagen-nueva> Podemos adem\u00e1s ejecutar comandos previos al commit para crear la nueva imagen. Por ejemplo, supongamos una imagen de ubuntu que le hemos instalado el servidor Apache2 y hemos lanzado el servicio. Con el siguiente comando exponemos el puerto 85 del contenedor y tenemos el apache2 en primer plano. docker commit --change = 'CMD [\"apache2ctl\", \"-D FOREGROUND\"]' -c \"EXPOSE 85\" <contenedor> <nueva-imagen>","title":"Crear im\u00e1genes con docker commit"},{"location":"devops/docker/docker-instalacion/","text":"Instalaci\u00f3n \u00b6 Script para la instalaci\u00f3n de docker -> aqu\u00ed En consola har\u00edamos curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh -y Despu\u00e9s de instalarlo deberemos darle los permisos al usuario docker para no tener que usarlo como root sudo usermod -aG docker $USER Ahora hay que cerrar sesi\u00f3n / logout / reiniciar, y volver a entrar para que los cambios surtan efecto. Una vez hecho esto podemos comprobar que todo funciona correctamente con los siguientes comandos (probarlos todos): docker -v -> Versi\u00f3n instalada en formato corto. docker version -> Versi\u00f3n instalada en formato extendido. docker info -> Informaci\u00f3n detallada del sistema. docker -> Lista todos los comandos de docker.","title":"Instalaci\u00f3n"},{"location":"devops/docker/docker-instalacion/#instalacion","text":"Script para la instalaci\u00f3n de docker -> aqu\u00ed En consola har\u00edamos curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh -y Despu\u00e9s de instalarlo deberemos darle los permisos al usuario docker para no tener que usarlo como root sudo usermod -aG docker $USER Ahora hay que cerrar sesi\u00f3n / logout / reiniciar, y volver a entrar para que los cambios surtan efecto. Una vez hecho esto podemos comprobar que todo funciona correctamente con los siguientes comandos (probarlos todos): docker -v -> Versi\u00f3n instalada en formato corto. docker version -> Versi\u00f3n instalada en formato extendido. docker info -> Informaci\u00f3n detallada del sistema. docker -> Lista todos los comandos de docker.","title":"Instalaci\u00f3n"},{"location":"devops/docker/docker-network/","text":"Docker Network \u00b6 Informaci\u00f3n oficial -> aqu\u00ed docker network \u00b6 docker network <comando> Tipos de driver de redes: bridge -> Red por defecto en los contenedores. Todos los contenedores de un mismo host est\u00e1n (en principio) conectados a esta red. Pueden comunicarse entre ellos, hacerse ping, etc. host -> Es la red del propio Docker Host. none -> Es para crear contenedor sin red. overlay -> Para conectar distintos docker daemons y permitir a docker Swarm hablar con ellos. macvlan -> Permite asignar una mac a un contenedor. Network Plugins -> aqu\u00ed Crear / Eliminar red \u00b6 # Crear docker network create [ -d bridge ] [ --subnet 172 .17.10.0/24 ] [ --gateway 172 .17.10.1 ] [ --ip 172 .17.10.50 ] <red> # Eliminar docker network rm <red> [ <red2> <red3> ... ] Inspeccionar red \u00b6 docker inspect <red> Crear un contenedor conectado a una red definida \u00b6 docker run --network <red> ... Todos los contenedores que esten dentro de una red definida, a la hora de hacer un ping por ejemplo, no necesito poner su ip, con poner su nombre es suficiente (ya que tengo un DNS propio). Esto solo se puede hacer cuando es una red creada por mi, no en la red por defecto de docker. Conectar / desconectar un contenedor a una red definida \u00b6 # Conectar docker network connect [ <opciones> ] <red> <contenedor> # Desconectar docker network disconnect [ <opciones> ] <red> <contenedor>","title":"Network"},{"location":"devops/docker/docker-network/#docker-network","text":"Informaci\u00f3n oficial -> aqu\u00ed","title":"Docker Network"},{"location":"devops/docker/docker-network/#docker-network_1","text":"docker network <comando> Tipos de driver de redes: bridge -> Red por defecto en los contenedores. Todos los contenedores de un mismo host est\u00e1n (en principio) conectados a esta red. Pueden comunicarse entre ellos, hacerse ping, etc. host -> Es la red del propio Docker Host. none -> Es para crear contenedor sin red. overlay -> Para conectar distintos docker daemons y permitir a docker Swarm hablar con ellos. macvlan -> Permite asignar una mac a un contenedor. Network Plugins -> aqu\u00ed","title":"docker network"},{"location":"devops/docker/docker-network/#crear-eliminar-red","text":"# Crear docker network create [ -d bridge ] [ --subnet 172 .17.10.0/24 ] [ --gateway 172 .17.10.1 ] [ --ip 172 .17.10.50 ] <red> # Eliminar docker network rm <red> [ <red2> <red3> ... ]","title":"Crear / Eliminar red"},{"location":"devops/docker/docker-network/#inspeccionar-red","text":"docker inspect <red>","title":"Inspeccionar red"},{"location":"devops/docker/docker-network/#crear-un-contenedor-conectado-a-una-red-definida","text":"docker run --network <red> ... Todos los contenedores que esten dentro de una red definida, a la hora de hacer un ping por ejemplo, no necesito poner su ip, con poner su nombre es suficiente (ya que tengo un DNS propio). Esto solo se puede hacer cuando es una red creada por mi, no en la red por defecto de docker.","title":"Crear un contenedor conectado a una red definida"},{"location":"devops/docker/docker-network/#conectar-desconectar-un-contenedor-a-una-red-definida","text":"# Conectar docker network connect [ <opciones> ] <red> <contenedor> # Desconectar docker network disconnect [ <opciones> ] <red> <contenedor>","title":"Conectar / desconectar un contenedor a una red definida"},{"location":"devops/docker/docker-volumes/","text":"Docker Volumes \u00b6 Informaci\u00f3n oficial -> aqu\u00ed Existen 3 tipos de volumenes: Host Volumes -> Una carpeta del Host. Named Volumes -> Un volumen con nombre creado con Docker No deja de ser un Host Volume pero en la carpeta /../docker/volumes/<nombre-volumen> Anonymous Volumes -> Es igual que Named Volumes solo que el nombre es un hash que asigna docker. Manipular (crear, listar, destruir...) volumenes con docker volume \u00b6 # Crear volumen docker volume create <nombre-volumen> # Listar volumenes docker volume ls # Borrar volumen docker volume rm <nombre-volumen> Se recomienda asignar nombre a los vol\u00famenes, ya que sino ser\u00e1n vol\u00famenes an\u00f3nimos y es m\u00e1s complicado nombrarlos (hay que usar su id). Montar volumen con docker run \u00b6 # Ejecutar contenedor con un volumen host montado en el contenedor docker run -v [ <directorio-host-o-volumen-definido>: ] <directorio-contenedor> -t <nombre-contenedor> # Borrar tanto el contendor como su volumen docker rm -v <nombre-contenedor> OJO -> Si queremos montar una carpeta local espec\u00edfica en un contenedor, solo podemos hacerlo con este comando. No se puede montar una carpeta local espec\u00edfica desde el Dockerfile ya que el path podr\u00eda cambiar. Por ejemplo si queremos montar la propia carpeta en la que estamos har\u00edamos docker run -v $( pwd ) :<directorio-contenedor> <contenedor> Si no indica el <directorio-host-o-volumen-definido> , se crear\u00e1 un volumen an\u00f3nimo. Montar volumen con Dockerfile \u00b6 Desde el Dockerfile podemos hacer lo mismo, pero solo crea volumenes an\u00f3nimos. Es decir, que no podemos montar una carpeta local espec\u00edfica. VOLUME <directorio-contenedor> Dangling Volumes \u00b6 Si al borrar los contenedores, no especificamos que borre sus volumenes con -v , quedar\u00e1n los llamados Dangling Volumes . Para verlos y borrarlos # Ver todos los volumenes dangling docker volume ls -f dangling = true # Listar todos los ids de los dangling volumes | Borrarlos docker volume ls -f dangling = true -q | xargs docker volume rm","title":"Volumes"},{"location":"devops/docker/docker-volumes/#docker-volumes","text":"Informaci\u00f3n oficial -> aqu\u00ed Existen 3 tipos de volumenes: Host Volumes -> Una carpeta del Host. Named Volumes -> Un volumen con nombre creado con Docker No deja de ser un Host Volume pero en la carpeta /../docker/volumes/<nombre-volumen> Anonymous Volumes -> Es igual que Named Volumes solo que el nombre es un hash que asigna docker.","title":"Docker Volumes"},{"location":"devops/docker/docker-volumes/#manipular-crear-listar-destruir-volumenes-con-docker-volume","text":"# Crear volumen docker volume create <nombre-volumen> # Listar volumenes docker volume ls # Borrar volumen docker volume rm <nombre-volumen> Se recomienda asignar nombre a los vol\u00famenes, ya que sino ser\u00e1n vol\u00famenes an\u00f3nimos y es m\u00e1s complicado nombrarlos (hay que usar su id).","title":"Manipular (crear, listar, destruir...) volumenes con docker volume"},{"location":"devops/docker/docker-volumes/#montar-volumen-con-docker-run","text":"# Ejecutar contenedor con un volumen host montado en el contenedor docker run -v [ <directorio-host-o-volumen-definido>: ] <directorio-contenedor> -t <nombre-contenedor> # Borrar tanto el contendor como su volumen docker rm -v <nombre-contenedor> OJO -> Si queremos montar una carpeta local espec\u00edfica en un contenedor, solo podemos hacerlo con este comando. No se puede montar una carpeta local espec\u00edfica desde el Dockerfile ya que el path podr\u00eda cambiar. Por ejemplo si queremos montar la propia carpeta en la que estamos har\u00edamos docker run -v $( pwd ) :<directorio-contenedor> <contenedor> Si no indica el <directorio-host-o-volumen-definido> , se crear\u00e1 un volumen an\u00f3nimo.","title":"Montar volumen con docker run"},{"location":"devops/docker/docker-volumes/#montar-volumen-con-dockerfile","text":"Desde el Dockerfile podemos hacer lo mismo, pero solo crea volumenes an\u00f3nimos. Es decir, que no podemos montar una carpeta local espec\u00edfica. VOLUME <directorio-contenedor>","title":"Montar volumen con Dockerfile"},{"location":"devops/docker/docker-volumes/#dangling-volumes","text":"Si al borrar los contenedores, no especificamos que borre sus volumenes con -v , quedar\u00e1n los llamados Dangling Volumes . Para verlos y borrarlos # Ver todos los volumenes dangling docker volume ls -f dangling = true # Listar todos los ids de los dangling volumes | Borrarlos docker volume ls -f dangling = true -q | xargs docker volume rm","title":"Dangling Volumes"},{"location":"devops/git/git/","text":"Git \u00b6 TODO","title":"Comandos"},{"location":"devops/git/git/#git","text":"TODO","title":"Git"},{"location":"devops/git/gitflow/gitflow/","text":"Git Flow \u00b6 Info oficial -> Git Flow Repositorio oficial -> Git Flow en Github Git Flow es una forma ordenada de trabajar con GIT en proyectos SW. Consiste en tener todo separado por ramas y seguir una pol\u00edtica de rabajo y commits muy espec\u00edficas con ellas. As\u00ed que tendremos: master : Rama principal que tendr\u00e1 c\u00f3digo final (testado y validado) preparado para ser subido a producci\u00f3n o en producci\u00f3n. No se trabaja sobre ella, es decir, todo el c\u00f3digo que le llega es a trav\u00e9s de un merge. Todos los \"commits\" (merges) que hay sobre ella, tienen un tag definido, que indica la versi\u00f3n del programa. develop : Es la rama de desarrollo principal. Para implementar git-flow al menos deben de estar master y develop . Tiene c\u00f3digo de futuras versiones ( master solo c\u00f3digo estable para producci\u00f3n). De ella derivan las dem\u00e1s ramas de desarrollo. feature-<caracter\u00edstica> : Estas son ramas que parten de develop . Son para desarrollar una \u00fanica caracter\u00edstica por rama. Cuando se acaba, se mergea con develop y se finaliza la rama. release/<version> : Parten de develop . Tienen c\u00f3digo estable preparado para ser subido a master a falta de un buen testeo. Una vez su c\u00f3digo est\u00e1 listo, se mergea tanto con develop como con master y se finaliza la rama. hofix/<version> : Parten de master . Si en producci\u00f3n se encuentra un error, se genera esta rama, con la versi\u00f3n del c\u00f3digo en producci\u00f3n como nombre, se arregla. Por \u00faltimo se mergea con develop como con master (poni\u00e9ndole un tag que aumente la versi\u00f3n) y se finaliza la rama. support/<version> : Esto no lo cubre en realidad Git Flow. Las ramas support son para si se mantienen distintas versiones al mismo tiempo. Ser\u00eda equivalente a una rama master pero solo para una versi\u00f3n major de tu programa. Pueden existir incluso m\u00e1s ramas, como las pull-request/<version> . Ejemplo de Git Flow en vertical Ejemplo de Git Flow en horizontal Otra imagen en horizontal de Git Flow Instalaci\u00f3n \u00b6 Instrucciones para la instalaci\u00f3n -> aqu\u00ed # Linux sudo apt install git-flow # Mac OS brew install git-flow # Windows ... Plugins \u00b6 Plugin oficial \u00b6 Existe un plugin oficial para tener autocompletado en bash o zsh -> git-flow-completion Plugin ZSH \u00b6 ZSH trae ya el suyo propio -> git-flow plugin Estos son sus alias Alias Command Description gfl git flow Git-Flow command gfli git flow init Initialize git-flow repository gcd git checkout develop Check out develop branch gch git checkout hotfix Check out hotfix branch gcr git checkout release Check out release branch gflf git flow feature List existing feature branches gflh git flow hotfix List existing hotfix branches gflr git flow release List existing release branches gflfs git flow feature start Start a new feature: gflfs <name> gflhs git flow hotfix start Start a new hotfix: gflhs <version> gflrs git flow release start Start a new release: gflrs <version> gflff git flow feature finish Finish feature: gflff <name> gflfp git flow feature publish Publish feature: gflfp <name> gflhf git flow hotfix finish Finish hotfix: gflhf <version> gflrf git flow release finish Finish release: gflrf <version> Configuraci\u00f3n \u00b6 Configurar un diferente repositorio remoto (origin) \u00b6 git config gitflow.origin <mi-origin> Fetchin por defecto antes de operaciones locales \u00b6 git config gitflow.feature.start.fetch true Se puede sobreescribir el comando a\u00f1adi\u00e9ndole el argumento --nofetch Evitar etiquetas autom\u00e1ticas creadas en los hotfixes \u00b6 git config gitflow.hotfix.finish.notag true Comandos \u00b6 La lista de comandos oficial -> [https://github.com/nvie/gitflow/wiki/Command-Line-Arguments] Cheatsheet \u00b6 # Listar comandos git flow # Inicializar repo git flow init [ -d ] # Ramas feature git flow feature git flow feature start <name> [ <base-commit-from-develop> ] git flow feature finish <name> git flow feature pull <remote> <name> git flow feature publish <name> # Ramas release git flow release git flow release start <release> [ <base-commit-from-develop> ] git flow release finish <release> # Ramas hotfix git flow hotfix git flow hotfix start <release> [ <base-commit-from-master> ] git flow hotfix finish <release> # Ramas support git flow support git flow support start <release> <base-commit-from-master> Comandos a fondo \u00b6 Ver todos los comandos \u00b6 git flow Inicializacion \u00b6 # Inicializar repo con git flow # -d = default -> ramas con nombres por defecto # -f = force git flow init [ -d ] [ -f ] Feature \u00b6 # Ver ramas feature # -v = verbose git flow feature [ list ] [ -v ] # Inicializar una rama feature/<name> # -F = fetch -> de origin antes de la operacion # <base> -> commit de develop del que se parte git flow feature start [ -F ] <name> [ <base> ] # Finalizar una rama feature/<name> # -r = rebase en vez de merge # -F = fetch -> de origin antes de la operacion # -k = keep -> mantener la rama despues de finalizar # -D = delete -> borrado forzado despues de finalizar # -S = squash -> aplastar commits durante el merge git flow feature [ -rFkDS ] finish <name> # Pull de la rama remota (de origin) git flow feature pull <remote> [ <name> ] # Push a la rama remota (de origin) git flow feature publish <name> # Empezar a seguir feature/<name> que es compartida en origin git flow feature track <name> # Cambiar a la rama feature <name> git flow feature checkout [ <name> ] # Ver diferencias respecto a develop git flow feature diff [ <name> ] # Rebase la feature <name> en develop # -i = interactive git flow feature rebase [ -i ] [ <name> ] # Eliminar rama feature/<name> # -f = force -> eliminar rama que no ha sido mergeada git flow feature delete [ -f ] <name> Release \u00b6 # Ver ramas release # -v = verbose git flow release [ list ] [ -v ] # Inicializar una rama release/<version> # -F = fetch -> de origin antes de la operacion git flow release start [ -F ] <version> # Finalizar una rama release/<version> # -F = fetch -> de origin antes de la operacion # -s = sign -> firmar release tag criptogr\u00e1ficamente # -u = GPG-key -> usar la clave GPG-key para firmar digitalmente (se usa con -s) # -m = message -> mensaje del tag # -p = push -> push a origin despues de la operaci\u00f3n # -k = keep -> mantener la rama despues de finalizar # -n = no-tag -> no etiquetar esta release # -S = squash -> aplastar commits durante el merge git flow release finish [ -FsumpknS ] <version> # Push a la rama remota (de origin) git flow release publish <name> # Empezar a seguir release/<name> que es compartida en origin git flow release track <name> # Eliminar rama release/<name> # -f = force -> eliminar rama que no ha sido mergeada git flow release delete [ -f ] <name> Hotfix \u00b6 # ver ramas hotfix # -v = verbose git flow hotfix [ list ] [ -v ] # Inicializar una rama hotfix/<version> # -F = fetch -> de origin antes de la operacion git flow hotfix start [ -F ] <version> [ <base> ] # Finalizar una rama hotfix/<version> # -F = fetch -> de origin antes de la operacion # -s = sign -> firmar release tag criptogr\u00e1ficamente # -u = GPG-key -> usar la clave GPG-key para firmar digitalmente (se usa con -s) # -m = message -> mensaje del tag # -p = push -> push a origin despues de la operaci\u00f3n # -k = keep -> mantener la rama despues de finalizar # -n = no-tag -> no etiquetar esta release # -S = squash -> aplastar commits durante el merge git flow hotfix finish [ -FsumpknS ] <version> # Eliminar rama hotfix/<name> # -f = force -> eliminar rama que no ha sido mergeada git flow hotfix delete [ -f ] <name> Support \u00b6 # Ver ramas support # -v = verbose git flow support [ list ] [ -v ] # Inicializar una rama support/<version> # -F = fetch -> de origin antes de la operacion # <base> -> commit de master del que se parte git flow support start [ -F ] <version> <base>","title":"Git Flow"},{"location":"devops/git/gitflow/gitflow/#git-flow","text":"Info oficial -> Git Flow Repositorio oficial -> Git Flow en Github Git Flow es una forma ordenada de trabajar con GIT en proyectos SW. Consiste en tener todo separado por ramas y seguir una pol\u00edtica de rabajo y commits muy espec\u00edficas con ellas. As\u00ed que tendremos: master : Rama principal que tendr\u00e1 c\u00f3digo final (testado y validado) preparado para ser subido a producci\u00f3n o en producci\u00f3n. No se trabaja sobre ella, es decir, todo el c\u00f3digo que le llega es a trav\u00e9s de un merge. Todos los \"commits\" (merges) que hay sobre ella, tienen un tag definido, que indica la versi\u00f3n del programa. develop : Es la rama de desarrollo principal. Para implementar git-flow al menos deben de estar master y develop . Tiene c\u00f3digo de futuras versiones ( master solo c\u00f3digo estable para producci\u00f3n). De ella derivan las dem\u00e1s ramas de desarrollo. feature-<caracter\u00edstica> : Estas son ramas que parten de develop . Son para desarrollar una \u00fanica caracter\u00edstica por rama. Cuando se acaba, se mergea con develop y se finaliza la rama. release/<version> : Parten de develop . Tienen c\u00f3digo estable preparado para ser subido a master a falta de un buen testeo. Una vez su c\u00f3digo est\u00e1 listo, se mergea tanto con develop como con master y se finaliza la rama. hofix/<version> : Parten de master . Si en producci\u00f3n se encuentra un error, se genera esta rama, con la versi\u00f3n del c\u00f3digo en producci\u00f3n como nombre, se arregla. Por \u00faltimo se mergea con develop como con master (poni\u00e9ndole un tag que aumente la versi\u00f3n) y se finaliza la rama. support/<version> : Esto no lo cubre en realidad Git Flow. Las ramas support son para si se mantienen distintas versiones al mismo tiempo. Ser\u00eda equivalente a una rama master pero solo para una versi\u00f3n major de tu programa. Pueden existir incluso m\u00e1s ramas, como las pull-request/<version> . Ejemplo de Git Flow en vertical Ejemplo de Git Flow en horizontal Otra imagen en horizontal de Git Flow","title":"Git Flow"},{"location":"devops/git/gitflow/gitflow/#instalacion","text":"Instrucciones para la instalaci\u00f3n -> aqu\u00ed # Linux sudo apt install git-flow # Mac OS brew install git-flow # Windows ...","title":"Instalaci\u00f3n"},{"location":"devops/git/gitflow/gitflow/#plugins","text":"","title":"Plugins"},{"location":"devops/git/gitflow/gitflow/#plugin-oficial","text":"Existe un plugin oficial para tener autocompletado en bash o zsh -> git-flow-completion","title":"Plugin oficial"},{"location":"devops/git/gitflow/gitflow/#plugin-zsh","text":"ZSH trae ya el suyo propio -> git-flow plugin Estos son sus alias Alias Command Description gfl git flow Git-Flow command gfli git flow init Initialize git-flow repository gcd git checkout develop Check out develop branch gch git checkout hotfix Check out hotfix branch gcr git checkout release Check out release branch gflf git flow feature List existing feature branches gflh git flow hotfix List existing hotfix branches gflr git flow release List existing release branches gflfs git flow feature start Start a new feature: gflfs <name> gflhs git flow hotfix start Start a new hotfix: gflhs <version> gflrs git flow release start Start a new release: gflrs <version> gflff git flow feature finish Finish feature: gflff <name> gflfp git flow feature publish Publish feature: gflfp <name> gflhf git flow hotfix finish Finish hotfix: gflhf <version> gflrf git flow release finish Finish release: gflrf <version>","title":"Plugin ZSH"},{"location":"devops/git/gitflow/gitflow/#configuracion","text":"","title":"Configuraci\u00f3n"},{"location":"devops/git/gitflow/gitflow/#configurar-un-diferente-repositorio-remoto-origin","text":"git config gitflow.origin <mi-origin>","title":"Configurar un diferente repositorio remoto (origin)"},{"location":"devops/git/gitflow/gitflow/#fetchin-por-defecto-antes-de-operaciones-locales","text":"git config gitflow.feature.start.fetch true Se puede sobreescribir el comando a\u00f1adi\u00e9ndole el argumento --nofetch","title":"Fetchin por defecto antes de operaciones locales"},{"location":"devops/git/gitflow/gitflow/#evitar-etiquetas-automaticas-creadas-en-los-hotfixes","text":"git config gitflow.hotfix.finish.notag true","title":"Evitar etiquetas autom\u00e1ticas creadas en los hotfixes"},{"location":"devops/git/gitflow/gitflow/#comandos","text":"La lista de comandos oficial -> [https://github.com/nvie/gitflow/wiki/Command-Line-Arguments]","title":"Comandos"},{"location":"devops/git/gitflow/gitflow/#cheatsheet","text":"# Listar comandos git flow # Inicializar repo git flow init [ -d ] # Ramas feature git flow feature git flow feature start <name> [ <base-commit-from-develop> ] git flow feature finish <name> git flow feature pull <remote> <name> git flow feature publish <name> # Ramas release git flow release git flow release start <release> [ <base-commit-from-develop> ] git flow release finish <release> # Ramas hotfix git flow hotfix git flow hotfix start <release> [ <base-commit-from-master> ] git flow hotfix finish <release> # Ramas support git flow support git flow support start <release> <base-commit-from-master>","title":"Cheatsheet"},{"location":"devops/git/gitflow/gitflow/#comandos-a-fondo","text":"","title":"Comandos a fondo"},{"location":"devops/git/gitflow/gitflow/#ver-todos-los-comandos","text":"git flow","title":"Ver todos los comandos"},{"location":"devops/git/gitflow/gitflow/#inicializacion","text":"# Inicializar repo con git flow # -d = default -> ramas con nombres por defecto # -f = force git flow init [ -d ] [ -f ]","title":"Inicializacion"},{"location":"devops/git/gitflow/gitflow/#feature","text":"# Ver ramas feature # -v = verbose git flow feature [ list ] [ -v ] # Inicializar una rama feature/<name> # -F = fetch -> de origin antes de la operacion # <base> -> commit de develop del que se parte git flow feature start [ -F ] <name> [ <base> ] # Finalizar una rama feature/<name> # -r = rebase en vez de merge # -F = fetch -> de origin antes de la operacion # -k = keep -> mantener la rama despues de finalizar # -D = delete -> borrado forzado despues de finalizar # -S = squash -> aplastar commits durante el merge git flow feature [ -rFkDS ] finish <name> # Pull de la rama remota (de origin) git flow feature pull <remote> [ <name> ] # Push a la rama remota (de origin) git flow feature publish <name> # Empezar a seguir feature/<name> que es compartida en origin git flow feature track <name> # Cambiar a la rama feature <name> git flow feature checkout [ <name> ] # Ver diferencias respecto a develop git flow feature diff [ <name> ] # Rebase la feature <name> en develop # -i = interactive git flow feature rebase [ -i ] [ <name> ] # Eliminar rama feature/<name> # -f = force -> eliminar rama que no ha sido mergeada git flow feature delete [ -f ] <name>","title":"Feature"},{"location":"devops/git/gitflow/gitflow/#release","text":"# Ver ramas release # -v = verbose git flow release [ list ] [ -v ] # Inicializar una rama release/<version> # -F = fetch -> de origin antes de la operacion git flow release start [ -F ] <version> # Finalizar una rama release/<version> # -F = fetch -> de origin antes de la operacion # -s = sign -> firmar release tag criptogr\u00e1ficamente # -u = GPG-key -> usar la clave GPG-key para firmar digitalmente (se usa con -s) # -m = message -> mensaje del tag # -p = push -> push a origin despues de la operaci\u00f3n # -k = keep -> mantener la rama despues de finalizar # -n = no-tag -> no etiquetar esta release # -S = squash -> aplastar commits durante el merge git flow release finish [ -FsumpknS ] <version> # Push a la rama remota (de origin) git flow release publish <name> # Empezar a seguir release/<name> que es compartida en origin git flow release track <name> # Eliminar rama release/<name> # -f = force -> eliminar rama que no ha sido mergeada git flow release delete [ -f ] <name>","title":"Release"},{"location":"devops/git/gitflow/gitflow/#hotfix","text":"# ver ramas hotfix # -v = verbose git flow hotfix [ list ] [ -v ] # Inicializar una rama hotfix/<version> # -F = fetch -> de origin antes de la operacion git flow hotfix start [ -F ] <version> [ <base> ] # Finalizar una rama hotfix/<version> # -F = fetch -> de origin antes de la operacion # -s = sign -> firmar release tag criptogr\u00e1ficamente # -u = GPG-key -> usar la clave GPG-key para firmar digitalmente (se usa con -s) # -m = message -> mensaje del tag # -p = push -> push a origin despues de la operaci\u00f3n # -k = keep -> mantener la rama despues de finalizar # -n = no-tag -> no etiquetar esta release # -S = squash -> aplastar commits durante el merge git flow hotfix finish [ -FsumpknS ] <version> # Eliminar rama hotfix/<name> # -f = force -> eliminar rama que no ha sido mergeada git flow hotfix delete [ -f ] <name>","title":"Hotfix"},{"location":"devops/git/gitflow/gitflow/#support","text":"# Ver ramas support # -v = verbose git flow support [ list ] [ -v ] # Inicializar una rama support/<version> # -F = fetch -> de origin antes de la operacion # <base> -> commit de master del que se parte git flow support start [ -F ] <version> <base>","title":"Support"},{"location":"hw/serie/","text":"Protocolos de Comunicaci\u00f3n Serie \u00b6 Recursos usados Este video explica maravillosamente lo que aqu\u00ed se expone En esta p\u00e1gina hay una tabla maravillosa En esta p\u00e1gina explican los protocolos en profundidad. Luis Llamas es una fuente de conocimiento enorme para cualquier maker Arduino Puerto Serie Arduino SPI Arduino I2C Distancias del cable para Serial RS232 Velocidad distancia No decir nunca m\u00e1s \"Maestro-Esclavo\" Aunque antiguamente se ha usado el t\u00e9rmino Maestro y Esclavo , esto tiene connotaciones muy negativas. A partir de ahora se recomienda usar Controlador y Perif\u00e9rico . Las palabras son herramientas, y las herramientas modelan nuestra forma de ver las cosas. No uses herramientas ofensivas. Si en alg\u00fan momento ves estas palabras, se han dejado por legibilidad, para que entiendas el legacy que ya existe, o por error. Pero no porque se est\u00e9 a a favor de esta terminolog\u00f3a. UART SPI I2C Nombre Universal Asynchronous Receiver/Transmitter Serial Peripheral Interface Inter-Integrated Circuit Diagrama Pines - TX: Transmisi\u00f3n de datos. - RX: Recepci\u00f3n de datos. - SCLK: Reloj Serial - MOSI: Salida de maestro, entrada de esclavo. - MISO: Entrada del maestro y salida del esclavo. - SS: Selector de esclavo. - SDA: Datos - SCL: Reloj Serial Sincron\u00eda Asincrona Sincrona Sincrona Tranmisi\u00f3n Duplex Duplex Half-duplex Topolog\u00eda Uno-a-Uno Bus Bus Numero de Masters No hay Uno Varios Velocidad m\u00e1xima 230Kbbs ~ 460kbb 10Mbbs ~ 20Mbbs Hasta 3.4Mbbs Algunas variantes hasta 1Mbbs Distancia Menos de 15 metros Comunicaciones dentro de la PCB Menos de 30cm Comunicaciones dentro de la PCB Menos de 1 metro Consumo energ\u00e9tico Medio Bajo Medio Complejidad HW Poco Media Bastante (seg\u00fan los maestros) Direccionamiento SW No Se\u00f1al SS (SS1, SS2\u2026) para seleccionar que dispositivo, cuantos m\u00e1s dispositivos m\u00e1s salidas SS necesitamos. Todos los maestros pueden comunicarse con todos los esclavos, podemos colocar 27 esclavos y colocar la direcci\u00f3n en el protocolo I2C. Ventajas Muy simple Permite conectar de forma r\u00e1pida dos dispositivos Suele usarse con RS232 o RS485 por ejemplo. Simple. Dispone de comunicaci\u00f3n full duplex SPI usa push-pull y gran velocidad de datos. Requiere menos energ\u00eda que I2C M\u00e1s de un maestro. Solo necesita dos cables para la comunicaci\u00f3n. Es m\u00e1s sencillo que SPI, al necesitar menos l\u00edneas. Concepto de colector abierto Tiene control de flujo. Desventajas Esta limitado a la comunicaci\u00f3n entre dos dispositivos. La velocidad se debe acordar al principio de la conexi\u00f3n en caso de no ser la misma dar\u00e1 lecturas err\u00f3neas. Cuanto m\u00e1s esclavos, m\u00e1s conexiones se necesitan. A\u00f1adir un dispositivo requiere una conexi\u00f3n adicional. No hay control de flujo. Se incrementa la complejidad del circuito cuando aumentan los masteres y los esclavos. I2C es half duplex El software puede sobrecargar el procesador. Inicio Motorola en 1980 Philips en 1982 UART (Universal Asynchronous Receiver/Transmitter) / Serial \u00b6 El Transmisor / Receptor Universal As\u00edncrono es la comunicaci\u00f3n serie AS\u00cdNCRONA m\u00e1s sencilla que existe. Es comunicaci\u00f3n 1 a 1. Solo necesita dos conexiones: GND - Referencia a tierra TX / RX - Por donde se mandan / reciben datos. En realidad es una comunicaci\u00f3n simplex (de un solo sentido). Pero normalmente una UART viene preparada con una se\u00f1al TX y otra RX, as\u00ed que se consigue una comunicaci\u00f3n duplex (1 simplex para escribir y 1 simplex para leer). Como el TX emite datos cuando quiere, no hay reloj, hace falta que TX y RX compartan una configuraci\u00f3n. Esta se compone de: Velocidad de la transmisi\u00f3n en baudios. Longitud de las tramas en bits. Bits de Start y Stop. La nomenclatura t\u00edpica para definir esta configuraci\u00f3n es <velocidad>/<longitud><paridad><bits stop> . A veces la velocidad se indica por separado, y la nomenclatura solo se pone como <longitud><paridad><bits stop> . La m\u00e1s t\u00edpica es 9600/8N1 o 8N1 a 9600 : 9600 baudios 8 bits de datos / trama N no hay paridad (no se mide si los bits a 1 son pares o impares) 1 bit de stop \u00bfComo funciona? Supongamos una comunicaci\u00f3n 8N1 a 9600 baudios (104 microseg por bit): El TX y RX tienen la misma configuraci\u00f3n. El TX est\u00e1 en reposo mandando 1 todo el rato. Cuando TX empieza a transmitir, manda el bit de Start, que es un 0. Despu\u00e9s de manda los 8 bits de datos. El RX lee cada bit a partir de la mitad para evitar estados transitorios. Despu\u00e9s del bit de start, espera 52 microseg para leer el primer bit. Despu\u00e9s lee cada bit a 104 microseg. El TX despu\u00e9s de mandar los 8 bits de datos, manda el bit de Stop, que ser\u00e1 a 0, y luego ya pone la l\u00ednea a 1 todo el rato. El RX despu\u00e9s de leer el bit de Stop, empieza a leer 1 todo el rato y se queda a la espera de que vuelva a recibir un bit de Start. Ejemplo trama en 8N1 Velocidad de Transmisi\u00f3n Configuraciones m\u00e1s usadas Longitud de las tramas Bits de Start / Stop Se mide en baudios, e indica la cantidad de bits que se mandan por segundo. Ej: Una velocidad de 9600 baud/seg equivale a que cada bit se manda a 1/9600 = 0,000104167 seg = 104,167 microseg. A mayor velocidad, menor distancia efectiva se tiene: Velocidad (baudios) Tiempo por bit (microseg) Distancia t\u00edpica (m) Distancia m\u00e1xima (m) Distancia maxima en RS232 (m) 115200 8,681 2~3 5 15,24 57600 17,361 38400 26,042 31250 32,000 28800 34,722 19200 52,083 14400 69,444 9600 104,166 10 <20 152,4 4800 208,333 304,8 2400 426,666 914,4 1200 833,333 600 1666,666 300 3333,333 Configuraci\u00f3n Longitud Paridad Bits de Stop 5N1 5 No 1 6N1 6 No 1 7N1 7 No 1 8N1 8 No 1 5N2 5 No 2 6N2 6 No 2 7N2 7 No 2 8N2 8 No 2 5E1 5 Even 1 6E1 6 Even 1 7E1 7 Even 1 8E1 8 Even 1 5E2 5 Even 2 6E2 6 Even 2 7E2 7 Even 2 8E2 8 Even 2 5O1 5 Odd 1 6O1 6 Odd 1 7O1 7 Odd 1 8O1 8 Odd 1 5O2 5 Odd 2 6O2 6 Odd 2 7O2 7 Odd 2 8O2 8 Odd 2 La longitud de las tramas indica la cantidad de bits que son informaci\u00f3n. No se tienen en cuenta los bits de Start y Stop. Longitudes t\u00edpicas son: 8, 7, 6 y 5 bits. La l\u00ednea es activa a nivel bajo, es decir, el TX siempre est\u00e1 a 1 cuando no manda informaci\u00f3n porque as\u00ed es m\u00e1s inmune al ruido, aunque consuma m\u00e1s. Para el Start se utiliza 1 solo bit. Luego la comunicaci\u00f3n empieza cuando se recibe un 0, y a partir de ah\u00ed se cuentan X bits. El \u00faltimo o \u00faltimos bits de la trama son el de Stop. Sirven como control de errores, indicando la paridad o no. Si se indica la paridad, esto quiere decir la cantidad de bits de datos que est\u00e1n a 1 son pares (Even) o impares (Odd). Esto sirve a modo de control de error, pero no indica donde est\u00e1 el error. Y como se env\u00eda con cada trama, es demasiado redundante. Es preferible implementar un sistema de CRC a enviar los bits de paridad. SPI (Serial Peripherial Interface) \u00b6 La Interfaz Serie Perif\u00e9rica, es un protocolo de comunicaci\u00f3n serie S\u00cdNCRONO. Es para comunicar una unidad con varios perif\u00e9ricos dentro de una placa. Esta unidad ser\u00eda el Controlador, y las dem\u00e1s los Perif\u00e9ricos. Es decir, comunicaci\u00f3n 1 a N. Necesita de las siguentes conexiones: GND - Referencia a tierra SCLK (Serial Clock) - Se\u00f1al de reloj mandada por el Controlador MOSI (Master Output Slave Input) / COPI (Controller Output Peripheral Input) - El TX del Controlador y RX del Perif\u00e9rico MISO (Master Input Slave Output) / CIPO (Controller Input Peripheral Output) - El RX del Controlador y TX del Perif\u00e9rico SSx (Slave Select) / CSx (Chip Select) - Se\u00f1al que habilita la comunicaci\u00f3n con el Perif\u00e9rico Conexi\u00f3n SPI con solo un Perif\u00e9rico En realidad es una comunicaci\u00f3n simplex (de un solo sentido). Pero normalmente tanto el Controlador como los Perif\u00e9ricos para emitir y otra para recibir, as\u00ed que se consigue una comunicaci\u00f3n duplex (1 simplex para escribir y 1 simplex para leer). Antes de cada comunicaci\u00f3n, el Controlador-Perif\u00e9rico saben cuantos datos / bytes / bits se van a mandar / recibir. \u00bfComo funciona? El Controlador decide iniciar la comunicaci\u00f3n con un Perif\u00e9rico poniendo su se\u00f1al CS a 0 y haciendo que funcione la se\u00f1al SCLK. El Controlador manda datos por su COPI y el Perif\u00e9rico los lee por su COPI. El Controlador recibe datos por su CISO y el Perif\u00e9rico los manda por su CIPO. El Controlador vuelve a poner la se\u00f1al CS a 1. Muestra de comunicaci\u00f3n SPI I2C (Inter-Integrated Circuit) \u00b6 El Circuito Inter-Integrado es un protocolo de comunicaci\u00f3n serie S\u00cdNCRONO. Es para comunicar una unidad con varios perif\u00e9ricos dentro de una placa. Esta unidad ser\u00eda el Controlador, y las dem\u00e1s los Perif\u00e9ricos. Es decir, comunicaci\u00f3n 1 a N. Necesita de las siguentes conexiones: GND - Referencia a tierra SCLK (Serial Clock) - Se\u00f1al de reloj mandada por el Controlador SDA (Serial Data) - Por donde transitan los datos del Controlador y los Perif\u00e9ricos Ejemplo conexi\u00f3n I2C en bus Es una comunicaci\u00f3n half-duplex. Solo un controlador o perif\u00e9rico puede enviar datos por SDA. Antes de cada comunicaci\u00f3n, el Controlador-Perif\u00e9rico saben cuantos datos / bytes / bits se van a mandar / recibir. \u00bfComo funciona? Como se comparte SDA, cada Perif\u00e9rico tiene una direcci\u00f3n. Un Controlador decide iniciar la comunicaci\u00f3n con un Perif\u00e9rico. Inicia la se\u00f1al de SCLK y manda por SDA: La direcci\u00f3n de memoria del Perif\u00e9rico. Si quiere transmitir o leer datos. Si quiere transmitir, manda los datos. Si quiere recibir, espera que el Perif\u00e9rico le mande la informaci\u00f3n. El \u00fanico Perif\u00e9rico que tenga esa direcci\u00f3n es el que ejecutar\u00e1 la acci\u00f3n, y los dem\u00e1s no har\u00e1n nada. Por \u00faltimo el Controlador vuelve a dejar el bus intacto a nivel alto (gracias a las resistencias de pull-up del bus). Muestra de comunicaci\u00f3n I2C Otros \u00b6 Existen numerosos tipos de comunicaciones serie: USART (como UART pero soportando sincron\u00eda) One Wire (un solo cable) Modbus CAN bus I2S (I2C para sonido) ...","title":"Protocolos Serie"},{"location":"hw/serie/#protocolos-de-comunicacion-serie","text":"Recursos usados Este video explica maravillosamente lo que aqu\u00ed se expone En esta p\u00e1gina hay una tabla maravillosa En esta p\u00e1gina explican los protocolos en profundidad. Luis Llamas es una fuente de conocimiento enorme para cualquier maker Arduino Puerto Serie Arduino SPI Arduino I2C Distancias del cable para Serial RS232 Velocidad distancia No decir nunca m\u00e1s \"Maestro-Esclavo\" Aunque antiguamente se ha usado el t\u00e9rmino Maestro y Esclavo , esto tiene connotaciones muy negativas. A partir de ahora se recomienda usar Controlador y Perif\u00e9rico . Las palabras son herramientas, y las herramientas modelan nuestra forma de ver las cosas. No uses herramientas ofensivas. Si en alg\u00fan momento ves estas palabras, se han dejado por legibilidad, para que entiendas el legacy que ya existe, o por error. Pero no porque se est\u00e9 a a favor de esta terminolog\u00f3a. UART SPI I2C Nombre Universal Asynchronous Receiver/Transmitter Serial Peripheral Interface Inter-Integrated Circuit Diagrama Pines - TX: Transmisi\u00f3n de datos. - RX: Recepci\u00f3n de datos. - SCLK: Reloj Serial - MOSI: Salida de maestro, entrada de esclavo. - MISO: Entrada del maestro y salida del esclavo. - SS: Selector de esclavo. - SDA: Datos - SCL: Reloj Serial Sincron\u00eda Asincrona Sincrona Sincrona Tranmisi\u00f3n Duplex Duplex Half-duplex Topolog\u00eda Uno-a-Uno Bus Bus Numero de Masters No hay Uno Varios Velocidad m\u00e1xima 230Kbbs ~ 460kbb 10Mbbs ~ 20Mbbs Hasta 3.4Mbbs Algunas variantes hasta 1Mbbs Distancia Menos de 15 metros Comunicaciones dentro de la PCB Menos de 30cm Comunicaciones dentro de la PCB Menos de 1 metro Consumo energ\u00e9tico Medio Bajo Medio Complejidad HW Poco Media Bastante (seg\u00fan los maestros) Direccionamiento SW No Se\u00f1al SS (SS1, SS2\u2026) para seleccionar que dispositivo, cuantos m\u00e1s dispositivos m\u00e1s salidas SS necesitamos. Todos los maestros pueden comunicarse con todos los esclavos, podemos colocar 27 esclavos y colocar la direcci\u00f3n en el protocolo I2C. Ventajas Muy simple Permite conectar de forma r\u00e1pida dos dispositivos Suele usarse con RS232 o RS485 por ejemplo. Simple. Dispone de comunicaci\u00f3n full duplex SPI usa push-pull y gran velocidad de datos. Requiere menos energ\u00eda que I2C M\u00e1s de un maestro. Solo necesita dos cables para la comunicaci\u00f3n. Es m\u00e1s sencillo que SPI, al necesitar menos l\u00edneas. Concepto de colector abierto Tiene control de flujo. Desventajas Esta limitado a la comunicaci\u00f3n entre dos dispositivos. La velocidad se debe acordar al principio de la conexi\u00f3n en caso de no ser la misma dar\u00e1 lecturas err\u00f3neas. Cuanto m\u00e1s esclavos, m\u00e1s conexiones se necesitan. A\u00f1adir un dispositivo requiere una conexi\u00f3n adicional. No hay control de flujo. Se incrementa la complejidad del circuito cuando aumentan los masteres y los esclavos. I2C es half duplex El software puede sobrecargar el procesador. Inicio Motorola en 1980 Philips en 1982","title":"Protocolos de Comunicaci\u00f3n Serie"},{"location":"hw/serie/#uart-universal-asynchronous-receivertransmitter-serial","text":"El Transmisor / Receptor Universal As\u00edncrono es la comunicaci\u00f3n serie AS\u00cdNCRONA m\u00e1s sencilla que existe. Es comunicaci\u00f3n 1 a 1. Solo necesita dos conexiones: GND - Referencia a tierra TX / RX - Por donde se mandan / reciben datos. En realidad es una comunicaci\u00f3n simplex (de un solo sentido). Pero normalmente una UART viene preparada con una se\u00f1al TX y otra RX, as\u00ed que se consigue una comunicaci\u00f3n duplex (1 simplex para escribir y 1 simplex para leer). Como el TX emite datos cuando quiere, no hay reloj, hace falta que TX y RX compartan una configuraci\u00f3n. Esta se compone de: Velocidad de la transmisi\u00f3n en baudios. Longitud de las tramas en bits. Bits de Start y Stop. La nomenclatura t\u00edpica para definir esta configuraci\u00f3n es <velocidad>/<longitud><paridad><bits stop> . A veces la velocidad se indica por separado, y la nomenclatura solo se pone como <longitud><paridad><bits stop> . La m\u00e1s t\u00edpica es 9600/8N1 o 8N1 a 9600 : 9600 baudios 8 bits de datos / trama N no hay paridad (no se mide si los bits a 1 son pares o impares) 1 bit de stop \u00bfComo funciona? Supongamos una comunicaci\u00f3n 8N1 a 9600 baudios (104 microseg por bit): El TX y RX tienen la misma configuraci\u00f3n. El TX est\u00e1 en reposo mandando 1 todo el rato. Cuando TX empieza a transmitir, manda el bit de Start, que es un 0. Despu\u00e9s de manda los 8 bits de datos. El RX lee cada bit a partir de la mitad para evitar estados transitorios. Despu\u00e9s del bit de start, espera 52 microseg para leer el primer bit. Despu\u00e9s lee cada bit a 104 microseg. El TX despu\u00e9s de mandar los 8 bits de datos, manda el bit de Stop, que ser\u00e1 a 0, y luego ya pone la l\u00ednea a 1 todo el rato. El RX despu\u00e9s de leer el bit de Stop, empieza a leer 1 todo el rato y se queda a la espera de que vuelva a recibir un bit de Start. Ejemplo trama en 8N1 Velocidad de Transmisi\u00f3n Configuraciones m\u00e1s usadas Longitud de las tramas Bits de Start / Stop Se mide en baudios, e indica la cantidad de bits que se mandan por segundo. Ej: Una velocidad de 9600 baud/seg equivale a que cada bit se manda a 1/9600 = 0,000104167 seg = 104,167 microseg. A mayor velocidad, menor distancia efectiva se tiene: Velocidad (baudios) Tiempo por bit (microseg) Distancia t\u00edpica (m) Distancia m\u00e1xima (m) Distancia maxima en RS232 (m) 115200 8,681 2~3 5 15,24 57600 17,361 38400 26,042 31250 32,000 28800 34,722 19200 52,083 14400 69,444 9600 104,166 10 <20 152,4 4800 208,333 304,8 2400 426,666 914,4 1200 833,333 600 1666,666 300 3333,333 Configuraci\u00f3n Longitud Paridad Bits de Stop 5N1 5 No 1 6N1 6 No 1 7N1 7 No 1 8N1 8 No 1 5N2 5 No 2 6N2 6 No 2 7N2 7 No 2 8N2 8 No 2 5E1 5 Even 1 6E1 6 Even 1 7E1 7 Even 1 8E1 8 Even 1 5E2 5 Even 2 6E2 6 Even 2 7E2 7 Even 2 8E2 8 Even 2 5O1 5 Odd 1 6O1 6 Odd 1 7O1 7 Odd 1 8O1 8 Odd 1 5O2 5 Odd 2 6O2 6 Odd 2 7O2 7 Odd 2 8O2 8 Odd 2 La longitud de las tramas indica la cantidad de bits que son informaci\u00f3n. No se tienen en cuenta los bits de Start y Stop. Longitudes t\u00edpicas son: 8, 7, 6 y 5 bits. La l\u00ednea es activa a nivel bajo, es decir, el TX siempre est\u00e1 a 1 cuando no manda informaci\u00f3n porque as\u00ed es m\u00e1s inmune al ruido, aunque consuma m\u00e1s. Para el Start se utiliza 1 solo bit. Luego la comunicaci\u00f3n empieza cuando se recibe un 0, y a partir de ah\u00ed se cuentan X bits. El \u00faltimo o \u00faltimos bits de la trama son el de Stop. Sirven como control de errores, indicando la paridad o no. Si se indica la paridad, esto quiere decir la cantidad de bits de datos que est\u00e1n a 1 son pares (Even) o impares (Odd). Esto sirve a modo de control de error, pero no indica donde est\u00e1 el error. Y como se env\u00eda con cada trama, es demasiado redundante. Es preferible implementar un sistema de CRC a enviar los bits de paridad.","title":"UART (Universal Asynchronous Receiver/Transmitter) / Serial"},{"location":"hw/serie/#spi-serial-peripherial-interface","text":"La Interfaz Serie Perif\u00e9rica, es un protocolo de comunicaci\u00f3n serie S\u00cdNCRONO. Es para comunicar una unidad con varios perif\u00e9ricos dentro de una placa. Esta unidad ser\u00eda el Controlador, y las dem\u00e1s los Perif\u00e9ricos. Es decir, comunicaci\u00f3n 1 a N. Necesita de las siguentes conexiones: GND - Referencia a tierra SCLK (Serial Clock) - Se\u00f1al de reloj mandada por el Controlador MOSI (Master Output Slave Input) / COPI (Controller Output Peripheral Input) - El TX del Controlador y RX del Perif\u00e9rico MISO (Master Input Slave Output) / CIPO (Controller Input Peripheral Output) - El RX del Controlador y TX del Perif\u00e9rico SSx (Slave Select) / CSx (Chip Select) - Se\u00f1al que habilita la comunicaci\u00f3n con el Perif\u00e9rico Conexi\u00f3n SPI con solo un Perif\u00e9rico En realidad es una comunicaci\u00f3n simplex (de un solo sentido). Pero normalmente tanto el Controlador como los Perif\u00e9ricos para emitir y otra para recibir, as\u00ed que se consigue una comunicaci\u00f3n duplex (1 simplex para escribir y 1 simplex para leer). Antes de cada comunicaci\u00f3n, el Controlador-Perif\u00e9rico saben cuantos datos / bytes / bits se van a mandar / recibir. \u00bfComo funciona? El Controlador decide iniciar la comunicaci\u00f3n con un Perif\u00e9rico poniendo su se\u00f1al CS a 0 y haciendo que funcione la se\u00f1al SCLK. El Controlador manda datos por su COPI y el Perif\u00e9rico los lee por su COPI. El Controlador recibe datos por su CISO y el Perif\u00e9rico los manda por su CIPO. El Controlador vuelve a poner la se\u00f1al CS a 1. Muestra de comunicaci\u00f3n SPI","title":"SPI (Serial Peripherial Interface)"},{"location":"hw/serie/#i2c-inter-integrated-circuit","text":"El Circuito Inter-Integrado es un protocolo de comunicaci\u00f3n serie S\u00cdNCRONO. Es para comunicar una unidad con varios perif\u00e9ricos dentro de una placa. Esta unidad ser\u00eda el Controlador, y las dem\u00e1s los Perif\u00e9ricos. Es decir, comunicaci\u00f3n 1 a N. Necesita de las siguentes conexiones: GND - Referencia a tierra SCLK (Serial Clock) - Se\u00f1al de reloj mandada por el Controlador SDA (Serial Data) - Por donde transitan los datos del Controlador y los Perif\u00e9ricos Ejemplo conexi\u00f3n I2C en bus Es una comunicaci\u00f3n half-duplex. Solo un controlador o perif\u00e9rico puede enviar datos por SDA. Antes de cada comunicaci\u00f3n, el Controlador-Perif\u00e9rico saben cuantos datos / bytes / bits se van a mandar / recibir. \u00bfComo funciona? Como se comparte SDA, cada Perif\u00e9rico tiene una direcci\u00f3n. Un Controlador decide iniciar la comunicaci\u00f3n con un Perif\u00e9rico. Inicia la se\u00f1al de SCLK y manda por SDA: La direcci\u00f3n de memoria del Perif\u00e9rico. Si quiere transmitir o leer datos. Si quiere transmitir, manda los datos. Si quiere recibir, espera que el Perif\u00e9rico le mande la informaci\u00f3n. El \u00fanico Perif\u00e9rico que tenga esa direcci\u00f3n es el que ejecutar\u00e1 la acci\u00f3n, y los dem\u00e1s no har\u00e1n nada. Por \u00faltimo el Controlador vuelve a dejar el bus intacto a nivel alto (gracias a las resistencias de pull-up del bus). Muestra de comunicaci\u00f3n I2C","title":"I2C (Inter-Integrated Circuit)"},{"location":"hw/serie/#otros","text":"Existen numerosos tipos de comunicaciones serie: USART (como UART pero soportando sincron\u00eda) One Wire (un solo cable) Modbus CAN bus I2S (I2C para sonido) ...","title":"Otros"},{"location":"hw/arduino/arduino/","text":"Arduino \u00b6 Todo lo que voy a poner aqu\u00ed es pura opini\u00f3n personal. tldr - Mi recomendaci\u00f3n Placas ESP32 o incluso la Raspi Pico W. ESPHome con el framework Arduino para progamar esas placas. Si necesitas cosillas puntuales a m\u00e1s bajo nivel, usa Platformio con Arduino framework. El Arduino IDE solo es interesante tenerlo instalado por el Monitor Serial, nada m\u00e1s. Documentaci\u00f3n Arduino tiene toda la docu en su Reference pero tambi\u00e9n tienen una secci\u00f3n con ejemplillos en el Learn . A mi me ha gustado mucho esta p\u00e1gina . Lo que realmente merece la pena de Arduino es la parte del Software, es decir, el framework (creado por Hernando Barrag\u00e1n) y sus librer\u00edas (la comunidad). No recomendar\u00eda el IDE de Arduino, para eso recomiendo Platformio en VSCode. No recomendar\u00eda sus placas, no por malas, sino porque merece mucho m\u00e1s la pena los ESP32. El problema con Arduino, es que como todos, tiene sus luces y sus sombras: No hay que olvidar la historia de Hernando Barrag\u00e1n B\u00e1sicamente Arduino se apropiaron de manera muy fea de Wiring, que es lo que era Arduino. Lo que realmente vale son esas librerias, y no tanto el Hardware. Pese a esto, hay que decir que la gente de Arduino llev\u00f3 este proyecto a buen puerto y a lo mejor Hernando no lo habr\u00eda conseguido. Sea como sea, sin Arduino no estar\u00edamos muchos hoy en d\u00eda, y gracias a ellos, y a la comunidad, tenemos un campo de conocimiento maravilloso. Pero ignoraron muchos aspectos en el pasado, y se han quedado anquilosados pese a las innovaciones que sacan: Se centraron solo en la parte educativa e ignoraron la parte industrial. El ejemplo de buen hacer es Raspberry Pi, que la parte industrial que genera mucha pasta, es la que sustenta la educativa. El tooling ha estado descuidado tela de a\u00f1os El IDE no era una opci\u00f3n seria, sin autocompletado. No hab\u00eda un CLI friendly durante muchos a\u00f1os. En su d\u00eda recuerdo que despreciaron MicroPython, y ahora lo est\u00e1n empezando a integrar. B\u00e1sicamente la gente de Espressif les ha pasado de calle. Las placas son m\u00e1s baratas y m\u00e1s potentes. Todas traen de serie WiFi, Bluetooth, etc. Se pueden programar por OTA. No paran de innovar. Que si, que Espressif no ser\u00e1n tan \u00e9ticos como ellos, pero sus comienzos no son tan \u00e9ticos tampoco. \" Quien a hierro mata a hierro muere \" que dicen en mi tierra, o \" De esos barros, estos lodos \". Sea como sea, gracias por todo a Arduino.","title":"Sobre Arduino"},{"location":"hw/arduino/arduino/#arduino","text":"Todo lo que voy a poner aqu\u00ed es pura opini\u00f3n personal. tldr - Mi recomendaci\u00f3n Placas ESP32 o incluso la Raspi Pico W. ESPHome con el framework Arduino para progamar esas placas. Si necesitas cosillas puntuales a m\u00e1s bajo nivel, usa Platformio con Arduino framework. El Arduino IDE solo es interesante tenerlo instalado por el Monitor Serial, nada m\u00e1s. Documentaci\u00f3n Arduino tiene toda la docu en su Reference pero tambi\u00e9n tienen una secci\u00f3n con ejemplillos en el Learn . A mi me ha gustado mucho esta p\u00e1gina . Lo que realmente merece la pena de Arduino es la parte del Software, es decir, el framework (creado por Hernando Barrag\u00e1n) y sus librer\u00edas (la comunidad). No recomendar\u00eda el IDE de Arduino, para eso recomiendo Platformio en VSCode. No recomendar\u00eda sus placas, no por malas, sino porque merece mucho m\u00e1s la pena los ESP32. El problema con Arduino, es que como todos, tiene sus luces y sus sombras: No hay que olvidar la historia de Hernando Barrag\u00e1n B\u00e1sicamente Arduino se apropiaron de manera muy fea de Wiring, que es lo que era Arduino. Lo que realmente vale son esas librerias, y no tanto el Hardware. Pese a esto, hay que decir que la gente de Arduino llev\u00f3 este proyecto a buen puerto y a lo mejor Hernando no lo habr\u00eda conseguido. Sea como sea, sin Arduino no estar\u00edamos muchos hoy en d\u00eda, y gracias a ellos, y a la comunidad, tenemos un campo de conocimiento maravilloso. Pero ignoraron muchos aspectos en el pasado, y se han quedado anquilosados pese a las innovaciones que sacan: Se centraron solo en la parte educativa e ignoraron la parte industrial. El ejemplo de buen hacer es Raspberry Pi, que la parte industrial que genera mucha pasta, es la que sustenta la educativa. El tooling ha estado descuidado tela de a\u00f1os El IDE no era una opci\u00f3n seria, sin autocompletado. No hab\u00eda un CLI friendly durante muchos a\u00f1os. En su d\u00eda recuerdo que despreciaron MicroPython, y ahora lo est\u00e1n empezando a integrar. B\u00e1sicamente la gente de Espressif les ha pasado de calle. Las placas son m\u00e1s baratas y m\u00e1s potentes. Todas traen de serie WiFi, Bluetooth, etc. Se pueden programar por OTA. No paran de innovar. Que si, que Espressif no ser\u00e1n tan \u00e9ticos como ellos, pero sus comienzos no son tan \u00e9ticos tampoco. \" Quien a hierro mata a hierro muere \" que dicen en mi tierra, o \" De esos barros, estos lodos \". Sea como sea, gracias por todo a Arduino.","title":"Arduino"},{"location":"hw/arduino/bluetooth/","text":"Bluetooth \u00b6 Configuraci\u00f3n a trav\u00e9s de comandos AT \u00b6 OJO Al mandar comandos AT en el HC-05 todos tienen que acabar con \\r\\n Por ejemplo, en un HC-06 o un HM-10 se env\u00eda AT En el HC-05 hay que mandar AT\\r\\n HC-06 HC-05 HM-10 Valores por defecto: Nombre: HC-06 PIN: 1234 UART: 9600,8N1 Comando AT Respuesta Verificar comunicaci\u00f3n AT OK Obtener versi\u00f3n firmware AT+VERSION OKlinvorV1.8 Poner nombre \"xyz\" al Bluetooth \"xyz\" = 20 caracteres max AT+NAMExyz OKsetname Fijar PIN a xxxx xxxx = n\u00famero de 4 bits AT+PINxxxx OKsetPIN Fijar baudios a 1200 AT+BAUD1 OK1200 Fijar baudios a 2400 AT+BAUD2 OK2400 Fijar baudios a 4800 AT+BAUD3 OK4800 Fijar baudios a 9600 AT+BAUD4 OK9600 Fijar baudios a 19200 AT+BAUD5 OK19200 Fijar baudios a 38400 AT+BAUD6 OK38400 Fijar baudios a 57600 AT+BAUD7 OK57600 Fijar baudios a 115200 AT+BAUD8 OK115200 Fijar baudios a 230400 AT+BAUD9 OK230400 Fijar baudios a 460800 AT+BAUDA OK460800 Fijar baudios a 921600 AT+BAUDB OK921600 Fijar baudios a 1382400 AT+BAUDC OK1382400 Fijar No Paridad AT+PN OK NONE Fijar Paridad Par AT+PE OK EVEN Fijar Paridad Impar AT+PO OK ODD Nombre: HC-05 PIN: 1234 UART: 38400,8N1 Modo: Slave Comando AT Respuesta Verificar comunicaci\u00f3n AT OK Resetear AT+RESET OK Obtener versi\u00f3n firmware AT+VERSION OKlinvorV1.8 Poner nombre \"xyz\" al Bluetooth \"xyz\" = 20 caracteres max AT+NAMExyz OKsetname Fijar PIN a xxxx xxxx = n\u00famero de 4 bits AT+PINxxxx OKsetPIN Fijar baudios a 1200 AT+BAUD1 OK1200 Fijar baudios a 2400 AT+BAUD2 OK2400 Fijar baudios a 4800 AT+BAUD3 OK4800 Fijar baudios a 9600 AT+BAUD4 OK9600 Fijar baudios a 19200 AT+BAUD5 OK19200 Fijar baudios a 38400 AT+BAUD6 OK38400 Fijar baudios a 57600 AT+BAUD7 OK57600 Fijar baudios a 115200 AT+BAUD8 OK115200 Fijar baudios a 230400 AT+BAUD9 OK230400 Fijar baudios a 460800 AT+BAUDA OK460800 Fijar baudios a 921600 AT+BAUDB OK921600 Fijar baudios a 1382400 AT+BAUDC OK1382400 Fijar No Paridad AT+PN OK NONE Fijar Paridad Par AT+PE OK EVEN Fijar Paridad Impar AT+PO OK ODD Valores por defecto: Nombre: HMSoft PIN: 000000 UART: 9600,8N1 Comando AT Respuesta Verificar comunicaci\u00f3n AT OK OK+LOST Obtener versi\u00f3n firmware AT+VERSION OKlinvorV1.8 Poner nombre \"xyz\" al Bluetooth \"xyz\" = 20 caracteres max AT+NAMExyz OKsetname Fijar PIN a xxxx xxxx = n\u00famero de 4 bits AT+PINxxxx OKsetPIN Fijar baudios a 1200 AT+BAUD1 OK1200 Fijar baudios a 2400 AT+BAUD2 OK2400 Fijar baudios a 4800 AT+BAUD3 OK4800 Fijar baudios a 9600 AT+BAUD4 OK9600 Fijar baudios a 19200 AT+BAUD5 OK19200 Fijar baudios a 38400 AT+BAUD6 OK38400 Fijar baudios a 57600 AT+BAUD7 OK57600 Fijar baudios a 115200 AT+BAUD8 OK115200 Fijar baudios a 230400 AT+BAUD9 OK230400 Fijar baudios a 460800 AT+BAUDA OK460800 Fijar baudios a 921600 AT+BAUDB OK921600 Fijar baudios a 1382400 AT+BAUDC OK1382400 Fijar No Paridad AT+PN OK NONE Fijar Paridad Par AT+PE OK EVEN Fijar Paridad Impar AT+PO OK ODD","title":"Bluetooth"},{"location":"hw/arduino/bluetooth/#bluetooth","text":"","title":"Bluetooth"},{"location":"hw/arduino/bluetooth/#configuracion-a-traves-de-comandos-at","text":"OJO Al mandar comandos AT en el HC-05 todos tienen que acabar con \\r\\n Por ejemplo, en un HC-06 o un HM-10 se env\u00eda AT En el HC-05 hay que mandar AT\\r\\n HC-06 HC-05 HM-10 Valores por defecto: Nombre: HC-06 PIN: 1234 UART: 9600,8N1 Comando AT Respuesta Verificar comunicaci\u00f3n AT OK Obtener versi\u00f3n firmware AT+VERSION OKlinvorV1.8 Poner nombre \"xyz\" al Bluetooth \"xyz\" = 20 caracteres max AT+NAMExyz OKsetname Fijar PIN a xxxx xxxx = n\u00famero de 4 bits AT+PINxxxx OKsetPIN Fijar baudios a 1200 AT+BAUD1 OK1200 Fijar baudios a 2400 AT+BAUD2 OK2400 Fijar baudios a 4800 AT+BAUD3 OK4800 Fijar baudios a 9600 AT+BAUD4 OK9600 Fijar baudios a 19200 AT+BAUD5 OK19200 Fijar baudios a 38400 AT+BAUD6 OK38400 Fijar baudios a 57600 AT+BAUD7 OK57600 Fijar baudios a 115200 AT+BAUD8 OK115200 Fijar baudios a 230400 AT+BAUD9 OK230400 Fijar baudios a 460800 AT+BAUDA OK460800 Fijar baudios a 921600 AT+BAUDB OK921600 Fijar baudios a 1382400 AT+BAUDC OK1382400 Fijar No Paridad AT+PN OK NONE Fijar Paridad Par AT+PE OK EVEN Fijar Paridad Impar AT+PO OK ODD Nombre: HC-05 PIN: 1234 UART: 38400,8N1 Modo: Slave Comando AT Respuesta Verificar comunicaci\u00f3n AT OK Resetear AT+RESET OK Obtener versi\u00f3n firmware AT+VERSION OKlinvorV1.8 Poner nombre \"xyz\" al Bluetooth \"xyz\" = 20 caracteres max AT+NAMExyz OKsetname Fijar PIN a xxxx xxxx = n\u00famero de 4 bits AT+PINxxxx OKsetPIN Fijar baudios a 1200 AT+BAUD1 OK1200 Fijar baudios a 2400 AT+BAUD2 OK2400 Fijar baudios a 4800 AT+BAUD3 OK4800 Fijar baudios a 9600 AT+BAUD4 OK9600 Fijar baudios a 19200 AT+BAUD5 OK19200 Fijar baudios a 38400 AT+BAUD6 OK38400 Fijar baudios a 57600 AT+BAUD7 OK57600 Fijar baudios a 115200 AT+BAUD8 OK115200 Fijar baudios a 230400 AT+BAUD9 OK230400 Fijar baudios a 460800 AT+BAUDA OK460800 Fijar baudios a 921600 AT+BAUDB OK921600 Fijar baudios a 1382400 AT+BAUDC OK1382400 Fijar No Paridad AT+PN OK NONE Fijar Paridad Par AT+PE OK EVEN Fijar Paridad Impar AT+PO OK ODD Valores por defecto: Nombre: HMSoft PIN: 000000 UART: 9600,8N1 Comando AT Respuesta Verificar comunicaci\u00f3n AT OK OK+LOST Obtener versi\u00f3n firmware AT+VERSION OKlinvorV1.8 Poner nombre \"xyz\" al Bluetooth \"xyz\" = 20 caracteres max AT+NAMExyz OKsetname Fijar PIN a xxxx xxxx = n\u00famero de 4 bits AT+PINxxxx OKsetPIN Fijar baudios a 1200 AT+BAUD1 OK1200 Fijar baudios a 2400 AT+BAUD2 OK2400 Fijar baudios a 4800 AT+BAUD3 OK4800 Fijar baudios a 9600 AT+BAUD4 OK9600 Fijar baudios a 19200 AT+BAUD5 OK19200 Fijar baudios a 38400 AT+BAUD6 OK38400 Fijar baudios a 57600 AT+BAUD7 OK57600 Fijar baudios a 115200 AT+BAUD8 OK115200 Fijar baudios a 230400 AT+BAUD9 OK230400 Fijar baudios a 460800 AT+BAUDA OK460800 Fijar baudios a 921600 AT+BAUDB OK921600 Fijar baudios a 1382400 AT+BAUDC OK1382400 Fijar No Paridad AT+PN OK NONE Fijar Paridad Par AT+PE OK EVEN Fijar Paridad Impar AT+PO OK ODD","title":"Configuraci\u00f3n a trav\u00e9s de comandos AT"},{"location":"hw/arduino/stream/","text":"Stream \u00b6 La librer\u00eda Stream es muy importante ya que de ella heredan: HardwareSerial y SoftwareSerial Wire (I2C) SD Ethernet Se tiene un buffer para la entrada de datos y otro para los de salida. Esta clase a su vez hereda de la clase Print , que se usa para la parte de salida. API de la librer\u00eda Pese a que en el Reference de Arduino tienes toda la info , te recomiendo que mires el c\u00f3digo directamente Stream.h y Stream.cpp . Buffer de entrada \u00b6 Comprobar si hay datos para leer \u00b6 size_t available() devuelve el n\u00famero de bytes en el buffer de entrada. Leer un dato \u00b6 int read() devuelve el primer dato del buffer como int , o -1 si no hay nada, y lo elimina del buffer. int peek() igual que el anterior pero sin quitarlo del buffer. Leer varios datos \u00b6 Para poder leer varios datos puedes usar las funciones de antes en un bucle del estilo if ( Stream . available ()) { while ( Stream . available ()) { char car = ( char ) Stream . read (); // ... } } Hay funciones optimizadas para hacer esto m\u00e1s sencillo. Lo primero es definir un timeout en milisegundos. setTimeout(unsigned long timeout) Todas estas funciones al leer, eliminan esos datos del buffer: size_t readBytes(char *buffer, size_t length) Los length bytes le\u00eddos (o menos, debido al timeout ) los mete en buffer . La funci\u00f3n devuelve el n\u00famero de bytes le\u00eddos. size_t readBytesUntil(char terminator, char *buffer, size_t length) Los bytes le\u00eddos hasta encontrar el terminator (o menos, debido al timeout o length ) los mete en buffer . La funci\u00f3n devuelve el n\u00famero de bytes le\u00eddos. String readString() Devuelve todos los bytes en String o los que pueda leer dentro del timeout . String readStringUntil(char terminator) Devuelve todos los bytes en String hasta encontrar el byte terminator o los que pueda leer dentro del timeout . long parseInt([LookaheadMode lookahead, char ignore]) Devuelve el primer long o 0 si se excede el timeout . El lookahead define el m\u00e9todo a saltar bytes SKIP_ALL : Salta todo lo que no sean enteros o signo menos, es el modo por defecto. SKIP_NONE : No se salta nada, as\u00ed que solo lee el primer byte. SKIP_WHITESPACE : Solo tabs, espacios, saltos de l\u00ednea y retorno de carro son saltados. Se puede indicar un char ignore para que lo salte. float parseFloat([LookaheadMode lookahead, char ignore]) Devuelve el primer float o 0.0 si se excede el timeout . El lookahead define el m\u00e9todo a saltar bytes SKIP_ALL : Salta todo lo que no sean d\u00edgitos, puntos decimales o signo menos, es el modo por defecto. SKIP_NONE : No se salta nada, as\u00ed que solo lee el primer byte. SKIP_WHITESPACE : Solo tabs, espacios, saltos de l\u00ednea y retorno de carro son saltados. Se puede indicar un char ignore para que lo salte. Buscar dato \u00b6 Todas estas funciones buscan dentro del buffer, pero no eliminan el contenido. Como las anteriores funciones hay que definirles un timeout : bool find(char *target[, size_t length]) Busca hasta encontrar el target o salta el timeout . El target donde buscar es un char o un string. Se puede definir el que busque en los primeros length bytes. bool findUntil(char *target, char *terminator) Busca hasta encontrar el target o el terminator o salta el timeout . El target donde buscar es un char. El terminator a buscar es un char. Buffer de salida \u00b6 Comprobar si hay datos por enviar \u00b6 size_t availableForWrite() devuelve el n\u00famero de bytes pendientes por ser ennviados del buffer de salida. Mandar un dato \u00b6 La funci\u00f3n usada es size_t write ( const uint8_t * buffer [, size_t size ]) Pero la forma de usarla ser\u00eda m\u00e1s bien size_t write ( uint8_t data ) Devuelve el n\u00famero de bytes enviados. Mandar varios datos \u00b6 Se podr\u00edan mandar usando un bucle con el comando anterior, pero lo ideal es usar las funciones. Mandar datos en crudo Mandar texto Mandar l\u00edneas de texto La funci\u00f3n a usar es size_t write ( const uint8_t * buffer [, size_t size ]) Se puede definir que se manden size bytes. Un par de ejemplos. Serial . write ( 65 ); // int Serial . write ( \"65\" ); // string Serial . write ( \"Hello World\" ); // string La funci\u00f3n a usar puede tener tres formas size_t print ( const String & s ) size_t print ( data [, formato ]) size_t print ( number [, decimals ]) Ejemplos // size_t print(const String &s) Serial . print ( \"Hello World\" ); // size_t print(data[, formato]) char c = 'A' ; // same than c = 65 Serial . write ( c ); // A Serial . print ( c ); // A Serial . print ( c , DEC ); // 65 Serial . print ( c , HEX ); // 41 Serial . print ( c , OCT ); // 101 Serial . print ( c , BIN ); // 01000001 // size_t print(number[, decimals]) Serial . println ( PI , 2 ); //3.14 Serial . println ( PI , 6 ); //3.141593 Es igual que la anterior, pero por \u00faltimo env\u00eda un retorno de carro + salto de l\u00ednea println ( < something > ) = print ( < something > ) + print ( \" \\r\\n \" ) Tambi\u00e9n est\u00e1 la funci\u00f3n siguiente para esperar a que se hayan enviado todos los datos del buffer. flush ()","title":"Stream"},{"location":"hw/arduino/stream/#stream","text":"La librer\u00eda Stream es muy importante ya que de ella heredan: HardwareSerial y SoftwareSerial Wire (I2C) SD Ethernet Se tiene un buffer para la entrada de datos y otro para los de salida. Esta clase a su vez hereda de la clase Print , que se usa para la parte de salida. API de la librer\u00eda Pese a que en el Reference de Arduino tienes toda la info , te recomiendo que mires el c\u00f3digo directamente Stream.h y Stream.cpp .","title":"Stream"},{"location":"hw/arduino/stream/#buffer-de-entrada","text":"","title":"Buffer de entrada"},{"location":"hw/arduino/stream/#comprobar-si-hay-datos-para-leer","text":"size_t available() devuelve el n\u00famero de bytes en el buffer de entrada.","title":"Comprobar si hay datos para leer"},{"location":"hw/arduino/stream/#leer-un-dato","text":"int read() devuelve el primer dato del buffer como int , o -1 si no hay nada, y lo elimina del buffer. int peek() igual que el anterior pero sin quitarlo del buffer.","title":"Leer un dato"},{"location":"hw/arduino/stream/#leer-varios-datos","text":"Para poder leer varios datos puedes usar las funciones de antes en un bucle del estilo if ( Stream . available ()) { while ( Stream . available ()) { char car = ( char ) Stream . read (); // ... } } Hay funciones optimizadas para hacer esto m\u00e1s sencillo. Lo primero es definir un timeout en milisegundos. setTimeout(unsigned long timeout) Todas estas funciones al leer, eliminan esos datos del buffer: size_t readBytes(char *buffer, size_t length) Los length bytes le\u00eddos (o menos, debido al timeout ) los mete en buffer . La funci\u00f3n devuelve el n\u00famero de bytes le\u00eddos. size_t readBytesUntil(char terminator, char *buffer, size_t length) Los bytes le\u00eddos hasta encontrar el terminator (o menos, debido al timeout o length ) los mete en buffer . La funci\u00f3n devuelve el n\u00famero de bytes le\u00eddos. String readString() Devuelve todos los bytes en String o los que pueda leer dentro del timeout . String readStringUntil(char terminator) Devuelve todos los bytes en String hasta encontrar el byte terminator o los que pueda leer dentro del timeout . long parseInt([LookaheadMode lookahead, char ignore]) Devuelve el primer long o 0 si se excede el timeout . El lookahead define el m\u00e9todo a saltar bytes SKIP_ALL : Salta todo lo que no sean enteros o signo menos, es el modo por defecto. SKIP_NONE : No se salta nada, as\u00ed que solo lee el primer byte. SKIP_WHITESPACE : Solo tabs, espacios, saltos de l\u00ednea y retorno de carro son saltados. Se puede indicar un char ignore para que lo salte. float parseFloat([LookaheadMode lookahead, char ignore]) Devuelve el primer float o 0.0 si se excede el timeout . El lookahead define el m\u00e9todo a saltar bytes SKIP_ALL : Salta todo lo que no sean d\u00edgitos, puntos decimales o signo menos, es el modo por defecto. SKIP_NONE : No se salta nada, as\u00ed que solo lee el primer byte. SKIP_WHITESPACE : Solo tabs, espacios, saltos de l\u00ednea y retorno de carro son saltados. Se puede indicar un char ignore para que lo salte.","title":"Leer varios datos"},{"location":"hw/arduino/stream/#buscar-dato","text":"Todas estas funciones buscan dentro del buffer, pero no eliminan el contenido. Como las anteriores funciones hay que definirles un timeout : bool find(char *target[, size_t length]) Busca hasta encontrar el target o salta el timeout . El target donde buscar es un char o un string. Se puede definir el que busque en los primeros length bytes. bool findUntil(char *target, char *terminator) Busca hasta encontrar el target o el terminator o salta el timeout . El target donde buscar es un char. El terminator a buscar es un char.","title":"Buscar dato"},{"location":"hw/arduino/stream/#buffer-de-salida","text":"","title":"Buffer de salida"},{"location":"hw/arduino/stream/#comprobar-si-hay-datos-por-enviar","text":"size_t availableForWrite() devuelve el n\u00famero de bytes pendientes por ser ennviados del buffer de salida.","title":"Comprobar si hay datos por enviar"},{"location":"hw/arduino/stream/#mandar-un-dato","text":"La funci\u00f3n usada es size_t write ( const uint8_t * buffer [, size_t size ]) Pero la forma de usarla ser\u00eda m\u00e1s bien size_t write ( uint8_t data ) Devuelve el n\u00famero de bytes enviados.","title":"Mandar un dato"},{"location":"hw/arduino/stream/#mandar-varios-datos","text":"Se podr\u00edan mandar usando un bucle con el comando anterior, pero lo ideal es usar las funciones. Mandar datos en crudo Mandar texto Mandar l\u00edneas de texto La funci\u00f3n a usar es size_t write ( const uint8_t * buffer [, size_t size ]) Se puede definir que se manden size bytes. Un par de ejemplos. Serial . write ( 65 ); // int Serial . write ( \"65\" ); // string Serial . write ( \"Hello World\" ); // string La funci\u00f3n a usar puede tener tres formas size_t print ( const String & s ) size_t print ( data [, formato ]) size_t print ( number [, decimals ]) Ejemplos // size_t print(const String &s) Serial . print ( \"Hello World\" ); // size_t print(data[, formato]) char c = 'A' ; // same than c = 65 Serial . write ( c ); // A Serial . print ( c ); // A Serial . print ( c , DEC ); // 65 Serial . print ( c , HEX ); // 41 Serial . print ( c , OCT ); // 101 Serial . print ( c , BIN ); // 01000001 // size_t print(number[, decimals]) Serial . println ( PI , 2 ); //3.14 Serial . println ( PI , 6 ); //3.141593 Es igual que la anterior, pero por \u00faltimo env\u00eda un retorno de carro + salto de l\u00ednea println ( < something > ) = print ( < something > ) + print ( \" \\r\\n \" ) Tambi\u00e9n est\u00e1 la funci\u00f3n siguiente para esperar a que se hayan enviado todos los datos del buffer. flush ()","title":"Mandar varios datos"},{"location":"hw/arduino/uart/","text":"UART \u00b6 API de la librer\u00eda Un buen recurso para ver la API completa de HardwareSerial y SoftwareSerial . Aunque Arduino tiene su docu en: HardwareSerial SoftwareSerial Te recomiendo que te vayas al c\u00f3digo directamente, ya que las dos heredan de Stream y ah\u00ed puedes ver bien toda la API HardwareSerial.h | HardwareSerial.cpp SoftwareSerial.h | SoftwareSerial.cpp En Arduino a la UART se le suele decir como Serial . La tenemos de dos tipos: Serial por Hardware: Son unos pines por defecto que dependen de cada placa y puede haber varios. Serial por Software: Son unos pines que eliges tu, pero es m\u00e1s lenta y solo puede haber uno funcionando aunque crees varios. Las dos heredan de la clase Stream, as\u00ed que comparten la mayor parte de su API. Para ver la API de Stream ir aqu\u00ed . Abajo del todo te dejo unos ejemplos en la secci\u00f3n Ejemplos . HardwareSerial \u00b6 El objeto para usar la API es Serial . En placas como la Mega hay incluso 4 serial: Serial Serial1 Serial2 Serial4 Habilitar / deshabilitar la comunicaci\u00f3n en Hardware \u00b6 Para habilitar se usa la funci\u00f3n begin() , donde se le pasa los baudios, y opcionalmente luego la configuraci\u00f3n (es una constante y por defecto es SERIAL_8N1 ). Para deshabilitar se usa la funci\u00f3n end() . Inicializaci\u00f3n Velocidad en baudios Configuraci\u00f3n // Enable with Config 8N1 by default Serial . begin ( baud ); // Enable with custom config Serial . begin ( baud , config ); // Disable Serial . end (); Es un tipo long Baudios Tiempo por bit (microseg) 115200 8,681 57600 17,361 38400 26,042 31250 32,000 28800 34,722 19200 52,083 14400 69,444 9600 104,166 4800 208,333 2400 426,666 1200 833,333 600 1666,666 300 3333,333 Es una constante que define Longitud + Paridad + Bits de Parada Configuraci\u00f3n Longitud Paridad Bits de parada SERIAL_5N1 5 None 1 SERIAL_6N1 6 None 1 SERIAL_7N1 7 None 1 SERIAL_8N1 8 None 1 SERIAL_5N2 5 None 2 SERIAL_6N2 6 None 2 SERIAL_7N2 7 None 2 SERIAL_8N2 8 None 2 SERIAL_5E1 5 Even 1 SERIAL_6E1 6 Even 1 SERIAL_7E1 7 Even 1 SERIAL_8E1 8 Even 1 SERIAL_5E2 5 Even 2 SERIAL_6E2 6 Even 2 SERIAL_7E2 7 Even 2 SERIAL_8E2 8 Even 2 SERIAL_5O1 5 Odd 1 SERIAL_6O1 6 Odd 1 SERIAL_7O1 7 Odd 1 SERIAL_8O1 8 Odd 1 SERIAL_5O2 5 Odd 2 SERIAL_6O2 6 Odd 2 SERIAL_7O2 7 Odd 2 SERIAL_8O2 8 Odd 2 Saber si la UART est\u00e1 disponible \u00b6 Para saber si el puerto est\u00e1 disponible se usa if ( ! Serial ) Una buena estrategia para esperar a que est\u00e9 disponible ser\u00eda void setup () { // Initialize serial Serial . begin ( 9600 ); // Wait for port to open while ( ! Serial ) { ; // wait for serial port to connect. Needed for native USB } } Leer datos \u00b6 Para saber si hay datos para leer se usa Serial.available() que devuelve el numero de bytes para leer. Pero hay placas, como la UNO que puede usar la interrupci\u00f3n serialEvent . La MEGA puede usar serialEvent , serialEvent1 , serialEvent2 , serialEvent3 . Otras no lo tienen. Manualmente Con interrupci\u00f3n void loop () { if ( Serial . available ()) { // Read data } } void loop (){ //... } void serialEvent () { // Read data } SoftwareSerial \u00b6 La UART por Software tiene unas cuantas diferencias con respecto a la Hardware: La comunicaci\u00f3n no es \"Full Duplex\" del todo, es una especie de Half Duplex (mientras emite no puede recibir, y viceversa) Es m\u00e1s lenta, porque no es Full Duplex y porque algunas placas no soportan altas velocidades. No tienes interrupciones para leer, tienes que leer manualmente (mira los ejemplos). Puedes definir m\u00e1s de una por placa, pero solo puedes recibir datos con 1. \u00bfY para que quiero varias? Apagas una y usas la otra. Luego apagas la otra, y enciendes la una... Habilitar / deshabilitar la comunicaci\u00f3n en Software \u00b6 Comunicaci\u00f3n 8N1 En la UART por Software solo tienes configuraci\u00f3n 8N1. Solo puedes configurar la velocidad. Para habilitar se usa la funci\u00f3n begin() , donde se le pasa los baudios, y opcionalmente luego si se quiere usar la l\u00f3gica invertida (por defecto es false ). Para deshabilitar se usa la funci\u00f3n end() . Inicializaci\u00f3n Velocidad en baudios #include <SoftwareSerial.h> const uint8_t RX_PIN = A0 ; const uint8_t TX_PIN = A1 ; SoftwareSerial softSerial ( RX_PIN , TX_PIN ); void setup () { // Enable with Config 8N1 by default softSerial . begin ( baud ); // Enable with custom config bool inverseLogic = true ; softSerial . begin ( baud , inverseLogic ); // Disable Serial . end (); } Es un tipo long Baudios Tiempo por bit (microseg) 115200 8,681 57600 17,361 38400 26,042 31250 32,000 28800 34,722 19200 52,083 14400 69,444 9600 104,166 4800 208,333 2400 426,666 1200 833,333 600 1666,666 300 3333,333 Lectura de datos, buffer de entrada desbordado \u00b6 El buffer de entrada est\u00e1 limitado a 64 bytes, si quieres saber si se ha desbordado se usa la funci\u00f3n bool overflow() . Si se ha desbordado, devuelve true , y vuelve el flag a false . if ( softSerial . overflow ()) { softSerial . println ( \"The SoftSerial has overflow\" ); } Usar varias UART a la vez \u00b6 Si se definen varias UART por Software, la \u00faltima que habilites con begin() es la que va a leer. Para poder intercambiar entre ellas hay 3 funciones bool isListening() devuelve si la UART est\u00e1 o no leyendo. bool listen() habilita esa UART para que sea la que lea, y devuelve true si no era la UART que estaba leyendo. bool stopListening() deshabilita la lectura de esa UART, y devuelve true si se estaba usando para leer. Aqu\u00ed se adjunta un ejemplo con dos SoftwareSerial UARTs, hecho por Tom Igoe 2011~2016 de Arduino. El c\u00f3digo oficial est\u00e1 aqu\u00ed . Primero se lee con una y luego con otra. Veras que no usa la funci\u00f3n stopListening() . #include <SoftwareSerial.h> SoftwareSerial portOne ( 10 , 11 ); SoftwareSerial portTwo ( 8 , 9 ); void setup () { Serial . begin ( 9600 ); while ( ! Serial ) { ; } // Start each software serial port portOne . begin ( 9600 ); portTwo . begin ( 9600 ); } void loop () { // Start listen in portOne portOne . listen (); Serial . println ( \"Data from port one:\" ); while ( portOne . available () > 0 ) { char inByte = portOne . read (); Serial . write ( inByte ); } Serial . println (); // Now listen on the second port portTwo . listen (); Serial . println ( \"Data from port two:\" ); while ( portTwo . available () > 0 ) { char inByte = portTwo . read (); Serial . write ( inByte ); } Serial . println (); } Ejemplos \u00b6 Ejemplos que reciben algo por el Serial y lo devuelven: Pasar lo de una UART a la otra Hardware con interrupci\u00f3n Hardware sin interrupci\u00f3n Software #include <Arduino.h> #include <SoftwareSerial.h> const char DELIMETER = '\\n' ; const uint8_t RX_PIN = A0 ; const uint8_t TX_PIN = A1 ; SoftwareSerial SoftSerial = SoftwareSerial ( RX , TX ); void setup () { SoftSerial . begin ( 9600 ); SoftSerial . setTimeout ( 100 ); } void loop () { readSoftwareWriteHardware (); readHardwareWriteSoftware (); } void readSoftwareWriteHardware () { if ( SoftSerial . available ()) { String message = SoftSerial . readStringUntil ( DELIMETER ); Serial . println ( \"Received from Software -> \" + message ); } } void readHardwareWriteSoftware () { if ( Serial . available ()) { String message = Serial . readStringUntil ( DELIMETER ); SoftSerial . println ( \"Received from Hardware-> \" + message ); } } #include <Arduino.h> const char DELIMETER = '\\n' ; void setup () { Serial . begin ( 9600 ); Serial . setTimeout ( 100 ); } void loop () {} void serialEvent () { if ( Serial . available ()) { String message = Serial . readStringUntil ( DELIMETER ); Serial . println ( \"Received -> \" + message ); } } #include <Arduino.h> const char DELIMETER = '\\n' ; void setup () { Serial . begin ( 9600 ); Serial . setTimeout ( 100 ); } void loop () { if ( Serial . available ()) { String message = Serial . readStringUntil ( DELIMETER ); Serial . println ( \"Received -> \" + message ); } } #include <Arduino.h> #include <SoftwareSerial.h> const char DELIMETER = '\\n' ; const uint8_t RX_PIN = A0 ; const uint8_t TX_PIN = A1 ; SoftwareSerial SoftSerial = SoftwareSerial ( RX , TX ); void setup () { SoftSerial . begin ( 9600 ); SoftSerial . setTimeout ( 100 ); } void loop () { if ( SoftSerial . available ()) { String message = SoftSerial . readStringUntil ( DELIMETER ); Serial . println ( \"Received -> \" + message ); } } Donde usarlo \u00b6 Por ejemplo con los m\u00f3dulos Bluetooth HC-05 / HC-06 / HM-10.","title":"UART"},{"location":"hw/arduino/uart/#uart","text":"API de la librer\u00eda Un buen recurso para ver la API completa de HardwareSerial y SoftwareSerial . Aunque Arduino tiene su docu en: HardwareSerial SoftwareSerial Te recomiendo que te vayas al c\u00f3digo directamente, ya que las dos heredan de Stream y ah\u00ed puedes ver bien toda la API HardwareSerial.h | HardwareSerial.cpp SoftwareSerial.h | SoftwareSerial.cpp En Arduino a la UART se le suele decir como Serial . La tenemos de dos tipos: Serial por Hardware: Son unos pines por defecto que dependen de cada placa y puede haber varios. Serial por Software: Son unos pines que eliges tu, pero es m\u00e1s lenta y solo puede haber uno funcionando aunque crees varios. Las dos heredan de la clase Stream, as\u00ed que comparten la mayor parte de su API. Para ver la API de Stream ir aqu\u00ed . Abajo del todo te dejo unos ejemplos en la secci\u00f3n Ejemplos .","title":"UART"},{"location":"hw/arduino/uart/#hardwareserial","text":"El objeto para usar la API es Serial . En placas como la Mega hay incluso 4 serial: Serial Serial1 Serial2 Serial4","title":"HardwareSerial"},{"location":"hw/arduino/uart/#habilitar-deshabilitar-la-comunicacion-en-hardware","text":"Para habilitar se usa la funci\u00f3n begin() , donde se le pasa los baudios, y opcionalmente luego la configuraci\u00f3n (es una constante y por defecto es SERIAL_8N1 ). Para deshabilitar se usa la funci\u00f3n end() . Inicializaci\u00f3n Velocidad en baudios Configuraci\u00f3n // Enable with Config 8N1 by default Serial . begin ( baud ); // Enable with custom config Serial . begin ( baud , config ); // Disable Serial . end (); Es un tipo long Baudios Tiempo por bit (microseg) 115200 8,681 57600 17,361 38400 26,042 31250 32,000 28800 34,722 19200 52,083 14400 69,444 9600 104,166 4800 208,333 2400 426,666 1200 833,333 600 1666,666 300 3333,333 Es una constante que define Longitud + Paridad + Bits de Parada Configuraci\u00f3n Longitud Paridad Bits de parada SERIAL_5N1 5 None 1 SERIAL_6N1 6 None 1 SERIAL_7N1 7 None 1 SERIAL_8N1 8 None 1 SERIAL_5N2 5 None 2 SERIAL_6N2 6 None 2 SERIAL_7N2 7 None 2 SERIAL_8N2 8 None 2 SERIAL_5E1 5 Even 1 SERIAL_6E1 6 Even 1 SERIAL_7E1 7 Even 1 SERIAL_8E1 8 Even 1 SERIAL_5E2 5 Even 2 SERIAL_6E2 6 Even 2 SERIAL_7E2 7 Even 2 SERIAL_8E2 8 Even 2 SERIAL_5O1 5 Odd 1 SERIAL_6O1 6 Odd 1 SERIAL_7O1 7 Odd 1 SERIAL_8O1 8 Odd 1 SERIAL_5O2 5 Odd 2 SERIAL_6O2 6 Odd 2 SERIAL_7O2 7 Odd 2 SERIAL_8O2 8 Odd 2","title":"Habilitar / deshabilitar la comunicaci\u00f3n en Hardware"},{"location":"hw/arduino/uart/#saber-si-la-uart-esta-disponible","text":"Para saber si el puerto est\u00e1 disponible se usa if ( ! Serial ) Una buena estrategia para esperar a que est\u00e9 disponible ser\u00eda void setup () { // Initialize serial Serial . begin ( 9600 ); // Wait for port to open while ( ! Serial ) { ; // wait for serial port to connect. Needed for native USB } }","title":"Saber si la UART est\u00e1 disponible"},{"location":"hw/arduino/uart/#leer-datos","text":"Para saber si hay datos para leer se usa Serial.available() que devuelve el numero de bytes para leer. Pero hay placas, como la UNO que puede usar la interrupci\u00f3n serialEvent . La MEGA puede usar serialEvent , serialEvent1 , serialEvent2 , serialEvent3 . Otras no lo tienen. Manualmente Con interrupci\u00f3n void loop () { if ( Serial . available ()) { // Read data } } void loop (){ //... } void serialEvent () { // Read data }","title":"Leer datos"},{"location":"hw/arduino/uart/#softwareserial","text":"La UART por Software tiene unas cuantas diferencias con respecto a la Hardware: La comunicaci\u00f3n no es \"Full Duplex\" del todo, es una especie de Half Duplex (mientras emite no puede recibir, y viceversa) Es m\u00e1s lenta, porque no es Full Duplex y porque algunas placas no soportan altas velocidades. No tienes interrupciones para leer, tienes que leer manualmente (mira los ejemplos). Puedes definir m\u00e1s de una por placa, pero solo puedes recibir datos con 1. \u00bfY para que quiero varias? Apagas una y usas la otra. Luego apagas la otra, y enciendes la una...","title":"SoftwareSerial"},{"location":"hw/arduino/uart/#habilitar-deshabilitar-la-comunicacion-en-software","text":"Comunicaci\u00f3n 8N1 En la UART por Software solo tienes configuraci\u00f3n 8N1. Solo puedes configurar la velocidad. Para habilitar se usa la funci\u00f3n begin() , donde se le pasa los baudios, y opcionalmente luego si se quiere usar la l\u00f3gica invertida (por defecto es false ). Para deshabilitar se usa la funci\u00f3n end() . Inicializaci\u00f3n Velocidad en baudios #include <SoftwareSerial.h> const uint8_t RX_PIN = A0 ; const uint8_t TX_PIN = A1 ; SoftwareSerial softSerial ( RX_PIN , TX_PIN ); void setup () { // Enable with Config 8N1 by default softSerial . begin ( baud ); // Enable with custom config bool inverseLogic = true ; softSerial . begin ( baud , inverseLogic ); // Disable Serial . end (); } Es un tipo long Baudios Tiempo por bit (microseg) 115200 8,681 57600 17,361 38400 26,042 31250 32,000 28800 34,722 19200 52,083 14400 69,444 9600 104,166 4800 208,333 2400 426,666 1200 833,333 600 1666,666 300 3333,333","title":"Habilitar / deshabilitar la comunicaci\u00f3n en Software"},{"location":"hw/arduino/uart/#lectura-de-datos-buffer-de-entrada-desbordado","text":"El buffer de entrada est\u00e1 limitado a 64 bytes, si quieres saber si se ha desbordado se usa la funci\u00f3n bool overflow() . Si se ha desbordado, devuelve true , y vuelve el flag a false . if ( softSerial . overflow ()) { softSerial . println ( \"The SoftSerial has overflow\" ); }","title":"Lectura de datos, buffer de entrada desbordado"},{"location":"hw/arduino/uart/#usar-varias-uart-a-la-vez","text":"Si se definen varias UART por Software, la \u00faltima que habilites con begin() es la que va a leer. Para poder intercambiar entre ellas hay 3 funciones bool isListening() devuelve si la UART est\u00e1 o no leyendo. bool listen() habilita esa UART para que sea la que lea, y devuelve true si no era la UART que estaba leyendo. bool stopListening() deshabilita la lectura de esa UART, y devuelve true si se estaba usando para leer. Aqu\u00ed se adjunta un ejemplo con dos SoftwareSerial UARTs, hecho por Tom Igoe 2011~2016 de Arduino. El c\u00f3digo oficial est\u00e1 aqu\u00ed . Primero se lee con una y luego con otra. Veras que no usa la funci\u00f3n stopListening() . #include <SoftwareSerial.h> SoftwareSerial portOne ( 10 , 11 ); SoftwareSerial portTwo ( 8 , 9 ); void setup () { Serial . begin ( 9600 ); while ( ! Serial ) { ; } // Start each software serial port portOne . begin ( 9600 ); portTwo . begin ( 9600 ); } void loop () { // Start listen in portOne portOne . listen (); Serial . println ( \"Data from port one:\" ); while ( portOne . available () > 0 ) { char inByte = portOne . read (); Serial . write ( inByte ); } Serial . println (); // Now listen on the second port portTwo . listen (); Serial . println ( \"Data from port two:\" ); while ( portTwo . available () > 0 ) { char inByte = portTwo . read (); Serial . write ( inByte ); } Serial . println (); }","title":"Usar varias UART a la vez"},{"location":"hw/arduino/uart/#ejemplos","text":"Ejemplos que reciben algo por el Serial y lo devuelven: Pasar lo de una UART a la otra Hardware con interrupci\u00f3n Hardware sin interrupci\u00f3n Software #include <Arduino.h> #include <SoftwareSerial.h> const char DELIMETER = '\\n' ; const uint8_t RX_PIN = A0 ; const uint8_t TX_PIN = A1 ; SoftwareSerial SoftSerial = SoftwareSerial ( RX , TX ); void setup () { SoftSerial . begin ( 9600 ); SoftSerial . setTimeout ( 100 ); } void loop () { readSoftwareWriteHardware (); readHardwareWriteSoftware (); } void readSoftwareWriteHardware () { if ( SoftSerial . available ()) { String message = SoftSerial . readStringUntil ( DELIMETER ); Serial . println ( \"Received from Software -> \" + message ); } } void readHardwareWriteSoftware () { if ( Serial . available ()) { String message = Serial . readStringUntil ( DELIMETER ); SoftSerial . println ( \"Received from Hardware-> \" + message ); } } #include <Arduino.h> const char DELIMETER = '\\n' ; void setup () { Serial . begin ( 9600 ); Serial . setTimeout ( 100 ); } void loop () {} void serialEvent () { if ( Serial . available ()) { String message = Serial . readStringUntil ( DELIMETER ); Serial . println ( \"Received -> \" + message ); } } #include <Arduino.h> const char DELIMETER = '\\n' ; void setup () { Serial . begin ( 9600 ); Serial . setTimeout ( 100 ); } void loop () { if ( Serial . available ()) { String message = Serial . readStringUntil ( DELIMETER ); Serial . println ( \"Received -> \" + message ); } } #include <Arduino.h> #include <SoftwareSerial.h> const char DELIMETER = '\\n' ; const uint8_t RX_PIN = A0 ; const uint8_t TX_PIN = A1 ; SoftwareSerial SoftSerial = SoftwareSerial ( RX , TX ); void setup () { SoftSerial . begin ( 9600 ); SoftSerial . setTimeout ( 100 ); } void loop () { if ( SoftSerial . available ()) { String message = SoftSerial . readStringUntil ( DELIMETER ); Serial . println ( \"Received -> \" + message ); } }","title":"Ejemplos"},{"location":"hw/arduino/uart/#donde-usarlo","text":"Por ejemplo con los m\u00f3dulos Bluetooth HC-05 / HC-06 / HM-10.","title":"Donde usarlo"},{"location":"hw/micropython/micropython/","text":"Micropython \u00b6 La informaci\u00f3n oficial de Micropython est\u00e1 en su web -> Documentaci\u00f3n Oficial Preparar placa ESP8266 con Micropython \u00b6 Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) est\u00e1 -> aqu\u00ed . Se recomienda el tutorial en espa\u00f1ol de Python Canarias -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. NOTA : Si estas en Windows o Mac , tienes que instalar los drivers del chip CH340 / CH341 (son los que permiten la comunicaci\u00f3n por el USB). Windows -> aqu\u00ed Mac -> aqu\u00ed Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando esptool.py --port <puerto> erase_flash Por ejemplo esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware esptool.py --port <port> --baud <baudios> write_flash --flash_size = detect 0 <fichero-de-firmware> Por ejemplo esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size = detect 0 esp8266-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size = detect -fm dio 0 esp8266-20190125-v1.10.bin Preparar placa ESP32 con Micropython \u00b6 Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) -> aqu\u00ed . Tutorial espa\u00f1ol de Zerasul -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando esptool.py --port <puerto> erase_flash Por ejemplo esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware esptool.py --chip esp32 --port <port> --baud <baudios> write_flash -z 0x1000 <fichero-de-firmware> Por ejemplo esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 115200 write_flash -z 0x1000 esp32-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo esptool.py --chip esp32 --port /dev/ttyUSB0 write_flash --baud 115200 -z 0x1000 -fm dio esp32-20190125-v1.10.bin Acceso a la placa + REPL \u00b6 A la placa se puede acceder por dos medios: Serial Web Una vez se accede a la placa, estamos en el REPL (Read-Eval-Print-Loop) de esta. A efectos pr\u00e1cticos es un interprete de Python y adem\u00e1s cuenta con autocompletado. Para ver todas las opciones con las que cuenta escribimos help () Veremos todos los comandos y una peque\u00f1a ayuda. Los comandos m\u00e1s importantes son: Barra espaciadora -> Sirve para el autocompletado. Ctrl+C -> Para cerrar alg\u00fan script que hayamos abierto dentro de la placa. Ctrl+D -> Para hacer un reset por software (soft reset). Ctrl+E -> Modo pegar (de copia-pega). Tambi\u00e9n podremos usar esta funci\u00f3n para ver con que variables/constantes + funciones cuenta cada m\u00f3dulo. Por ejemplo importamos el m\u00f3dulo esp y vemos todo lo que tiene import esp help ( esp ) Para ver todos los m\u00f3dulos disponibles en la placa se hace help ( 'modules' ) Comunicaci\u00f3n con la placa por serial -> SerialREPL \u00b6 Para poder entrar dentro de la placa, estas normalmente traen una UART (interfaz serie, como un USB dentro) accesible por los pines TX y RX. As\u00ed que con el cable usb y un programa que permita conexi\u00f3n serial podemos acceder a la placa. Programas con serial hay muchos, tanto con interfaz gr\u00e1fica (GUI) como por terminal: Windows MobaXterm PuTTY CoolTerm Mac CoolTerm Screen Linux PuTTY GTKTerm GNU screen Picocom CoolTerm Comunicaci\u00f3n con la placa por WiFi -> WebREPL \u00b6 Tambi\u00e9n se puede acceder al REPL de la placa a trav\u00e9s de una utilidad web, WebREPL, pero para ello debemos seguir los siguientes pasos: Abrir la utilidad WebREPL en un navegador web. Acceder a la placa por serial. Configurar la WiFi en modo AP (Punto de Acceso). Se adjunta peque\u00f1o script de ayuda import network # Primero activamos el interfaz AP de la placa my_wifi = 'nombre-para-la-wifi' my_password = 'contrase\u00f1a-para-la-wifi' # Debe tener al menos 8 caracteres ap_lan = network . WLAN ( network . AP_IF ) ap_lan . active ( True ) # Devuelte True si la interfaz AP est\u00e1 activa ap_lan . config ( essid = my_wifi , password = my_password ) # Despues activamos el webrepl import webrepl_setup Despu\u00e9s debemos configurar el WebREPL con import webrepl_setup Nos saldran las instrucciones para activar el WebREPL (activarlo), hay que ponerle una contrase\u00f1a de entre 4-9 caracteres y por \u00faltimo reiniciarlo. Conectarse a la WiFi de la placa. Ir a la web de WebREPL que est\u00e1 abierta en el navegador y darle al bot\u00f3n Connect (pedir\u00e1 el password puesto en el paso 4.). Primeros pasos \u00b6 Filesystem y sistema de ejecuci\u00f3n \u00b6 Cuando la placa arranca, se ejecuta un fichero interno, _boot.py , que monta todo el sistema de ficheros (filesystem). Una vez el sistema est\u00e1 montado, se ejecutan dos ficheros secuencialmente (si existen): boot.py -> Equivale al setup() de Arduino. main.py -> Equivale al loop() de Arduino. Configurar WiFi \u00b6 Las placas ESPx cuentan con dos interfaces de red: Station Interface -> Es para conectarse a una red WiFi. Access Point Interface -> Es para crear una red WiFi propia. Las dos interfaces pueden funcionar a la vez, es decir, que estar conectada la placa a una red WiFi y a la vez generar su propia red WiFi. Para poder configurarlos necesitamos trabajar con el m\u00f3dulo network . Conectarse a una red WiFi: import network red = 'nombre-de-la-red-wifi' contrasena = 'pass-de-la-wifi' sta_if = network . WLAN ( network . STA_IF ) sta_if . active ( True ) sta_if . connect ( red , contrasena ) Crear una red WiFi: import network red = 'nombre-para-la-wifi' contrasena = 'contrasena-para-la-wifi' ap_if = network . WLAN ( network . AP_IF ) ap_if . active ( True ) ap_if . config ( red , contrasena )","title":"Micropython"},{"location":"hw/micropython/micropython/#micropython","text":"La informaci\u00f3n oficial de Micropython est\u00e1 en su web -> Documentaci\u00f3n Oficial","title":"Micropython"},{"location":"hw/micropython/micropython/#preparar-placa-esp8266-con-micropython","text":"Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) est\u00e1 -> aqu\u00ed . Se recomienda el tutorial en espa\u00f1ol de Python Canarias -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. NOTA : Si estas en Windows o Mac , tienes que instalar los drivers del chip CH340 / CH341 (son los que permiten la comunicaci\u00f3n por el USB). Windows -> aqu\u00ed Mac -> aqu\u00ed Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando esptool.py --port <puerto> erase_flash Por ejemplo esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware esptool.py --port <port> --baud <baudios> write_flash --flash_size = detect 0 <fichero-de-firmware> Por ejemplo esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size = detect 0 esp8266-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size = detect -fm dio 0 esp8266-20190125-v1.10.bin","title":"Preparar placa ESP8266 con Micropython"},{"location":"hw/micropython/micropython/#preparar-placa-esp32-con-micropython","text":"Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) -> aqu\u00ed . Tutorial espa\u00f1ol de Zerasul -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando esptool.py --port <puerto> erase_flash Por ejemplo esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware esptool.py --chip esp32 --port <port> --baud <baudios> write_flash -z 0x1000 <fichero-de-firmware> Por ejemplo esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 115200 write_flash -z 0x1000 esp32-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo esptool.py --chip esp32 --port /dev/ttyUSB0 write_flash --baud 115200 -z 0x1000 -fm dio esp32-20190125-v1.10.bin","title":"Preparar placa ESP32 con Micropython"},{"location":"hw/micropython/micropython/#acceso-a-la-placa-repl","text":"A la placa se puede acceder por dos medios: Serial Web Una vez se accede a la placa, estamos en el REPL (Read-Eval-Print-Loop) de esta. A efectos pr\u00e1cticos es un interprete de Python y adem\u00e1s cuenta con autocompletado. Para ver todas las opciones con las que cuenta escribimos help () Veremos todos los comandos y una peque\u00f1a ayuda. Los comandos m\u00e1s importantes son: Barra espaciadora -> Sirve para el autocompletado. Ctrl+C -> Para cerrar alg\u00fan script que hayamos abierto dentro de la placa. Ctrl+D -> Para hacer un reset por software (soft reset). Ctrl+E -> Modo pegar (de copia-pega). Tambi\u00e9n podremos usar esta funci\u00f3n para ver con que variables/constantes + funciones cuenta cada m\u00f3dulo. Por ejemplo importamos el m\u00f3dulo esp y vemos todo lo que tiene import esp help ( esp ) Para ver todos los m\u00f3dulos disponibles en la placa se hace help ( 'modules' )","title":"Acceso a la placa + REPL"},{"location":"hw/micropython/micropython/#comunicacion-con-la-placa-por-serial-serialrepl","text":"Para poder entrar dentro de la placa, estas normalmente traen una UART (interfaz serie, como un USB dentro) accesible por los pines TX y RX. As\u00ed que con el cable usb y un programa que permita conexi\u00f3n serial podemos acceder a la placa. Programas con serial hay muchos, tanto con interfaz gr\u00e1fica (GUI) como por terminal: Windows MobaXterm PuTTY CoolTerm Mac CoolTerm Screen Linux PuTTY GTKTerm GNU screen Picocom CoolTerm","title":"Comunicaci\u00f3n con la placa por serial -&gt; SerialREPL"},{"location":"hw/micropython/micropython/#comunicacion-con-la-placa-por-wifi-webrepl","text":"Tambi\u00e9n se puede acceder al REPL de la placa a trav\u00e9s de una utilidad web, WebREPL, pero para ello debemos seguir los siguientes pasos: Abrir la utilidad WebREPL en un navegador web. Acceder a la placa por serial. Configurar la WiFi en modo AP (Punto de Acceso). Se adjunta peque\u00f1o script de ayuda import network # Primero activamos el interfaz AP de la placa my_wifi = 'nombre-para-la-wifi' my_password = 'contrase\u00f1a-para-la-wifi' # Debe tener al menos 8 caracteres ap_lan = network . WLAN ( network . AP_IF ) ap_lan . active ( True ) # Devuelte True si la interfaz AP est\u00e1 activa ap_lan . config ( essid = my_wifi , password = my_password ) # Despues activamos el webrepl import webrepl_setup Despu\u00e9s debemos configurar el WebREPL con import webrepl_setup Nos saldran las instrucciones para activar el WebREPL (activarlo), hay que ponerle una contrase\u00f1a de entre 4-9 caracteres y por \u00faltimo reiniciarlo. Conectarse a la WiFi de la placa. Ir a la web de WebREPL que est\u00e1 abierta en el navegador y darle al bot\u00f3n Connect (pedir\u00e1 el password puesto en el paso 4.).","title":"Comunicaci\u00f3n con la placa por WiFi -&gt; WebREPL"},{"location":"hw/micropython/micropython/#primeros-pasos","text":"","title":"Primeros pasos"},{"location":"hw/micropython/micropython/#filesystem-y-sistema-de-ejecucion","text":"Cuando la placa arranca, se ejecuta un fichero interno, _boot.py , que monta todo el sistema de ficheros (filesystem). Una vez el sistema est\u00e1 montado, se ejecutan dos ficheros secuencialmente (si existen): boot.py -> Equivale al setup() de Arduino. main.py -> Equivale al loop() de Arduino.","title":"Filesystem y sistema de ejecuci\u00f3n"},{"location":"hw/micropython/micropython/#configurar-wifi","text":"Las placas ESPx cuentan con dos interfaces de red: Station Interface -> Es para conectarse a una red WiFi. Access Point Interface -> Es para crear una red WiFi propia. Las dos interfaces pueden funcionar a la vez, es decir, que estar conectada la placa a una red WiFi y a la vez generar su propia red WiFi. Para poder configurarlos necesitamos trabajar con el m\u00f3dulo network . Conectarse a una red WiFi: import network red = 'nombre-de-la-red-wifi' contrasena = 'pass-de-la-wifi' sta_if = network . WLAN ( network . STA_IF ) sta_if . active ( True ) sta_if . connect ( red , contrasena ) Crear una red WiFi: import network red = 'nombre-para-la-wifi' contrasena = 'contrasena-para-la-wifi' ap_if = network . WLAN ( network . AP_IF ) ap_if . active ( True ) ap_if . config ( red , contrasena )","title":"Configurar WiFi"},{"location":"hw/platformio/platformio/","text":"Platformio \u00b6 TODO Crear c\u00f3digo para hardware embebido no es sumamente complicado. El problema mayor que hay es programar / cargar el programa en los chips: Necesitas ciertas configuraciones para cada chip. Unas herramientas que por lo general son de cada fabricante, cerradas, y que suelen dejar bastante que desear. Depende tambi\u00e9n de la placa que use el chip. Etc Platformio es un ecosistema Open Source, multiplataforma, pensado para evitar todo esto. Con \u00e9l podremos programar desde un Arduino, a un ARM, o alguna de las much\u00edsimas placas que soporta. Lo \u00fanico que necesita para funcionar es tener instalado Python 3 en el ordenador. Documentaci\u00f3n Oficial de Platformio -> aqu\u00ed Instalaci\u00f3n \u00b6 Platformio tiene varias herramientas, pero para nosotros, las podemos dividir en dos: Platformio Core (CLI) Es el n\u00facleo de todo. Con esto gestionamos y cargamos nuestro c\u00f3digo en los chips. Tiene una herramienta de comandos (CLI) muy \u00fatil. Platformio IDE Es una extensi\u00f3n / plugin que se le pone a entornos gr\u00e1ficos para poder usar Platformio Core de manera m\u00e1s sencilla. El IDE \"por defecto\" donde usarlo es Visual Studio Code. Documentaci\u00f3n oficial para su instalaci\u00f3n -> aqu\u00ed Nota: Si usas Linux, debes instalar las 99-platformio-udev.rules para que vaya mejor la detecci\u00f3n de placas. A partir de ahora nos referiremos a Platformio tambi\u00e9n como PIO, para abreviar. Si solo vamos a usar PIO Core, desde Python 2.7 hacemos pip install platformio Si quisieramos el PIO Ide, buscamos la extensi\u00f3n Platformio IDE en las extensiones de VSCode e instalar\u00e1 tanto el IDE como el Core. Estructura proyecto \u00b6 Cuando creamos un proyecto, podemos hacerlo por el IDE o con el CLI a trav\u00e9s de platformio init Se puede usar pio en lugar de platformio pio init Una vez tenemos el proyecto generado, tiene la siguiente estructura: .pioenvs -> Directorio que no se debe de tocar donde PIO guarda los build . include -> Directorio donde van los headers ( .h , .hpp ) del c\u00f3digo (si los hubiera). lib -> Directorio donde van las librer\u00edas privadas del proyecto (si las hubiera). src -> Directorio donde va o van los source ( .c , .cpp ) del c\u00f3digo. .gitignore -> Fichero .gitignore con la plantilla de PIO. .travis.yml -> Fichero para CI (Integraci\u00f3n Continua), es para usuarios avanzados. platformio.ini -> Fichero INI donde va la configuraci\u00f3n del proyecto. Ejemplo Blink \u00b6 Si hicieramos el t\u00edpico blink de Arduino, tendr\u00edamos que hacer en el IDE: Elegir nombre del proyecto Seleccionar la placa (Arduino UNO R3) Seleccionar el framework (Arduino) Desde el CLI har\u00edamos pio init --board uno El fichero platformio.ini tiene [env:uno] platform = atmelavr board = uno framework = arduino Solo debemos crear un fichero main.cpp dntro de src , con el c\u00f3digo #include \"Arduino.h\" // Set LED_BUILTIN if it is not defined by Arduino framework // #define LED_BUILTIN 13 void setup () { // initialize LED digital pin as an output. pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { // turn the LED on (HIGH is the voltage level) digitalWrite ( LED_BUILTIN , HIGH ); // wait for a second delay ( 1000 ); // turn the LED off by making the voltage LOW digitalWrite ( LED_BUILTIN , LOW ); // wait for a second delay ( 1000 ); } Primero lo compilamos para ver si tiene alg\u00fan error: IDE -> Con el bot\u00f3n de PlatformIO: Build CLI -> Con el comando pio run Conectamos la placa y le subimos el programa con: IDE -> Con el bot\u00f3n PlatformIO: Upload CLI -> Con el comando pio run -t upload platformio.ini \u00b6 TODO:","title":"Platformio"},{"location":"hw/platformio/platformio/#platformio","text":"TODO Crear c\u00f3digo para hardware embebido no es sumamente complicado. El problema mayor que hay es programar / cargar el programa en los chips: Necesitas ciertas configuraciones para cada chip. Unas herramientas que por lo general son de cada fabricante, cerradas, y que suelen dejar bastante que desear. Depende tambi\u00e9n de la placa que use el chip. Etc Platformio es un ecosistema Open Source, multiplataforma, pensado para evitar todo esto. Con \u00e9l podremos programar desde un Arduino, a un ARM, o alguna de las much\u00edsimas placas que soporta. Lo \u00fanico que necesita para funcionar es tener instalado Python 3 en el ordenador. Documentaci\u00f3n Oficial de Platformio -> aqu\u00ed","title":"Platformio"},{"location":"hw/platformio/platformio/#instalacion","text":"Platformio tiene varias herramientas, pero para nosotros, las podemos dividir en dos: Platformio Core (CLI) Es el n\u00facleo de todo. Con esto gestionamos y cargamos nuestro c\u00f3digo en los chips. Tiene una herramienta de comandos (CLI) muy \u00fatil. Platformio IDE Es una extensi\u00f3n / plugin que se le pone a entornos gr\u00e1ficos para poder usar Platformio Core de manera m\u00e1s sencilla. El IDE \"por defecto\" donde usarlo es Visual Studio Code. Documentaci\u00f3n oficial para su instalaci\u00f3n -> aqu\u00ed Nota: Si usas Linux, debes instalar las 99-platformio-udev.rules para que vaya mejor la detecci\u00f3n de placas. A partir de ahora nos referiremos a Platformio tambi\u00e9n como PIO, para abreviar. Si solo vamos a usar PIO Core, desde Python 2.7 hacemos pip install platformio Si quisieramos el PIO Ide, buscamos la extensi\u00f3n Platformio IDE en las extensiones de VSCode e instalar\u00e1 tanto el IDE como el Core.","title":"Instalaci\u00f3n"},{"location":"hw/platformio/platformio/#estructura-proyecto","text":"Cuando creamos un proyecto, podemos hacerlo por el IDE o con el CLI a trav\u00e9s de platformio init Se puede usar pio en lugar de platformio pio init Una vez tenemos el proyecto generado, tiene la siguiente estructura: .pioenvs -> Directorio que no se debe de tocar donde PIO guarda los build . include -> Directorio donde van los headers ( .h , .hpp ) del c\u00f3digo (si los hubiera). lib -> Directorio donde van las librer\u00edas privadas del proyecto (si las hubiera). src -> Directorio donde va o van los source ( .c , .cpp ) del c\u00f3digo. .gitignore -> Fichero .gitignore con la plantilla de PIO. .travis.yml -> Fichero para CI (Integraci\u00f3n Continua), es para usuarios avanzados. platformio.ini -> Fichero INI donde va la configuraci\u00f3n del proyecto.","title":"Estructura proyecto"},{"location":"hw/platformio/platformio/#ejemplo-blink","text":"Si hicieramos el t\u00edpico blink de Arduino, tendr\u00edamos que hacer en el IDE: Elegir nombre del proyecto Seleccionar la placa (Arduino UNO R3) Seleccionar el framework (Arduino) Desde el CLI har\u00edamos pio init --board uno El fichero platformio.ini tiene [env:uno] platform = atmelavr board = uno framework = arduino Solo debemos crear un fichero main.cpp dntro de src , con el c\u00f3digo #include \"Arduino.h\" // Set LED_BUILTIN if it is not defined by Arduino framework // #define LED_BUILTIN 13 void setup () { // initialize LED digital pin as an output. pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { // turn the LED on (HIGH is the voltage level) digitalWrite ( LED_BUILTIN , HIGH ); // wait for a second delay ( 1000 ); // turn the LED off by making the voltage LOW digitalWrite ( LED_BUILTIN , LOW ); // wait for a second delay ( 1000 ); } Primero lo compilamos para ver si tiene alg\u00fan error: IDE -> Con el bot\u00f3n de PlatformIO: Build CLI -> Con el comando pio run Conectamos la placa y le subimos el programa con: IDE -> Con el bot\u00f3n PlatformIO: Upload CLI -> Con el comando pio run -t upload","title":"Ejemplo Blink"},{"location":"hw/platformio/platformio/#platformioini","text":"TODO:","title":"platformio.ini"},{"location":"iot/iot/","text":"Internet of Things \u00b6 El Internet of Things, o Internet de las Cosaas, se refiere a M2M (Machine to Machine), es decir, m\u00e1quinas que hablan con m\u00e1quinas, pero usando Internet para comunicarse. El IIoT es el Industrial IoT y est\u00e1 relacionado con el t\u00e9rmino de Industria 4.0. B\u00e1sicamente el IoT ser\u00edan \"Cosas\", en este caso circuitos el\u00e9ctricos con sensores y actuadores, que interaccionan con programas - otras cosas - personas. La idea feliz de todo esto es que todo est\u00e9 conectado a Internet y poder monitorizar e interactuar con todo. Ya sea tu lavadora, un invernadero, o la iluminaci\u00f3n de una carretera. Arquitecturas \u00b6 Arquitecturas para el IoT habr\u00e1 miles distintas para cuando leas esto. Pero m\u00e1s o menos la \"b\u00e1sica\" para empezar se podr\u00eda dividir en 3 capas. Capa Caracter\u00edsticas Cloud - Es la capa m\u00e1s alta y los elementos de esta ser\u00edan servidores con aplicaciones web. - El n\u00famero de elementos es el menor a las capas inferiores. - Aplicaciones t\u00edpicas podr\u00edan ser: Plataformas de IoT como ThingsBoard , almacenamiento y procesamiento de datos (bases de datos), apps de backend, ... Fog - Es la capa intermedia y los elementos de esta se suelen llamar nodos. - Ser\u00edan un Cloud peque\u00f1ito, ya que Fog es niebla, que b\u00e1sicamente es una nube baja. - El n\u00famero de elementos es mayor a la capa Cloud pero inferior a la Edge. - Ser\u00edan como los servidores / gateways que interaccionan directamente con las things y el cloud. - Aplicaciones t\u00edpicas podr\u00edan ser Node-Red Edge - Es la capa m\u00e1s baja y los elementos son llamadas Things o cosas. - Est\u00e1 relacionada con el hardware / electr\u00f3nica que conecta con los sensores y actuadores. - Es la capa con mayor n\u00famero de elementos. - Aplicaciones t\u00edpicas podr\u00edan ser programaci\u00f3n de placas ESPxx de Espressif con el framework Arduino mediante ESPHome Una imagen de la arquitectura t\u00edpica ser\u00eda esta (la imagen ha sido sacada de esta web ) Las arquitecturas pueden cambiar mas o menos, como que no exista la capa Fog. Sea como sea la arquitectura, el tema es que estos proyectos (como cualquier otro) contienen una complejidad inherente. Donde se carga la complejidad depende del problema. Puede ser que la capa Edge tenga mucha complejidad, posibilitando que las capas superiores sean m\u00e1s livianas. Lo l\u00f3gico es que la capa Edge sea muy simple, y por ende barata, y de ah\u00ed se va subiendo en complejidad. Big Data e IoT Cuando la capa Edge genera mucha data, es probable que un proyecto de IoT derive en un proyecto de Big Data en la parte Cloud. Los proyectos de IoT son propensos a que la escalabilidad sea un factor cr\u00edtico. A tener en cuenta Hay m\u00e1s elementos que importan y no se mencionan, como es la seguridad. Paradigmas de Comunicaci\u00f3n \u00b6 Para leer Recomiendo leer este post de Luis Llamas. Las im\u00e1genes de esta secci\u00f3n son de all\u00ed de hecho. Al haber tal cantidad de dispositivos, distintos, y probablemente pensando en que se puedan a\u00f1adir / quitar elementos sin que afecte a toda la arquitectura, el t\u00edpico paradigma de comunicaci\u00f3n Cliente / Servidor no es el m\u00e1s adecuado. A partir de ahora el paradigma se cambia y habr\u00e1 una centralita (lo que entendemos por servidor) llamada Broker donde se conectan los clientes. Unos clientes publicar\u00e1n / producir\u00e1n la informaci\u00f3n y otros clientes se suscribir\u00e1n a ella o la consumir\u00e1n. Digamos que pasamos a una forma de trabajar dirigida por eventos. Los protocolos para trabajar sobre estos nuevos paradigmas no son TCP/UDP ni HTTP, son distintos (aunque usar\u00e1n esos por debajo). Los dos nuevos grandes paradigmas de comunicaci\u00f3n son: Message Service Message Queue La info que se manda al broker y si no se lee, se pierde / se sobreescribe. La info que se manda al broker se almacena en colas que seran vaciadas conforme se lean. Patrones \u00b6 Dentro de estos paradigmas, hay varios patrones de comunicaciones, pero los dos m\u00e1s conocidos son: PubSub (Publisher Subscriber) RPC (Remote Procedure Call) Digamos que en este patr\u00f3n los clientes estan desacoplados. El subscriber le dice al broker a que info se quiere subscribir. El publisher publica la info sin saber quien la lee ni cuando. Ser\u00eda comunicaci\u00f3n en un sentido solo. Ser\u00eda lo m\u00e1s parecido al antiguo paradigma Cliente / Servidor, solo que con un broker por medio. El cliente se llamar\u00eda caller y el servidor ser\u00eda el callee . El callee le dir\u00eda al broker que procedimientos suyos se pueden usar (ser\u00eda como el server exponiendo una API). El caller invoca un elemento del callee a trav\u00e9s del broker y recibe una respuesta. Vaya es como si ejecutaras una funci\u00f3n en un programa remoto y obtuvieras la respuesta. La comunicaci\u00f3n ahora ser\u00eda en dos sentidos, como en cliente / servidor, peticion - respuesta. Protocolos \u00b6 Protocolos de IoT m\u00e1s famosos son Protocolo Paradigma + Patron Protocolo base Detalles MQTT (Message Queue Telemetry Transport) Message Service + PubSub TCP - Err\u00f3neamente en el nombre pone MQ (de Queue), pero no usa colas, deber\u00eda ser MSTT (Message Service Telemetry Transport). - El m\u00e1s usado y casi el estandar en la capa Edge, porque es muy liviano. AMQP (Advanced Message Queuing Protocol) Message Queue + PubSub / RPC TCP - El m\u00e1s usado para comunicar servicios. - No es tan liviano como MQTT, por eso no se suele usar en la capa Edge, y funciona sobre TCP. STOMP (Streaming Text Oriented Messaging Protocol) Message Service + PubSub HTTP - Es parecido a MQTT pero funciona sobre HTTP, no TCP. - No ha cuajado, y se podr\u00eda decir que est\u00e1 en desuso. CoAP (Constrained Application Protocol) Cliente / Servidor UDP - Este protocolo lo menciono como protocolo de IoT pero no encaja mucho aqu\u00ed, ni tampoco parece que cuaje mucho. - Siempre se le pone como alternativa a MQTT, ya que AMQP se piensa para capas distintas. - Usa el modelo de API Rest, sobre UDP, con dispositivos con pocos recursos. - No hay broker, sino que los clientes se comunican entre ellos usando a los dem\u00e1s clientes como gateways. Warning No se tienen porqu\u00e9 usar solo uno, por ejemplo entre Edge-Fog podr\u00edas usar MQTT y entre Fog-Cloud o entre servicios de Cloud usar AMQP. De hecho si la cantidad de things y servicios en el cloud son muchos, puede ser que incluso necesites un broker para comunicar distintos brokers. Brokers \u00b6 Para Message Service el protocolo m\u00e1s usado es MQTT y se suele usar el broker Mosquitto . Para Message Queue el protocolo m\u00e1s usado es AMQP y se suele usar el broker RabbitMQ . Para cuando necesitas comunicar brokers entre si, se suele usar Apache Kafka . Para crearte tu propio broker con su propio paradigma se comunicaci\u00f3n, se suele usar la librer\u00eda ZeroMQ .","title":"Que es el IoT"},{"location":"iot/iot/#internet-of-things","text":"El Internet of Things, o Internet de las Cosaas, se refiere a M2M (Machine to Machine), es decir, m\u00e1quinas que hablan con m\u00e1quinas, pero usando Internet para comunicarse. El IIoT es el Industrial IoT y est\u00e1 relacionado con el t\u00e9rmino de Industria 4.0. B\u00e1sicamente el IoT ser\u00edan \"Cosas\", en este caso circuitos el\u00e9ctricos con sensores y actuadores, que interaccionan con programas - otras cosas - personas. La idea feliz de todo esto es que todo est\u00e9 conectado a Internet y poder monitorizar e interactuar con todo. Ya sea tu lavadora, un invernadero, o la iluminaci\u00f3n de una carretera.","title":"Internet of Things"},{"location":"iot/iot/#arquitecturas","text":"Arquitecturas para el IoT habr\u00e1 miles distintas para cuando leas esto. Pero m\u00e1s o menos la \"b\u00e1sica\" para empezar se podr\u00eda dividir en 3 capas. Capa Caracter\u00edsticas Cloud - Es la capa m\u00e1s alta y los elementos de esta ser\u00edan servidores con aplicaciones web. - El n\u00famero de elementos es el menor a las capas inferiores. - Aplicaciones t\u00edpicas podr\u00edan ser: Plataformas de IoT como ThingsBoard , almacenamiento y procesamiento de datos (bases de datos), apps de backend, ... Fog - Es la capa intermedia y los elementos de esta se suelen llamar nodos. - Ser\u00edan un Cloud peque\u00f1ito, ya que Fog es niebla, que b\u00e1sicamente es una nube baja. - El n\u00famero de elementos es mayor a la capa Cloud pero inferior a la Edge. - Ser\u00edan como los servidores / gateways que interaccionan directamente con las things y el cloud. - Aplicaciones t\u00edpicas podr\u00edan ser Node-Red Edge - Es la capa m\u00e1s baja y los elementos son llamadas Things o cosas. - Est\u00e1 relacionada con el hardware / electr\u00f3nica que conecta con los sensores y actuadores. - Es la capa con mayor n\u00famero de elementos. - Aplicaciones t\u00edpicas podr\u00edan ser programaci\u00f3n de placas ESPxx de Espressif con el framework Arduino mediante ESPHome Una imagen de la arquitectura t\u00edpica ser\u00eda esta (la imagen ha sido sacada de esta web ) Las arquitecturas pueden cambiar mas o menos, como que no exista la capa Fog. Sea como sea la arquitectura, el tema es que estos proyectos (como cualquier otro) contienen una complejidad inherente. Donde se carga la complejidad depende del problema. Puede ser que la capa Edge tenga mucha complejidad, posibilitando que las capas superiores sean m\u00e1s livianas. Lo l\u00f3gico es que la capa Edge sea muy simple, y por ende barata, y de ah\u00ed se va subiendo en complejidad. Big Data e IoT Cuando la capa Edge genera mucha data, es probable que un proyecto de IoT derive en un proyecto de Big Data en la parte Cloud. Los proyectos de IoT son propensos a que la escalabilidad sea un factor cr\u00edtico. A tener en cuenta Hay m\u00e1s elementos que importan y no se mencionan, como es la seguridad.","title":"Arquitecturas"},{"location":"iot/iot/#paradigmas-de-comunicacion","text":"Para leer Recomiendo leer este post de Luis Llamas. Las im\u00e1genes de esta secci\u00f3n son de all\u00ed de hecho. Al haber tal cantidad de dispositivos, distintos, y probablemente pensando en que se puedan a\u00f1adir / quitar elementos sin que afecte a toda la arquitectura, el t\u00edpico paradigma de comunicaci\u00f3n Cliente / Servidor no es el m\u00e1s adecuado. A partir de ahora el paradigma se cambia y habr\u00e1 una centralita (lo que entendemos por servidor) llamada Broker donde se conectan los clientes. Unos clientes publicar\u00e1n / producir\u00e1n la informaci\u00f3n y otros clientes se suscribir\u00e1n a ella o la consumir\u00e1n. Digamos que pasamos a una forma de trabajar dirigida por eventos. Los protocolos para trabajar sobre estos nuevos paradigmas no son TCP/UDP ni HTTP, son distintos (aunque usar\u00e1n esos por debajo). Los dos nuevos grandes paradigmas de comunicaci\u00f3n son: Message Service Message Queue La info que se manda al broker y si no se lee, se pierde / se sobreescribe. La info que se manda al broker se almacena en colas que seran vaciadas conforme se lean.","title":"Paradigmas de Comunicaci\u00f3n"},{"location":"iot/iot/#patrones","text":"Dentro de estos paradigmas, hay varios patrones de comunicaciones, pero los dos m\u00e1s conocidos son: PubSub (Publisher Subscriber) RPC (Remote Procedure Call) Digamos que en este patr\u00f3n los clientes estan desacoplados. El subscriber le dice al broker a que info se quiere subscribir. El publisher publica la info sin saber quien la lee ni cuando. Ser\u00eda comunicaci\u00f3n en un sentido solo. Ser\u00eda lo m\u00e1s parecido al antiguo paradigma Cliente / Servidor, solo que con un broker por medio. El cliente se llamar\u00eda caller y el servidor ser\u00eda el callee . El callee le dir\u00eda al broker que procedimientos suyos se pueden usar (ser\u00eda como el server exponiendo una API). El caller invoca un elemento del callee a trav\u00e9s del broker y recibe una respuesta. Vaya es como si ejecutaras una funci\u00f3n en un programa remoto y obtuvieras la respuesta. La comunicaci\u00f3n ahora ser\u00eda en dos sentidos, como en cliente / servidor, peticion - respuesta.","title":"Patrones"},{"location":"iot/iot/#protocolos","text":"Protocolos de IoT m\u00e1s famosos son Protocolo Paradigma + Patron Protocolo base Detalles MQTT (Message Queue Telemetry Transport) Message Service + PubSub TCP - Err\u00f3neamente en el nombre pone MQ (de Queue), pero no usa colas, deber\u00eda ser MSTT (Message Service Telemetry Transport). - El m\u00e1s usado y casi el estandar en la capa Edge, porque es muy liviano. AMQP (Advanced Message Queuing Protocol) Message Queue + PubSub / RPC TCP - El m\u00e1s usado para comunicar servicios. - No es tan liviano como MQTT, por eso no se suele usar en la capa Edge, y funciona sobre TCP. STOMP (Streaming Text Oriented Messaging Protocol) Message Service + PubSub HTTP - Es parecido a MQTT pero funciona sobre HTTP, no TCP. - No ha cuajado, y se podr\u00eda decir que est\u00e1 en desuso. CoAP (Constrained Application Protocol) Cliente / Servidor UDP - Este protocolo lo menciono como protocolo de IoT pero no encaja mucho aqu\u00ed, ni tampoco parece que cuaje mucho. - Siempre se le pone como alternativa a MQTT, ya que AMQP se piensa para capas distintas. - Usa el modelo de API Rest, sobre UDP, con dispositivos con pocos recursos. - No hay broker, sino que los clientes se comunican entre ellos usando a los dem\u00e1s clientes como gateways. Warning No se tienen porqu\u00e9 usar solo uno, por ejemplo entre Edge-Fog podr\u00edas usar MQTT y entre Fog-Cloud o entre servicios de Cloud usar AMQP. De hecho si la cantidad de things y servicios en el cloud son muchos, puede ser que incluso necesites un broker para comunicar distintos brokers.","title":"Protocolos"},{"location":"iot/iot/#brokers","text":"Para Message Service el protocolo m\u00e1s usado es MQTT y se suele usar el broker Mosquitto . Para Message Queue el protocolo m\u00e1s usado es AMQP y se suele usar el broker RabbitMQ . Para cuando necesitas comunicar brokers entre si, se suele usar Apache Kafka . Para crearte tu propio broker con su propio paradigma se comunicaci\u00f3n, se suele usar la librer\u00eda ZeroMQ .","title":"Brokers"},{"location":"iot/mqtt/mqtt/","text":"MQTT \u00b6 Lectura de ayuda chachi Referencia -> aqu\u00ed MQTT es un protocolo de mensajer\u00eda para IoT, que va montando sobre la capa TCP, pensado para comunicaciones M2M. Arquitectura \u00b6 Se compone de dos elementos, Broker y Clientes Broker Cliente Es el \u00fanico que sabe que cliente est\u00e1 suscrito a cada topic, luego los clientes son independientes. Puede almacenar mensajes hasta que los lea el o los suscriptores. Cada cliente abre una conexi\u00f3n MQTT con el broker (algo asi como un socket). Los hay de dos tipos: Publisher (manda mensajes) y Subscriber (recibe mensajes) Consiste en el patr\u00f3n Pub/Sub (publicaci\u00f3n / suscripci\u00f3n): Normalmente solo un cliente publica en un topic dentro del broker. Un cliente o varios le dicen al broker a que topic se suscriben. Imagen sacada de aqu\u00ed Mensajes \u00b6 Se env\u00edan mensajes as\u00edncronamente. Del publisher al broker y del broker a los subscribers. B\u00e1sicamente la conexi\u00f3n de un cliente con el broker, es un socket TCP. Pero se permite tambi\u00e9n la conexi\u00f3n sobre WebSockets. Se puede usar en p\u00e1ginas web Si usas MQTT sobre Websockets, entonces podr\u00e1s conectar una p\u00e1gina web por MQTT. AMQP no permite esto. Para nosotros, consisten solo en topic + payload . Topic Payload Ser\u00eda como el endpoint en cliente / servidor. Es el contenido del mensaje. Es de tipo de tipo String. Siendo rigurosos Tienen 3 partes: Encabezado fijo -> 2B (2 Bytes), es obligatorio Encabezado variable -> 4b (4 bits), no es obligatorio. Mensaje (payload) -> Hasta 2-4 kB (teoricamente hasta 256MB). Cada mensaje tiene tambi\u00e9n QoS, permitiendo informaci\u00f3n fiable (o no). Hay 3 grados de QoS: QoS 0 QoS 1 QoS 2 Enviar solo 1 vez. Puede que se pierda mensaje. Permite al menos 1 reenv\u00edo. Se garantiza entrega del mensaje, pero puede haber duplicidad. Llega 1 vez. Se garantiza que el mensaje llega 1 sola vez. \u00bfPorque no usamos solo QoS 2? A mayor calidad, menos rendimiento. Topic \u00b6 Un topic es el asunto / tema del mensaje. Van jerarquizados, separados por / y dentro de categor\u00edas. Definir un topic para tu tv del sal\u00f3n La thing ser\u00eda tv Est\u00e1 dentro de la categor\u00eda sal\u00f3n Esta a su vez en la categor\u00eda casa El topic podr\u00eda ser /casa/salon/tv Un cliente (o varios) se pueden suscribir a uno o varios topic. Existen dos operadores para ayudar a las suscripciones, + y # . Operador + Operador # Sustituye categor\u00edas / niveles intermedios /casa/+/tv equivale a suscribirse a todos los topic tv de /casa Sustituye categor\u00edas / niveles inferiores /casa/# equivale a Suscribirse a todos los topic de /casa Payload \u00b6 Es una cadena de texto o strings. Consejo: Mandar JSON Una buena estrategia es que tu payload sea un JSON. MQTT Explorer \u00b6 Se recomienda usar esta app para poder ver los topics y sus contenidos en un broker, ya sea mosquitto o no. MQTT Explorer est\u00e1 en Linux, Mac y Windows. Mosquitto \u00b6 Mosquitto es un broker Open Source y muy liviano para empezar. Si se deseara un broker m\u00e1s potente, se recomienda HiveMQ o VerneMQ . Broker \u00b6 Docker para levantar Mosquitto Levantar con un contenedor docker, para no tener que instalar nada. Toda la informaci\u00f3n de este contenedor est\u00e1 aqu\u00ed -> Contenedor eclipse-mosquitto Abajo hay lo m\u00ednimo para poder levantar un Mosquitto: Se pueda usar desde fuera del Localhost (Mosquitto 2 por defecto no lo deja, hay que habilitarlo). Se han abierto los puertos 1883 para mqtt y 9001 para mqtt sobre websockets. Se pueden ver los logs que sucedan en cada comunicaci\u00f3n. docker-compose.yml mosquitto.conf version : '3' services : broker : image : 'eclipse-mosquitto:2' restart : always ports : - '1883:1883' - '9001:9001' volumes : - './mosquitto/config:/mosquitto/config' - './mosquitto/data:/mosquitto/data' - './mosquitto/log:/mosquitto/log' # Poder conectar desde fuera del localhost allow_anonymous true per_listener_settings true # Listeners listener 1883 protocol mqtt listener 9001 protocol websockets # Log log_type all connection_messages true log_timestamp true log_timestamp_format %Y-%m-%dT%H:%M:%S websockets_log_level 0 Clientes \u00b6 Con Mosquitto se puede usar cualquier cliente MQTT. Pero Mosquitto cuenta con clientes CLI. Para instalarlos basta con sudo apt install mosquitto-clients Ahora abrimos 2 terminales en el cliente, uno para ser usado como publisher y otro suscriber Subscriber mosquitto_sub Publisher mosquitto_pub Comando para suscribirse a un topic: -h <broker> indica el host / ip del broker. -t <topic> indica el topic al que se va a suscribir. mosquitto_sub -h <broker> -t <topic> Comando para publicar en un topic: -h <broker> idem que antes. -t <topic> idem que antes. -m <mensaje> mensaje que se env\u00eda al topic (debe ir entre comillas dobles). mosquitto_pub -h <broker> -t <topic> -m <mensaje> Hola mundo \u00b6 Sup\u00f3n que tienes el broker en la ip 192.168.1.110 . Abre dos terminales, una para el subscriber y otra para el publisher. En el subscriber te vas a subscribir a todos los topics. Con la opci\u00f3n -v se puede ver a que topic procede el payload. Con el publisher vas publicar en el topic /casa/salon/temperatura el mensaje \"Hola mundo, hace 25\u00baC\" . Suscriber Publisher mosquitto_sub -v -h 192 .168.1.110 -t /casa/salon/temperatura mosquitto_pub -h 192 .168.1.110 -t /casa/salon/temperatura -m \"Hola mundo, hace 25\u00baC\"","title":"MQTT"},{"location":"iot/mqtt/mqtt/#mqtt","text":"Lectura de ayuda chachi Referencia -> aqu\u00ed MQTT es un protocolo de mensajer\u00eda para IoT, que va montando sobre la capa TCP, pensado para comunicaciones M2M.","title":"MQTT"},{"location":"iot/mqtt/mqtt/#arquitectura","text":"Se compone de dos elementos, Broker y Clientes Broker Cliente Es el \u00fanico que sabe que cliente est\u00e1 suscrito a cada topic, luego los clientes son independientes. Puede almacenar mensajes hasta que los lea el o los suscriptores. Cada cliente abre una conexi\u00f3n MQTT con el broker (algo asi como un socket). Los hay de dos tipos: Publisher (manda mensajes) y Subscriber (recibe mensajes) Consiste en el patr\u00f3n Pub/Sub (publicaci\u00f3n / suscripci\u00f3n): Normalmente solo un cliente publica en un topic dentro del broker. Un cliente o varios le dicen al broker a que topic se suscriben. Imagen sacada de aqu\u00ed","title":"Arquitectura"},{"location":"iot/mqtt/mqtt/#mensajes","text":"Se env\u00edan mensajes as\u00edncronamente. Del publisher al broker y del broker a los subscribers. B\u00e1sicamente la conexi\u00f3n de un cliente con el broker, es un socket TCP. Pero se permite tambi\u00e9n la conexi\u00f3n sobre WebSockets. Se puede usar en p\u00e1ginas web Si usas MQTT sobre Websockets, entonces podr\u00e1s conectar una p\u00e1gina web por MQTT. AMQP no permite esto. Para nosotros, consisten solo en topic + payload . Topic Payload Ser\u00eda como el endpoint en cliente / servidor. Es el contenido del mensaje. Es de tipo de tipo String. Siendo rigurosos Tienen 3 partes: Encabezado fijo -> 2B (2 Bytes), es obligatorio Encabezado variable -> 4b (4 bits), no es obligatorio. Mensaje (payload) -> Hasta 2-4 kB (teoricamente hasta 256MB). Cada mensaje tiene tambi\u00e9n QoS, permitiendo informaci\u00f3n fiable (o no). Hay 3 grados de QoS: QoS 0 QoS 1 QoS 2 Enviar solo 1 vez. Puede que se pierda mensaje. Permite al menos 1 reenv\u00edo. Se garantiza entrega del mensaje, pero puede haber duplicidad. Llega 1 vez. Se garantiza que el mensaje llega 1 sola vez. \u00bfPorque no usamos solo QoS 2? A mayor calidad, menos rendimiento.","title":"Mensajes"},{"location":"iot/mqtt/mqtt/#topic","text":"Un topic es el asunto / tema del mensaje. Van jerarquizados, separados por / y dentro de categor\u00edas. Definir un topic para tu tv del sal\u00f3n La thing ser\u00eda tv Est\u00e1 dentro de la categor\u00eda sal\u00f3n Esta a su vez en la categor\u00eda casa El topic podr\u00eda ser /casa/salon/tv Un cliente (o varios) se pueden suscribir a uno o varios topic. Existen dos operadores para ayudar a las suscripciones, + y # . Operador + Operador # Sustituye categor\u00edas / niveles intermedios /casa/+/tv equivale a suscribirse a todos los topic tv de /casa Sustituye categor\u00edas / niveles inferiores /casa/# equivale a Suscribirse a todos los topic de /casa","title":"Topic"},{"location":"iot/mqtt/mqtt/#payload","text":"Es una cadena de texto o strings. Consejo: Mandar JSON Una buena estrategia es que tu payload sea un JSON.","title":"Payload"},{"location":"iot/mqtt/mqtt/#mqtt-explorer","text":"Se recomienda usar esta app para poder ver los topics y sus contenidos en un broker, ya sea mosquitto o no. MQTT Explorer est\u00e1 en Linux, Mac y Windows.","title":"MQTT Explorer"},{"location":"iot/mqtt/mqtt/#mosquitto","text":"Mosquitto es un broker Open Source y muy liviano para empezar. Si se deseara un broker m\u00e1s potente, se recomienda HiveMQ o VerneMQ .","title":"Mosquitto"},{"location":"iot/mqtt/mqtt/#broker","text":"Docker para levantar Mosquitto Levantar con un contenedor docker, para no tener que instalar nada. Toda la informaci\u00f3n de este contenedor est\u00e1 aqu\u00ed -> Contenedor eclipse-mosquitto Abajo hay lo m\u00ednimo para poder levantar un Mosquitto: Se pueda usar desde fuera del Localhost (Mosquitto 2 por defecto no lo deja, hay que habilitarlo). Se han abierto los puertos 1883 para mqtt y 9001 para mqtt sobre websockets. Se pueden ver los logs que sucedan en cada comunicaci\u00f3n. docker-compose.yml mosquitto.conf version : '3' services : broker : image : 'eclipse-mosquitto:2' restart : always ports : - '1883:1883' - '9001:9001' volumes : - './mosquitto/config:/mosquitto/config' - './mosquitto/data:/mosquitto/data' - './mosquitto/log:/mosquitto/log' # Poder conectar desde fuera del localhost allow_anonymous true per_listener_settings true # Listeners listener 1883 protocol mqtt listener 9001 protocol websockets # Log log_type all connection_messages true log_timestamp true log_timestamp_format %Y-%m-%dT%H:%M:%S websockets_log_level 0","title":"Broker"},{"location":"iot/mqtt/mqtt/#clientes","text":"Con Mosquitto se puede usar cualquier cliente MQTT. Pero Mosquitto cuenta con clientes CLI. Para instalarlos basta con sudo apt install mosquitto-clients Ahora abrimos 2 terminales en el cliente, uno para ser usado como publisher y otro suscriber Subscriber mosquitto_sub Publisher mosquitto_pub Comando para suscribirse a un topic: -h <broker> indica el host / ip del broker. -t <topic> indica el topic al que se va a suscribir. mosquitto_sub -h <broker> -t <topic> Comando para publicar en un topic: -h <broker> idem que antes. -t <topic> idem que antes. -m <mensaje> mensaje que se env\u00eda al topic (debe ir entre comillas dobles). mosquitto_pub -h <broker> -t <topic> -m <mensaje>","title":"Clientes"},{"location":"iot/mqtt/mqtt/#hola-mundo","text":"Sup\u00f3n que tienes el broker en la ip 192.168.1.110 . Abre dos terminales, una para el subscriber y otra para el publisher. En el subscriber te vas a subscribir a todos los topics. Con la opci\u00f3n -v se puede ver a que topic procede el payload. Con el publisher vas publicar en el topic /casa/salon/temperatura el mensaje \"Hola mundo, hace 25\u00baC\" . Suscriber Publisher mosquitto_sub -v -h 192 .168.1.110 -t /casa/salon/temperatura mosquitto_pub -h 192 .168.1.110 -t /casa/salon/temperatura -m \"Hola mundo, hace 25\u00baC\"","title":"Hola mundo"},{"location":"iot/nodered/nodered/","text":"Node-Red \u00b6 Node-Red es una herramienta low-code pensada para programar flujos dirigidos por eventos. Documentaci\u00f3n oficial Foro para preguntar dudas Node-Red Library para buscar componentes, flujos y colecciones Github Docker Hub En una arquitectura IoT de 3 capas puede encajar muy bien en la capa Fog. Aunque hoy en d\u00eda la tecnolog\u00eda avanza tan r\u00e1pido que perfectamente podr\u00eda moverse a la capa Edge. Node-Red es un servicio Javascript, donde puedes inyectar eventos o generarlos, hacer algo con ese evento, y generar otros hacia afuera. Por ejemplo: Leer un sensor, procesar su informaci\u00f3n y mandarla a otro sitio. Recibir una petici\u00f3n web, procesarla y devolver el resultado. ... Cualquier cosa que se te pueda imaginar. La gracia est\u00e1 en que es una herramienta que mediante bloques, te permite definir y visualizar esos flujos de los eventos. Crear componentes \u00b6 Mirar aqu\u00ed -> link","title":"Que es Node-Red"},{"location":"iot/nodered/nodered/#node-red","text":"Node-Red es una herramienta low-code pensada para programar flujos dirigidos por eventos. Documentaci\u00f3n oficial Foro para preguntar dudas Node-Red Library para buscar componentes, flujos y colecciones Github Docker Hub En una arquitectura IoT de 3 capas puede encajar muy bien en la capa Fog. Aunque hoy en d\u00eda la tecnolog\u00eda avanza tan r\u00e1pido que perfectamente podr\u00eda moverse a la capa Edge. Node-Red es un servicio Javascript, donde puedes inyectar eventos o generarlos, hacer algo con ese evento, y generar otros hacia afuera. Por ejemplo: Leer un sensor, procesar su informaci\u00f3n y mandarla a otro sitio. Recibir una petici\u00f3n web, procesarla y devolver el resultado. ... Cualquier cosa que se te pueda imaginar. La gracia est\u00e1 en que es una herramienta que mediante bloques, te permite definir y visualizar esos flujos de los eventos.","title":"Node-Red"},{"location":"iot/nodered/nodered/#crear-componentes","text":"Mirar aqu\u00ed -> link","title":"Crear componentes"},{"location":"iot/nodered/custom-components/custom-components/","text":"Crear componentes \u00b6 Componente = nodo Decir componente o nodo, es pr\u00e1cticamente lo mismo. El componente digamos que ser\u00eda el concepto, el modelo, o la clase si hablaremos en un contexto de Programaci\u00f3n Orientada a Objetos. El nodo ser\u00eda una instancia, el objeto (en Programaci\u00f3n Orientada a Objetos), lo que usamos. Luego un componente (modelo) puede tener muchos nodos (instancias). Para crear componentes es necesario que esten en un repositorio para ser publicados como un paquete npm y luego a\u00f1adidos a la Node-Red library. Se pueden crear varios a la vez bajo el mismo paquete npm, sobre todo si quieres que se instalen juntos. Hay solo dos tipos de componentes: Tipo config Son componentes que solo se pueden llamar desde la configuraci\u00f3n de otros componentes. Normalmente contienen l\u00f3gica que necesita estar activa todo el rato, como una conexi\u00f3n mqtt por ejemplo. Los dem\u00e1s Son todos los componentes que se pueden poner en un flujo directamente. Cada componente se compone (vaya juego de palabras eh) de al menos 3 ficheros: <component-name>.html que indica toda la info que usa el componente. <component-name>.js que contiene toda la l\u00f3gica de funcionamiento del componente. package.json donde esta definido como paquete npm. Puede tener un icono, as\u00ed que se recomienda a\u00f1adir la carpeta icons en el mismo nivel de la jerarqu\u00eda de ficheros. Ejemplo de estructura del repositorio package.json src / -> C\u00f3digo de los componentes icons / -> Iconos de los componentes resources/ -> Recursos que necesiten los componentes, como im\u00e1genes, ficheros extra JS, etc component-name1.html component-name1.js component-name2.html component-name2.js ... tests/ -> Tests de cada componente component-name1_spec.js component-name2_spec.js examples/ -> Flujos de ejemplo de cada componente example-component-name1.json example-component-name2.json ... Resumen muy simplificado de como crear un componente \u00b6 Crea el Fichero HTML con al menos la Definition y el Edit Dialog (el Help Text es opcional). Pon especial foco en las propiedades del nodo -> defaults del Definition Genera en el Edit Dialog la forma de configurar esas propiedades del defaults Crea el Fichero JS y recuerda que el par\u00e1metro de entrada son los defaults de la Definition del Fichero HTML En el package.json a\u00f1ade la secci\u00f3n de node-red y especif\u00edca donde est\u00e1 el Fichero JS . Componentes juntos o separados Puedes crear todos los componentes en un solo par de Fichero HTML + Fichero JS . No habr\u00eda ning\u00fan problema ya que cada secci\u00f3n debe de tener un identificador \u00fanico para cada componente. Personalmente yo recomendar\u00eda que fuesen en ficheros separados, para poder estructurar mejor todo. Pero tu decides, is up to you. Fichero HTML \u00b6 El Fichero HTML indica de que se compone el nodo, como se configura, y dem\u00e1s. Este se divide en tres partes: Definition -> Definici\u00f3n Edit dialog -> Configuraci\u00f3n Help text -> Informaci\u00f3n Referenciar el componente en distintos sitios Para referirnos tanto en el fichero HTML como en el JS al mismo nodo, el identificador tiene que ser el mismo . En el siguiente ejemplo hay que tener claro que component-name es el identificador \u00fanico que va a tener el componente tanto en este fichero, como en el fichero Javascript. <!-- Definition in JS --> < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition }) </ script > <!-- Edit dialog in HTML --> < script type = \"text/html\" data-template-name = \"component-name\" > </ script > <!-- Help text in Markdown or HTML --> < script type = \"text/markdown\" data-help-name = \"component-name\" > </ script > Definition (Definici\u00f3n) \u00b6 La Definici\u00f3n es un objeto JS dentro del RED.nodes.registerType('component-name', { /* This is the definition */ } ) Tip Componente tipo config -> category: 'config' Componente normal -> category: 'lo-que-sea' Este objeto contiene los siguientes campos. Definici\u00f3n Propiedad Tipo Descripci\u00f3n category string Categor\u00eda que aparece en la Paleta defaults object Propiedades del nodo para el Fichero JS y tambi\u00e9n del Edit Dialog credentials object Credenciales del nodo inputs number Entradas, solo 0 o 1 outputs number Salidas, 0 o m\u00e1s icon string Icono color string Color de fondo label string - function Etiqueta para el Panel paletteLabel string - function Etiqueta para la Paleta labelStyle string - function Estilos para la etiqueta del Panel inputLabels string - function \u00a1Opcional! Etiqueta para el hover el puerto de entrada outputLabels string - function \u00a1Opcional! Etiqueta para el hover de los puestos de salida align string Alineamiento del icono y la etiqueta button object A\u00f1adir un bot\u00f3n al final (como en el TypedInput - JSON) oneditprepare function Llamada cuando se est\u00e1 construyendo el Edit Dialog oneditsave function Llamada cuando se aprieta el bot\u00f3n Save en el Edit Dialog oneditcancel function Llamada cuando se aprieta el bot\u00f3n Cancel en el Edit Dialog oneditdelete function Llamada cuando se borra algo de la configuraci\u00f3n del nodo en el Edit Dialog oneditresize function Llamada cuando se cambia el tama\u00f1ao del Edit Dialog onpaletteadd function Llamada cuando se a\u00f1ade el tipo del m\u00f3dulo a la Paleta onpaletteremove function Llamada cuando se quita el tipo del m\u00f3dulo de la Paleta Edit Dialog (Configuraci\u00f3n) \u00b6 La parte de Confifguraci\u00f3n es para el cuadro de configuraci\u00f3n del componente o Edit Dialog . Es una secci\u00f3n HTML que tiene que tener el atributo data-template-name . < script type = \"text/html\" data-template-name = \"node-type\" > <!-- edit dialog content --> </ script > Normalmente se compone de una serie de rows . Cada una de estas es un elemento <div class=\"form-row\"> donde cada una de estas contiene un <label> (para el nombre del de la propiedad a configurar) y otro elemento para introducir el valor que va a tener esa propiedad, como por ejemplo un <input> . Identificar propiedades Para comunicar esto con la Definici\u00f3n (propiedad del objeto defaults ) as\u00ed como el fichero Javascript (objeto de entrada en la funci\u00f3n del nodo), se tiene que poner cada id como node-input-<property> . Por ejemplo si el nodo va a tener una propiedad name , aqu\u00ed se debe de poner id=\"node-input-name\" , < div class = \"form-row\" > < label for = \"node-input-name\" >< i class = \"fa fa-tag\" ></ i > Name </ label > < input type = \"text\" id = \"node-input-name\" placeholder = \"Name\" > </ div > Si se quiere introducir un icono, hay que usar <i> con los iconos de Font Awesome 4.7 . Para insertar el dato, Node-Red te provee distintos widgets para usar; Buttons \u00b6 Los buttons necesitan usar la clase red-ui-button y luego a\u00f1adir alguna m\u00e1s para modificar el tipo de UI. El toggle button requiere que adem\u00e1s se a\u00f1ada l\u00f3gica a la parte de Definici\u00f3n Button Small Button Toggle Button group < button type = \"button\" class = \"red-ui-button\" > Button </ button > < button type = \"button\" class = \"red-ui-button red-ui-button-small\" > Button </ button > Nota Es probable que la parte de HTML del <span></span> tenga que ir todo en una l\u00ednea y sin espacios en blanco entre medias, porque sino Node-Red no sabe renderizarlo. Configuraci\u00f3n < span class = \"button-group\" > < button type = \"button\" class = \"red-ui-button toggle selected my-button-group\" > b1 </ button > < button type = \"button\" class = \"red-ui-button toggle my-button-group\" > b2 </ button > < button type = \"button\" class = \"red-ui-button toggle my-button-group\" > b3 </ button > </ span > Definici\u00f3n $ ( \".my-button-group\" ). on ( \"click\" , function () { $ ( \".my-button-group\" ). removeClass ( \"selected\" ); $ ( this ). addClass ( \"selected\" ); }) Inputs \u00b6 Al igual que con los <button> , hay <input> tuneados, pero esos no depende de una clase, sino que son un tipo especial que son los TypedInput que tienen su propia API -> TypedInput API . Input TypedInput -> String/Number/Boolean TypedInput -> JSON TypedInput -> msg/flow/global TypedInput -> Select box TypedInput -> Multiple Select box < input type = \"text\" id = \"node-input-name\" > Cuando el TypedInput puede tener distintos tipos de valores, hay que a\u00f1adir el segundo elemento hidden para poder almacenar que tipo contiene. Configuraci\u00f3n < input type = \"text\" id = \"node-input-example1\" > < input type = \"hidden\" id = \"node-input-example1-type\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example1\" ). typedInput ({ type : \"str\" , types : [ \"str\" , \"num\" , \"bool\" ], typeField : \"#node-input-example1-type\" }) Configuracion < input type = \"text\" id = \"node-input-example2\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example2\" ). typedInput ({ type : \"json\" , types : [ \"json\" ] }) Configuracion < input type = \"text\" id = \"node-input-example3\" > < input type = \"hidden\" id = \"node-input-example3-type\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example3\" ). typedInput ({ type : \"msg\" , types : [ \"msg\" , \"flow\" , \"global\" ], typeField : \"#node-input-example3-type\" }) Configuracion < input type = \"text\" id = \"node-input-example4\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example4\" ). typedInput ({ types : [ { value : \"fruit\" , options : [ { value : \"apple\" , label : \"Apple\" }, { value : \"banana\" , label : \"Banana\" }, { value : \"cherry\" , label : \"Cherry\" }, ] } ] }) El resultado de un multi-select es una lista separada por comas con lo seleccionado. Configuracion < input type = \"text\" id = \"node-input-example5\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example5\" ). typedInput ({ types : [ { value : \"fruit\" , multiple : \"true\" , options : [ { value : \"apple\" , label : \"Apple\" }, { value : \"banana\" , label : \"Banana\" }, { value : \"cherry\" , label : \"Cherry\" }, ] } ] }) Multi-line Text Editor \u00b6 El editor de texto multil\u00ednea es un widget sacado del editor Monaco o Ace (dependiendo cual tengas activado en las settings). Para generarlo debes usar <div class=\"node-text-editor\" id=\"editor-id\"></div> , pero deber\u00edas de a\u00f1adirle unas dimensiones para que no se vaya de madre. Se inicializa con el oneditprepare de la Definici\u00f3n y con oneditsave y oneditcancel obtienes el valor cuando se cierra el editor. Configuraci\u00f3n < div style = \"height: 250px; min-height:150px;\" class = \"node-text-editor\" id = \"node-input-example-editor\" ></ div > Definici\u00f3n oneditprepare : function () { this . editor = RED . editor . createEditor ({ id : 'node-input-example-editor' , mode : 'ace/mode/text' , value : this . exampleText }); }, oneditsave : function () { this . exampleText = this . editor . getValue (); this . editor . destroy (); delete this . editor ; }, oneditcancel : function () { this . editor . destroy (); delete this . editor ; }, Help Text (Informaci\u00f3n) \u00b6 La parte de Informaci\u00f3n es para la documentaci\u00f3n que se puede ver desde el editor, en la pesta\u00f1a de informaci\u00f3n. Es un <script></script> HTML o Markdown que tiene que tener el atributo data-help-name . HTML Markdown <!-- Documentaci\u00f3n --> < script type = \"text/html\" data-help-name = \"component-name\" > < p > Esto va a ser el tooltip que aparezca cuando haces < code > hover < /code> con el rat\u00f3n sobre el componente</p> <!-- HTML Documentaci\u00f3n --> </ script > <!-- Documentaci\u00f3n --> < script type = \"text/markdown\" data-help-name = \"component-name\" > Esto va a ser el tooltip que aparezca cuando haces < code > hover < /code> con el rat\u00f3n sobre el componente <!-- Markdown Documentaci\u00f3n --> </ script > La estructura es m\u00e1s o menos la siguiente: Un p\u00e1rrafo corto que describa el componente -> Esto servir\u00e1 de tooltip cuando se haga hover con el rat\u00f3n. Secci\u00f3n de Inputs Secci\u00f3n de Outputs Secci\u00f3n de Details Secci\u00f3n de References Notas a tener en cuenta Markdown es mucho m\u00e1s sencillo / menos verboso Cuando vayas a referirte a una propiedad de msg y no a ser dentro de una lista espec\u00edficara para eso, usa <code></code> . No uses <b> , <i> y otro etiquetas de marcado que no se describan m\u00e1s abajo. Secciones \u00b6 Cada secci\u00f3n se marca con un t\u00edtulo 3 <h3> y las subsecciones con t\u00edtulo 4 (o inferior) <h4> . HTML Markdown < h3 > Seccion </ h3 > < h4 > Subsecci\u00f3n </ h4 > ### Secci\u00f3n #### Subsecci\u00f3n Propiedades del msg \u00b6 Para definir las propiedades del mensaje, hay que usar <dl class=\"message-properties\"> . Por cada propiedad debe de haber un par de elementos <dt> y <dd> Cada <dt> contiene el nombre de la propiedad y opcionalmente un <span class=\"property-type\"> con el tipo. Si la propiedad es opcional se pone como <dt class=\"optional\"> El <dd> solo contiene una breve descripci\u00f3n Resultado HTML Markdown < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string | buffer </ span > </ dt > < dd > the payload of the message to publish. </ dd > < dt class = \"optional\" > topic < span class = \"property-type\" > string </ span > </ dt > < dd > the MQTT topic to publish to. </ dd > </ dl > : payload (string | buffer) : the payload of the message to publish. : *topic* (string) : the MQTT topic to publish to. M\u00e1s de una salida \u00b6 Si el componente solo tiene una salida, solo debe de llevar el elemento <dl> como en el punto anterior. Per si tiene m\u00e1s de una salida, esa lista debe de ir envuelta con un elemento <ol class=\"node-ports\"> . Ahora cada elemento de la lista debe ir con su correspondiente <dl> . Resultado HTML Markdown < ol class = \"node-ports\" > < li > Standard output < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string </ span ></ dt > < dd > the standard output of the command. </ dd > </ dl > </ li > < li > Standard error < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string </ span ></ dt > < dd > the standard error of the command. </ dd > </ dl > </ li > </ ol > 1. Standard output : payload (string) : the standard output of the command. 2. Standard error : payload (string) : the standard error of the command. Ejemplo completo con todo \u00b6 Resultado Ejemplo completo Markdown Ejemplo completo HTML < script type = \"text/markdown\" data-help-name = \"node-type\" > Connects to a MQTT broker and publishes messages . ### Inputs : payload ( string | buffer ) : the payload of the message to publish . : * topic * ( string ) : the MQTT topic to publish to . ### Outputs 1. Standard output : payload ( string ) : the standard output of the command . 2. Standard error : payload ( string ) : the standard error of the command . ### Details `msg.payload` is used as the payload of the published message . If it contains an Object it will be converted to a JSON string before being sent . If it contains a binary Buffer the message will be published as - is . The topic used can be configured in the node or , if left blank , can be set `msg.topic` . Likewise the QoS and retain values can be configured in the node or , if left blank , set by `msg.qos` and `msg.retain` respectively . ### References - [ Twitter API docs ]() - full description of `msg.tweet` property - [ GitHub ]() - the nodes github repository </ script > < script type = \"text/html\" data-help-name = \"node-type\" > < p > Connects to a MQTT broker and publishes messages . < /p> < h3 > Inputs < /h3> < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string | buffer < /span> < /dt> < dd > the payload of the message to publish . < /dd> < dt class = \"optional\" > topic < span class = \"property-type\" > string < /span></dt> < dd > the MQTT topic to publish to . < /dd> < /dl> < h3 > Outputs < /h3> < ol class = \"node-ports\" > < li > Standard output < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string < /span></dt> < dd > the standard output of the command . < /dd> < /dl> < /li> < li > Standard error < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string < /span></dt> < dd > the standard error of the command . < /dd> < /dl> < /li> < /ol> < h3 > Details < /h3> < p >< code > msg . payload < /code> is used as the payload of the published message. If it contains an Object it will be converted to a JSON string before being sent . If it contains a binary Buffer the message will be published as - is . < /p> < p > The topic used can be configured in the node or , if left blank , can be set by < code > msg . topic < /code>.</p> < p > Likewise the QoS and retain values can be configured in the node or , if left blank , set by < code > msg . qos < /code> and <code>msg.retain</code> respectively.</p> < h3 > References < /h3> < ul > < li >< a > Twitter API docs < /a> - full description of <code>msg.tweet</code> property</li> < li >< a > GitHub < /a> - the nodes github repository</li> < /ul> </ script > Fichero JS \u00b6 El Fichero JS indica el comportamiento del componente cuando est\u00e1 en funcionamiento. Para crear un componente el esqueleto es como el que sigue: Hay que exportar una funci\u00f3n que reciba como par\u00e1metro el objeto global / runtime, Node-Red (en el ejemplo, RED ). Luego tiene que haber una funci\u00f3n donde se le va a pasar como argumento su configuraci\u00f3n proveniente del Fichero HTML (el config en el ejemplo). Luego lo siguiente que hay que hacer es cargar el this con su configuraci\u00f3n a trav\u00e9s de RED.Nodes.createNode() Despu\u00e9s vendr\u00eda la l\u00f3gica del componente. Por \u00faltimo, fuera de la funci\u00f3n del m\u00f3dulo, hay que registrar el identificador del componente (el string usado en el Fichero HTML) con la funci\u00f3n creada a trav\u00e9s de RED.nodes.registerType() Esqueleto de un componente en JS module . exports = function ( RED ) { function SampleNode ( config ) { RED . nodes . createNode ( this , config ); // component logic } RED . nodes . registerType ( \"sample\" , SampleNode ); } Renombrar el this Una pr\u00e1ctica com\u00fan dentro de la l\u00f3gica del componente es renombrar el this como node , para saber que te refieres al nodo const node = this ; Para las subsecciones siguientes, si ves node piensa que es el this . Leer y enviar mensajes \u00b6 Para leer mensajes, hay que habilitar el evento de input y pasarle una funci\u00f3n listener 3 par\u00e1metros: El primero es el mensaje de entrada. El segundo es la funci\u00f3n para enviar el mensaje. El tercero es un parametro opcional, que sirve para terminar el env\u00edo si el m\u00f3dulo env\u00eda mensajes as\u00edncronamente. node . on ( 'input' , function ( msg , send , done ) { // do something with 'msg' // Once finished, call 'done'. // This call is wrapped in a check that 'done' exists // so the node will work in earlier versions of Node-RED (<1.0) if ( done ) { done (); } }); En cambio para enviar mensajes tienes dos opciones: Que no dependan de las entradas -> Se mandan directamente Que dependan de las entradas -> Hay que mandarlas a trav\u00e9s de la funci\u00f3n listener anterior. const node = this ; // Salida que no depende de la entrada const msg = { payload : \"salida sin entrada\" } node . send ( msg ); // Salida que depende de la entrada node . on ( 'input' , function ( msg , send , done ) { // Comprobar que existe la funci\u00f3n send para retrocompatibilidades de Node-Red send = send || function () { node . send . apply ( node , arguments ) } // Preparar el mensaje msg . payload = \"salida con entrada\" ; send ( msg ); // Acabar el env\u00edo if ( done ) { done (); } }); Independientemente de como sean las salidas (dependiente de entradas o no), hay que tener en cuenta que Node-Red permite tener m\u00faltiple salidas y m\u00faltiples mensajes M\u00e1s de una salida -> node.send([msg1, msg2, msg3]) Mas de un mensaje por salida -> node.send([msg1, [msg2A, msg2B], msg3]) Si tu salida depende de la entrada, y solo vas a modificar el mensaje, procura reenviar el objeto msg modificado y no crear uno nuevo. Si el msg es null , aunque llames a send(msg) , este no se enviar\u00e1. Trabajar con contexto \u00b6 Como ya sabr\u00e1s, en Node-Red puedes trabajar con 3 tipos de contextos: Contexto del Nodo -> Objeto context en los nodos function : Es la informaci\u00f3n almacenada en el nodo. Contexto del Flujo -> Objeto flow en los nodos function : Es la informaci\u00f3n almacenada en el flujo. Contexto Global -> Objeto global en los nodos function : Es la informaci\u00f3n almacenada global. Para poder usar esto desde el Fichero JS es tan sencillo como usar: node.context() -> Contexto del nodo node.context().flow -> Contexto del Flow node.context().global -> Contexto Global Cada uno de los contextos tienen sus funciones t\u00edpicas set / get para guardar y leer informaci\u00f3n. // Node const nodeContext = this . context (); nodeContext . set ( 'data' , 1 ) node . log ( nodecontext . get ( 'data' )) // Flow const flowContext = this . context (). flow ; flowContext . set ( 'data' , 'say h' ) node . log ( flowContext . get ( 'data' )) // Global const globalContext = this . context (). global ; globalContext . set ( 'data' , { hi : 'hello' }) node . log ( globalContext . get ( 'data' )) Componententes config y contexto Los nodos de configuraci\u00f3n que son utilizados y son compartidos por otros nodos, son globales por defecto. A menos que el usuario del nodo especifique lo contrario. En tal caso, no se puede suponer que tengan acceso al contexto del Flow. Logging y gesti\u00f3n de errores \u00b6 Para poder tener mensajes de logs, el propio componente nos provee ya de estas funciones: // Since Node-RED 0.17 node . trace ( \"Log para comprobar cosas internas en el desarrollo, no para producci\u00f3n\" ); node . debug ( \"Log para detalles de debuggear el nodo, no para producci\u00f3n\" ); // Before Node-RED 0.17 node . log ( \"Log de informaci\u00f3n\" ); node . warn ( \"Log de warning para advertir que algo posiblemente malo est\u00e1 pasando\" ); node . error ( \"Log de errores\" ); Tambi\u00e9n se pueden propagar errores para ser estudiados desde el Flow posteriormente. Para ello hay que pasar el error a la funci\u00f3n done() , pero por retrocompatibilidad, si esta funci\u00f3n no existe, hay que usar node.error() . let node = this ; node . on ( 'input' , function ( msg , send , done ) { // do something with 'msg' // If an error is hit, report it to the runtime if ( err ) { if ( done ) { // Node-RED 1.0 compatible done ( err ); } else { // Node-RED 0.x compatible node . error ( err , msg ); } } }); Status \u00b6 Se puede definir el status del componente, sobre todo como ayuda visual en el Flow : para ver si est\u00e1 conectado, desconectado, etc. El status es m\u00e1s importante de lo que crees El status del componente no solo es algo visual para el editor. El estado de un componente se puede capturar con el componente Status que te permite averiguar si por ejemplo un componente concreto ha perdido la conexi\u00f3n, o se ha conectado. Ponle especial cari\u00f1o al estado de tu componente Para setearlo hay que usar la funci\u00f3n status() y pasarle un objeto que contenga Propiedad Valor Descripci\u00f3n shape ring - dot Forma con la que mostrar el status fill red - green - yellow - blue - grey Color con el que mostrar el status text Texto a mostrar en el status Ejemplos de status node . status ({ shape : \"ring\" , fill : \"red\" , text : \"disconnected\" }); // ... node . status ({ shape : \"dot\" , fill : \"green\" , text : \"connected\" }); Cerrando el componente \u00b6 Cada vez que se hace un nuevo deploy de los flujos, todos los componentes se borran. Luego es importante que si nuestro componente almacena alg\u00fan estado / conexi\u00f3n / event listener, sea removido antes de borrar el componente. Para esto hay que usar otra funci\u00f3n listener para el evento close . Dependiendo de como funcione el nodo, esta funci\u00f3n tiene m\u00e1s o menos parametros: Nodo s\u00edncrono: No tiene ningun par\u00e1metro Nodo s\u00edncrono: Tiene como par\u00e1metro la funci\u00f3n done Nodo s\u00edncrono desde Node-Red 0.17: Tiene como par\u00e1metros una variable booleana que indica si ha sido deshabilitado ya o no y la funci\u00f3n done de antes. Nodo s\u00edncrono Nodo as\u00edncrono Nodo as\u00edncrono desde Node-Red 0.17 node . on ( 'close' , function () { // tidy up any state }); this . on ( 'close' , function ( done ) { doSomethingWithACallback ( function () { done (); }); }); node . on ( 'close' , function ( removed , done ) { if ( removed ) { // This node has been disabled/deleted } else { // This node is being restarted } done (); }); OJO con los componentes as\u00edncronos Si el componente es as\u00edncrono y no se llama a la funci\u00f3n done hay problemas : Antiguamente esperaba 15 segundos , y si no se hab\u00eda llamado, se lanzaba el error y se reiniciaba el flujo . Ahora se queda esperando indefinidamente , lo que bloquear\u00eda todo tu Node-Red . package.json \u00b6 Antes se publicaban los paquetes como node-red-contrib-<paquete> . Pero ahora debe ser @<scope>/<paquete> o en su defecto @<scope>/node-red-<paquete> : @<scope> el usuario / organizacion / grupo con el que se va a publicar el paquete. <paquete> es el nombre del paquete. El fichero package.json est\u00e1 en la parte m\u00e1s alta del repositorio y se trabaja con \u00e9l como con cualquier paquete npm. Lo que hay que tener en cuenta para definir los componentes es que se tiene que a\u00f1adir el apartado \"node-red\" : \"version\" : Indica la versi\u00f3n m\u00ednima de Node-Red que soportan los componentes \"nodes\" : Indica los componentes que hay en el paquete y se apunta al fichero .js del componente. package.json { \"name\" : \"@<scope>/node-red-<paquete>\" , \"version\" : \"0.0.1\" , \"description\" : \"A sample node for node-red\" , \"dependencies\" : {}, \"keywords\" : [ \"node-red\" ], \"node-red\" : { \"version\" : \">=2.0.0\" , \"nodes\" : { \"component-name1\" : \"src/component-name1/component-name1.js\" , \"component-name2\" : \"src/component-name2/component-name2.js\" , ... } } } Propiedades del Nodo \u00b6 Las propiedades de un nodo se definen de la forma siguiente: Fichero HTML -> Definition -> defaults -> Se indican las propiedades que tiene el node (valor por defecto, tipo, etc). Fichero HTML - Definition defaults : { name : { value : \"\" }, prefix : { value : \"\" } }, Fichero HTML -> Edit Dialog -> Se crean los componentes HTML con el id=\"node-input-<property>\" para poder configurar cada una de las propiedades. Fichero HTML - Edit Dialog < div class = \"form-row\" > < label for = \"node-input-prefix\" >< i class = \"fa fa-tag\" ></ i > Prefix </ label > < input type = \"text\" id = \"node-input-prefix\" > </ div > Fichero JS -> En el par\u00e1metro de entrada de la funci\u00f3n (en los ejemplos config ), ese es el objeto con las propiedades ya configuradas por el usuario en el Edit Dialog . Fichero JS function ExampleNode ( config ) { RED . nodes . createNode ( this , config ); this . prefix = config . prefix ; var node = this ; this . on ( 'input' , function ( msg ) { msg . payload = node . prefix + msg . payload . toLowerCase (); node . send ( msg ); }); } Propiedades en el Fichero HTML - Definition \u00b6 Las propiedades configurables por el usuario se definen dentro del defaults . Hay algunas que estan reservadas y no se pueden usar: Propiedades con un \u00fanico car\u00e1cter (Node-Red si que usa estas internamente x , y , z , d , g , l ) Palabras reservadas id , type , wires , inputs . La palabra outputs es reservada, pero si se pone permite que el usuario pueda editar el n\u00famero de salidas Cada una de estas propiedades dentro del defaults es un objeto con las siguientes propiedades: Propiedad Tipo Opcional Descripci\u00f3n value any Valor por defecto required boolean x Si el par\u00e1metro es obligatorio ( false por defecto) validate function x Funci\u00f3n para validar que el valor es correcto (Node-Red por defecto tiene varias como RED.validators.number() o RED.validators.regex() ) type string x Si necesita usar un nodo de tipo configuraci\u00f3n para funcionar, hay que especificar aqu\u00ed el identificador Para validar las propiedades , aparte del required , existe el campo validate . Este permite pasar un una funci\u00f3n que devuelva un boolean para validar que se cumpla que el dato sea como tiene que ser. Node-Red por defecto te da dos (hay otra extra, pero ese no hace falta usarlo, es para los TypedInput ) RED.validators.number() comprueba que el valor de la propiedad sea un n\u00famero. RED.validators.regex() comprueba que el valor cumpla una expresi\u00f3n regular. Un ejemplo podr\u00eda ser este defaults : { minimumLength : { value : 0 , validate : RED . validators . number () }, lowerCaseOnly : { value : \"\" , validate : RED . validators . regex ( /[a-z]+/ ) }, custom : { value : \"\" , validate : function ( v ) { const minimumLength = $ ( \"#node-input-minimumLength\" ). length ? $ ( \"#node-input-minimumLength\" ). val () : this . minimumLength ; return v . length > minimumLength } } }, Las dem\u00e1s propiedades que no van en defaults son para definir como es el componente. Aunque si se necesita modificar el comportamiento por defecto, tambi\u00e9n se puede customizar usando las propiedades. Estas son propiedades de tipo funci\u00f3n, donde se les pasa una funci\u00f3n para que sea ejecutada en cierto momento. oneditprepare : Es llamada inmediatamente antes de renderizar / mostrar el Edit Dialog . oneditsave : Es llamada despu\u00e9s de darle a Done (guardar) en el Edit Dialog . oneditcancel : Es llamada despu\u00e9s de darle a Cancel (cancelar) en el Edit Dialog . oneditdelete : Es llamada despu\u00e9s de darle a Delete (borrar) en el Edit Dialog . oneditresize : Es llamada cuando se redimensiona el Edit Dialog . Puedes comprobar los campos, a\u00f1adir opciones al UI del Edit Dialog, etc. Un ejemplo es el m\u00f3dulo Inject que cambia la UI cuando le das alg\u00fan tipo de frecuencia a la inyecci\u00f3n. Puedes mirar el c\u00f3digo para ver como usa estas funciones: oneditprepare -> c\u00f3digo oneditsave -> c\u00f3digo Propiedades en el Fichero HTML - Edit Dialog \u00b6 Cuando se abre el Edit Dialog , el editor busca que haya por cada elemento del defaults , un <input> que contenga un id : id=\"node-input-<property>\" para propiedades normales. id=\"node-input-config-property>\" para propiedades que corresponden a nodos de tipo configuraci\u00f3n. Cada uno de estos <input> son configurados al valor por defecto que tienen en el defaults . Propiedades en el Fichero JS \u00b6 Cada componente en el Fichero JS recibe un par\u00e1metro de entrada, normalmente se llama config en la docu oficial. Esto es as\u00ed porque realmente lo es. Esa configuraci\u00f3n es un objeto que contiene las propiedades mencionadas en el defaults de la Definition y configuradas en el Edit Dialog. Propiedades en el settings.js \u00b6 Tambi\u00e9n se pueden exponer propiedades del nodo en el settings.js pero para eso se necesita que se sigan unas reglas: El nodo debe de no requerir que el usuario lo configure -> Luego tiene que tener un valor por defecto. El nombre de la propiedad en el settings.js debe tener como prefijo el identificador del nodo. El nombre debe ir en camelCase. Ejemplo f\u00e1cil: En mi nodo sample-node quiero poder editar la propiedad colour . En el settings.js tengo que definir la propiedad como sampleNodeColour . Ahora el runtime puede referenciar a esta propiedad como RED.settings.sampleNodeColour Estas propiedades del settings.js tambi\u00e9n se pueden exponer para el usuario. Para ello hay que registrarlas en el Fichero JS . En el RED.nodes.registerType() hay que pasar un tercer par\u00e1metro. Este es un objeto que contiene otro objeto settings , donde se le pasa cada propiedad con el nombre del settings.js y dentro contiene un objeto con las propiedades value : Valor por defecto de la propiedad exportable : Tiene que estar fijada a true para decirle al runtime que es editable desde el editor. Siguiendo con el ejemplo anterior, en el Fichero JS habr\u00eda que a\u00f1adir esto: RED . nodes . registerType ( \"sample\" , SampleNode , { settings : { sampleNodeColour : { value : \"red\" , exportable : true } } }); Ahora RED.settings.sampleNodeColour tambi\u00e9n ser\u00e1 accesible desde el editor. Credenciales \u00b6 Hay un tipo especial de propiedades que son las credentials . Estas normalmente se usan para alg\u00fan tipo de conexi\u00f3n, as\u00ed que se almacenan a parte del main Flow y no se pueden exportar desde el editor. Por eso en el Definition del Fichero HTML no van dentro del defaults y tienen su propio campo. Para definirlas hay que seguir estos 3 pasos: Fichero HTML -> Definition -> credentials : las entradas solo pueden tener un type de tipo text o password . < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition credentials : { username : { type : \"text\" }, password : { type : \"password\" } }, }) </ script > Fichero HTML -> Edit Dialog : Usar el mismo convenio que para las propiedades dentro del defaults , es decir, node-input-<property> . < div class = \"form-row\" > < label for = \"node-input-username\" >< i class = \"fa fa-tag\" ></ i > Username </ label > < input type = \"text\" id = \"node-input-username\" > </ div > < div class = \"form-row\" > < label for = \"node-input-password\" >< i class = \"fa fa-tag\" ></ i > Password </ label > < input type = \"password\" id = \"node-input-password\" > </ div > Fichero JS -> RED.nodes.registerType() : En el tercer par\u00e1metro, igual que en las propiedades el settings.js , a\u00f1ade un apartado para credentials . RED . nodes . registerType ( \"my-node\" , MyNode , { settings : {...}, credentials : { username : { type : \"text\" }, password : { type : \"password\" } } }); Con las credenciales se puede trabajar desde el runtime (la l\u00f3gica dentro del Fichero JS ). Una vez cargado el objeto del nodo, se puede acceder directamente con la propiedad credentials . En este ejemplo se puede ver bien. function MyNode ( config ) { RED . nodes . createNode ( this , config ); const node = this ; const username = node . credentials . username ; const password = node . credentials . password ; // ... } Con el editor (las secciones del Fichero HTML ), el nodo tiene restringido el acceso a las credenciales. Las credenciales de tipo text si se pueden leer como en el runtime, pero las de tipo password no. En su lugar hay que usar la propiedad has_<property> para saber si est\u00e1 vac\u00eda o no < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition credentials : { username : { type : \"text\" }, password : { type : \"password\" } }, // ... oneditprepare : function () { // this.credentials.username -> available // this.credentials.has_password -> available // this.credentials.password -> NO available } }) </ script > Por \u00faltimo, hay usos avanzados de las credenciales, que implica no solo guardar el t\u00edpico user-password. Sino tambi\u00e9n tokens recibidos por el servidor y dem\u00e1s. Un nodo que explota este uso avanzando de las credenciales es el node de Twitter. Nodos de Configuraci\u00f3n \u00b6 Los nodos de configuraci\u00f3n son nodos que normalmente se usan para mantener conexiones con distintos servicios, como por ejemplo una conexi\u00f3n TCP, MQTT, WebSocket, etc. Y luego este nodo de configuraci\u00f3n que mantiene la conexi\u00f3n es consumido por otros nodos. Cuidado Si tu nodo de configuraci\u00f3n gestiona una conexi\u00f3n, por especial atenci\u00f3n el evento close , para cerrar la conexi\u00f3n ante futuros deploys. Para definir un nodo como configuraci\u00f3n es todo igual que los demas nodos, excepto: Fichero HTML - Definition - category : Tiene que ser config . Fichero HTM**L - **Edit Dialog : Cada propiedad tiene que ser nombrada como node-config-input-<property> Luego para ser consumido por otro nodo, en el Definition se crea una propiedad pero poniendo en el type que sea el identificador del nodo de configuraci\u00f3n. Esto har\u00e1 que en el Edit Dialog transforme el input en un select para poder elegir y/o editar el m\u00f3dulo de configuraci\u00f3n. Por \u00faltimo desde el Fichero JS se instancia con RED.nodes.getNode(config.<property>) . Con un ejemplo se ve todo mejor. En el siguiente ejemplo se va a crear un componente remote-server que solo almacena configuraci\u00f3n, no tiene ninguna l\u00f3gica remote-server.html remote-server.js <!-- Definition --> < script type = \"text/javascript\" > RED . nodes . registerType ( 'remote-server' ,{ category : 'config' , defaults : { host : { value : \"localhost\" , required : true }, port : { value : 1234 , required : true , validate : RED . validators . number () }, }, label : function () { return this . host + \":\" + this . port ; } }); </ script > <!-- Edit Dialog --> < script type = \"text/html\" data-template-name = \"remote-server\" > < div class = \"form-row\" > < label for = \"node-config-input-host\" >< i class = \"fa fa-bookmark\" >< /i> Host</label> < input type = \"text\" id = \"node-config-input-host\" > < /div> < div class = \"form-row\" > < label for = \"node-config-input-port\" >< i class = \"fa fa-bookmark\" >< /i> Port</label> < input type = \"text\" id = \"node-config-input-port\" > < /div> </ script > module . exports = function ( RED ) { function RemoteServerNode ( n ) { RED . nodes . createNode ( this , n ); const node = this ; node . host = n . host ; node . port = n . port ; node . on ( 'close' , function () { node . host = null ; node . port = null ; }) } RED . nodes . registerType ( \"remote-server\" , RemoteServerNode ); } Ahora para poder consumir el m\u00f3dulo desde otro m\u00f3dulo Fichero HTML Fichero JS <!-- Definition --> < script type = \"text/javascript\" > RED . nodes . registerType ( 'another-component' ,{ defaults : { server : { value : \"\" , type : \"remote-server\" }, }, }); </ script > <!-- Edit Dialog --> < script type = \"text/html\" data-template-name = \"another-component\" > < div class = \"form-row\" > < label for = \"node-input-server\" > Server < /label> < input type = \"text\" id = \"node-input-server\" > < /div> </ script > module . exports = function ( RED ) { function AnotherComponent ( config ) { RED . nodes . createNode ( this , config ); const node = this ; // Retrieve the config node node . server = RED . nodes . getNode ( config . server ); if ( node . server ) { // Do something with: // node.server.host // node.server.port } else { // No config node configured } } RED . nodes . registerType ( \"another-component\" , MyNode ); } Tests \u00b6 NUNCA PUBLIQUES COMPONENTES SIN TESTEAR Publicar un componente no es un proceso complejo, pero si requiere de ciertos pasos que no son f\u00e1ciles de revertir si algo est\u00e1 mal. Por favor antes de publicar cualquier cosa, cerci\u00f3rate bien que lo has testeado a muerte antes: Test manuales Test automatizados Unit Testing Integration Testing Para hacer tests manuales, lo m\u00e1s sencillo es instalar el propio componente (y as\u00ed puedes ver como funciona). La forma de hacerlo es con npm e indicando en que carpeta est\u00e1 el package.json del componente. Es recomendable a\u00f1adir --no-save si quieres que no te lo a\u00f1ada el package.json del Node-Red con el que vayas a testear el componente. npm i -- no - save < component - folder - path > Siempre que puedas, genera tests autom\u00e1ticos, ya que de los tests manuales no te puedes fiar 100%. Es cierto que generar tests automatizados en Node-Red no es del todo sencillo. Para poder hacerlos se recomienda usar node-red-node-test-helper . Este framework de tests se basa en Mocha . Para usarlo: Instala el paquete npm i -D node-red-node-test-helper . Customiza el package.json y a\u00f1ade a los scripts que el comando test para que ejecute los tests buscando en la carpeta tests todos los ficheros que acaben como _spec.js ... \"scripts\" : { \"test\" : \"mocha \\\"tests/**/*_spec.js\\\"\" }, ... Crea la carpeta tests y para cada componente crea su fichero <component-name>_spec.js . A falta de documentar bien los tests, m\u00edrate bien la docu del paquete. Aqu\u00ed tienes un ejemplo de como testea el componente lower-case , que todas las inputs de tipo string las pasa a min\u00fasculas. lower-case_spec.js const helper = require ( \"node-red-node-test-helper\" ); const lowerNode = require ( \"../lower-case.js\" ); describe ( 'lower-case Node' , function () { afterEach ( function () { helper . unload (); }); it ( 'should be loaded' , function ( done ) { const flow = [ { id : \"n1\" , type : \"lower-case\" , name : \"test name\" } ]; helper . load ( lowerNode , flow , function () { const n1 = helper . getNode ( \"n1\" ); n1 . should . have . property ( 'name' , 'test name' ); done (); }); }); it ( 'should make payload lower case' , function ( done ) { const flow = [ { id : \"n1\" , type : \"lower-case\" , name : \"test name\" , wires : [[ \"n2\" ]] }, { id : \"n2\" , type : \"helper\" } ]; helper . load ( lowerNode , flow , function () { const n1 = helper . getNode ( \"n1\" ); const n2 = helper . getNode ( \"n2\" ); n2 . on ( \"input\" , function ( msg ) { msg . should . have . property ( 'payload' , 'uppercase' ); done (); }); n1 . receive ({ payload : \"UpperCase\" }); }); }); }); Ejemplos \u00b6 Se recomienda, a modo de documentaci\u00f3n del propio componente, a\u00f1adir al menos un ejemplo que muestre como se trabaja con \u00e9l. As\u00ed pues, un ejemplo no es m\u00e1s que: Coger una instancia de Node-Red Instalarle solo el componente Crear un flujo us\u00e1ndolo Exportar ese flujo Guardarlo en la carpeta examples con un nombre indicativo (como example1.json ) No tiene mucha historia, pero se agradece mucho. Apariencia del Nodo \u00b6 En un componente se pueden customizar 3 cosas respecto a la apariencia: Icono Color de fondo Etiqueta Pero adem\u00e1s se le pueden a\u00f1adir botones, tanto a la izquierda (como en el nodo Inject ), como a la derecha (como en el nodo Debug ). Icono \u00b6 Para especificar el icono de un componente es tan sencillo como poner Fichero HTML -> Definition -> icon igual a un string del icono < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition icon : \"arrow-in\" , }) </ script > Este string puede ser: El nombre de uno de los iconos de stock que trae Node-Red (b\u00e1sicamente son los iconos de Angular Material ) Ejemplo: icon: \"arrow-in\", Un icono de Font Awesome 4.7 Ejemplo: icon: \"fa-automobile\", Un icono espec\u00edfico del m\u00f3dulo. Algunos iconos de stock de Node-Red Para los iconos custom / espec\u00edficos del m\u00f3dulo, Node-Red buscar\u00e1 la carpeta icons en donde se encuentre el Fichero JS . Estos iconos deben cumplir unas normas: El nombre debe ser \u00fanico, ya que Node-Red va a buscar todos los iconos y los va a agrupar juntos. Deber\u00edan de tener un aspect ratio de 2:3. Su tama\u00f1o m\u00ednimo deber\u00eda ser 40 x 60 px. Tambi\u00e9n los puede editar el usuario El usuario puede editar que icono tiene el node desde la pesta\u00f1a appearance en el Edit Dialog . Pero esto se puede bloquear para que no suceda. Para ello hay que a\u00f1adir una property icon dentro del default del Definition ( Fichero HTML ). Un ejemplo de nodo que bloquea el icono es el ui_button del paquete node-red-dashboard -> c\u00f3digo . Color de fondo \u00b6 Para especificar el color de fondo de un componente es tan sencillo como poner Fichero HTML -> Definition -> color igual a un string RGB de color hexadecimal < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition color : \"#a6bbcf\" , }) </ script > Colores t\u00edpicos usados para los componentes Etiqueta \u00b6 Para customizar las etiquetas de un componente es tan sencillo como poner Fichero HTML -> Definition -> label , paletteLabel , labelStyle , inputLabels , outputLabels < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition label : function () { return this . name || \"my name\" }, paletteLabel : \"MyName\" , labelStyle : function () { return this . name ? \"node_label_italic\" : \"\" }, inputLabels : \"input parameter\" , outputLabels : [ \"main output\" , \"error output\" , \"code output\" ], }) </ script > Todas ellas permiten definir o modificar la etiqueta, ya sea de manera est\u00e1tica (con un string) o din\u00e1mica (con una funci\u00f3n). Las propiedades son: label : Es la etiqueta del nodo. paleteLabel : Es la etiqueta del nodo en la paleta. labelStyle : Estilo CSS de la etiqueta en el nodo. inputLabels : Es la etiqueta del puerto de entrada del nodo. outputLabel : Es la etiqueta de los puertos de salida del nodo. label \u00b6 Es la etiqueta del nodo. Si tiene valor din\u00e1mico, la etiqueta se carga cuando el nodo se carga en el editor. Un ejemplo ser\u00eda < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition label : function () { return this . name || \"my name\" }, }) </ script > Si no se especifica, se carga como valor por defecto el nombre del componente. Se suele usar por convenio el nombre del nodo editado por el usuario como la etiqueta del nodo. Nada de credenciales No puedes poner como etiqueta ning\u00fan campo de las credentials paleteLabel \u00b6 Es la etiqueta del nodo en la paleta. Como valor por defecto tiene el mismo que label . Si tiene valor din\u00e1mico, la etiqueta se carga cuando el nodo se a\u00f1ade a la paleta. labelStyle \u00b6 Es el estilo CSS que tiene la etiqueta. Si no se especifica ninguna, por defecto tiene node_label . Ejemplo: < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition labelStyle : function () { return ( this . name ) ? \"node_label_italic\" : \"\" }, }) </ script > Ports labels: inputLabels y outputLabels \u00b6 Las etiquetas de los puertos de entrada y salidas son respectivamente inputLabels y outputLabels . Se pueden definir est\u00e1ticamente o din\u00e1micante. Si la salida es definida din\u00e1micamente, la funci\u00f3n tiene que tener un argumento de entrada, que ser\u00e1 el \u00edndice de cada entrada empezando por 0 Puertos Est\u00e1ticos Puertos din\u00e1micos < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition inputLabels : \"input parameter\" , outputLabels : [ \"main output\" , \"error output\" , \"code output\" ], }) </ script > < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition inputLabels : \"input parameter\" , outputLabels : function ( index ) { return \"output number \" + index }, }) </ script > El usuario puede modificarlas Todos los puertos pueden ser editados por el usuario manualmente en el node settings del Edit Dialog Alineamiento \u00b6 Por defecto, tanto el icono como las etiquetas est\u00e1n alineadas a la izquierda dentro del nodo. Pero esto se puede modificar con la propiedad align del Fichero HTML - Definition < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition align : \"right\" , }) </ script > Alineamientos de un nodo Botones \u00b6 Los nodos normalmente no tienen botones, ya que la idea no es usar Node-Red desde el editor. De hecho el editor se puede deshabilitar. Pero hay nodos especiales como el Inject y el Debug , a los que se les ha a\u00f1adido un bot\u00f3n a la izquierda y a la derecha respectivamente. Si necesitas que tu nodo tenga esta funcionalidad tienes que a\u00f1adir la priopiedad button Fichero HTML -> Definiton -> button : {} Esta propiedad es un objeto que puede contener: Una funci\u00f3n onclick para capturar cuando se aprieta. Una funci\u00f3n enabled que devuelve un booleano para habilitar o deshabilitar el bot\u00f3n. Una funci\u00f3n visible que devuelve un booleano para esconder o mostrar el bot\u00f3n. Un booleano toggle que permite convertir el bot\u00f3n en un toggle-button. Las 3 primeras ser\u00edan para un bot\u00f3n normal. La \u00faltima permite convertir el bot\u00f3n en un toggle-button. Para ello necesitas crear una propiedad booleana dentro del defaults y referenciarla en la propiedad toggle . Aqu\u00ed tienes dos ejemplos, el primero de un bot\u00f3n normal, y el segundo un toggle-button Bot\u00f3n normmal Toggle button < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition ... button : { enabled : function () { // return whether or not the button is enabled, based on the current // configuration of the node return ! this . changed }, visible : function () { // return whether or not the button is visible, based on the current // configuration of the node return this . hasButton }, onclick : function () { ... } }, ... }) </ script > < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition defaults : { ... buttonState : { value : true }, ... }, ... button : { toggle : \"buttonState\" , onclick : function () { ... } }, ... }) </ script > Publicar componente \u00b6 A parte de preparar el package.json como se especifica en la secci\u00f3n correspondiente , hay ciertos pasos m\u00e1s que deber\u00edas cumplir: A\u00f1ade una licencia Prepara un buen README.md Despu\u00e9s puedes publicar tus componentes como paquetes npm, pero aqu\u00ed no acaba la cosa. Por \u00faltimo tienes que a\u00f1adir tu paquete a la Node-RED Library . Para hacer esto tienes que: Crearte una cuenta / iniciar sesi\u00f3n Darle al bot\u00f3n + Elegir Node Seguir las instrucciones que indican, que a estas alturas es solo a\u00f1adir el nombre de tu paquete npm Darle a add node Esperar, porque tardar\u00e1 un tiempo entre que se da de alta y dem\u00e1s Luego ya podr\u00e1s instalar tu paquete desde dentro de Node-Red. Formulario de alta de la Node-RED Library","title":"Crear Componentes"},{"location":"iot/nodered/custom-components/custom-components/#crear-componentes","text":"Componente = nodo Decir componente o nodo, es pr\u00e1cticamente lo mismo. El componente digamos que ser\u00eda el concepto, el modelo, o la clase si hablaremos en un contexto de Programaci\u00f3n Orientada a Objetos. El nodo ser\u00eda una instancia, el objeto (en Programaci\u00f3n Orientada a Objetos), lo que usamos. Luego un componente (modelo) puede tener muchos nodos (instancias). Para crear componentes es necesario que esten en un repositorio para ser publicados como un paquete npm y luego a\u00f1adidos a la Node-Red library. Se pueden crear varios a la vez bajo el mismo paquete npm, sobre todo si quieres que se instalen juntos. Hay solo dos tipos de componentes: Tipo config Son componentes que solo se pueden llamar desde la configuraci\u00f3n de otros componentes. Normalmente contienen l\u00f3gica que necesita estar activa todo el rato, como una conexi\u00f3n mqtt por ejemplo. Los dem\u00e1s Son todos los componentes que se pueden poner en un flujo directamente. Cada componente se compone (vaya juego de palabras eh) de al menos 3 ficheros: <component-name>.html que indica toda la info que usa el componente. <component-name>.js que contiene toda la l\u00f3gica de funcionamiento del componente. package.json donde esta definido como paquete npm. Puede tener un icono, as\u00ed que se recomienda a\u00f1adir la carpeta icons en el mismo nivel de la jerarqu\u00eda de ficheros. Ejemplo de estructura del repositorio package.json src / -> C\u00f3digo de los componentes icons / -> Iconos de los componentes resources/ -> Recursos que necesiten los componentes, como im\u00e1genes, ficheros extra JS, etc component-name1.html component-name1.js component-name2.html component-name2.js ... tests/ -> Tests de cada componente component-name1_spec.js component-name2_spec.js examples/ -> Flujos de ejemplo de cada componente example-component-name1.json example-component-name2.json ...","title":"Crear componentes"},{"location":"iot/nodered/custom-components/custom-components/#resumen-muy-simplificado-de-como-crear-un-componente","text":"Crea el Fichero HTML con al menos la Definition y el Edit Dialog (el Help Text es opcional). Pon especial foco en las propiedades del nodo -> defaults del Definition Genera en el Edit Dialog la forma de configurar esas propiedades del defaults Crea el Fichero JS y recuerda que el par\u00e1metro de entrada son los defaults de la Definition del Fichero HTML En el package.json a\u00f1ade la secci\u00f3n de node-red y especif\u00edca donde est\u00e1 el Fichero JS . Componentes juntos o separados Puedes crear todos los componentes en un solo par de Fichero HTML + Fichero JS . No habr\u00eda ning\u00fan problema ya que cada secci\u00f3n debe de tener un identificador \u00fanico para cada componente. Personalmente yo recomendar\u00eda que fuesen en ficheros separados, para poder estructurar mejor todo. Pero tu decides, is up to you.","title":"Resumen muy simplificado de como crear un componente"},{"location":"iot/nodered/custom-components/custom-components/#fichero-html","text":"El Fichero HTML indica de que se compone el nodo, como se configura, y dem\u00e1s. Este se divide en tres partes: Definition -> Definici\u00f3n Edit dialog -> Configuraci\u00f3n Help text -> Informaci\u00f3n Referenciar el componente en distintos sitios Para referirnos tanto en el fichero HTML como en el JS al mismo nodo, el identificador tiene que ser el mismo . En el siguiente ejemplo hay que tener claro que component-name es el identificador \u00fanico que va a tener el componente tanto en este fichero, como en el fichero Javascript. <!-- Definition in JS --> < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition }) </ script > <!-- Edit dialog in HTML --> < script type = \"text/html\" data-template-name = \"component-name\" > </ script > <!-- Help text in Markdown or HTML --> < script type = \"text/markdown\" data-help-name = \"component-name\" > </ script >","title":"Fichero HTML"},{"location":"iot/nodered/custom-components/custom-components/#definition-definicion","text":"La Definici\u00f3n es un objeto JS dentro del RED.nodes.registerType('component-name', { /* This is the definition */ } ) Tip Componente tipo config -> category: 'config' Componente normal -> category: 'lo-que-sea' Este objeto contiene los siguientes campos. Definici\u00f3n Propiedad Tipo Descripci\u00f3n category string Categor\u00eda que aparece en la Paleta defaults object Propiedades del nodo para el Fichero JS y tambi\u00e9n del Edit Dialog credentials object Credenciales del nodo inputs number Entradas, solo 0 o 1 outputs number Salidas, 0 o m\u00e1s icon string Icono color string Color de fondo label string - function Etiqueta para el Panel paletteLabel string - function Etiqueta para la Paleta labelStyle string - function Estilos para la etiqueta del Panel inputLabels string - function \u00a1Opcional! Etiqueta para el hover el puerto de entrada outputLabels string - function \u00a1Opcional! Etiqueta para el hover de los puestos de salida align string Alineamiento del icono y la etiqueta button object A\u00f1adir un bot\u00f3n al final (como en el TypedInput - JSON) oneditprepare function Llamada cuando se est\u00e1 construyendo el Edit Dialog oneditsave function Llamada cuando se aprieta el bot\u00f3n Save en el Edit Dialog oneditcancel function Llamada cuando se aprieta el bot\u00f3n Cancel en el Edit Dialog oneditdelete function Llamada cuando se borra algo de la configuraci\u00f3n del nodo en el Edit Dialog oneditresize function Llamada cuando se cambia el tama\u00f1ao del Edit Dialog onpaletteadd function Llamada cuando se a\u00f1ade el tipo del m\u00f3dulo a la Paleta onpaletteremove function Llamada cuando se quita el tipo del m\u00f3dulo de la Paleta","title":"Definition (Definici\u00f3n)"},{"location":"iot/nodered/custom-components/custom-components/#edit-dialog-configuracion","text":"La parte de Confifguraci\u00f3n es para el cuadro de configuraci\u00f3n del componente o Edit Dialog . Es una secci\u00f3n HTML que tiene que tener el atributo data-template-name . < script type = \"text/html\" data-template-name = \"node-type\" > <!-- edit dialog content --> </ script > Normalmente se compone de una serie de rows . Cada una de estas es un elemento <div class=\"form-row\"> donde cada una de estas contiene un <label> (para el nombre del de la propiedad a configurar) y otro elemento para introducir el valor que va a tener esa propiedad, como por ejemplo un <input> . Identificar propiedades Para comunicar esto con la Definici\u00f3n (propiedad del objeto defaults ) as\u00ed como el fichero Javascript (objeto de entrada en la funci\u00f3n del nodo), se tiene que poner cada id como node-input-<property> . Por ejemplo si el nodo va a tener una propiedad name , aqu\u00ed se debe de poner id=\"node-input-name\" , < div class = \"form-row\" > < label for = \"node-input-name\" >< i class = \"fa fa-tag\" ></ i > Name </ label > < input type = \"text\" id = \"node-input-name\" placeholder = \"Name\" > </ div > Si se quiere introducir un icono, hay que usar <i> con los iconos de Font Awesome 4.7 . Para insertar el dato, Node-Red te provee distintos widgets para usar;","title":"Edit Dialog (Configuraci\u00f3n)"},{"location":"iot/nodered/custom-components/custom-components/#buttons","text":"Los buttons necesitan usar la clase red-ui-button y luego a\u00f1adir alguna m\u00e1s para modificar el tipo de UI. El toggle button requiere que adem\u00e1s se a\u00f1ada l\u00f3gica a la parte de Definici\u00f3n Button Small Button Toggle Button group < button type = \"button\" class = \"red-ui-button\" > Button </ button > < button type = \"button\" class = \"red-ui-button red-ui-button-small\" > Button </ button > Nota Es probable que la parte de HTML del <span></span> tenga que ir todo en una l\u00ednea y sin espacios en blanco entre medias, porque sino Node-Red no sabe renderizarlo. Configuraci\u00f3n < span class = \"button-group\" > < button type = \"button\" class = \"red-ui-button toggle selected my-button-group\" > b1 </ button > < button type = \"button\" class = \"red-ui-button toggle my-button-group\" > b2 </ button > < button type = \"button\" class = \"red-ui-button toggle my-button-group\" > b3 </ button > </ span > Definici\u00f3n $ ( \".my-button-group\" ). on ( \"click\" , function () { $ ( \".my-button-group\" ). removeClass ( \"selected\" ); $ ( this ). addClass ( \"selected\" ); })","title":"Buttons"},{"location":"iot/nodered/custom-components/custom-components/#inputs","text":"Al igual que con los <button> , hay <input> tuneados, pero esos no depende de una clase, sino que son un tipo especial que son los TypedInput que tienen su propia API -> TypedInput API . Input TypedInput -> String/Number/Boolean TypedInput -> JSON TypedInput -> msg/flow/global TypedInput -> Select box TypedInput -> Multiple Select box < input type = \"text\" id = \"node-input-name\" > Cuando el TypedInput puede tener distintos tipos de valores, hay que a\u00f1adir el segundo elemento hidden para poder almacenar que tipo contiene. Configuraci\u00f3n < input type = \"text\" id = \"node-input-example1\" > < input type = \"hidden\" id = \"node-input-example1-type\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example1\" ). typedInput ({ type : \"str\" , types : [ \"str\" , \"num\" , \"bool\" ], typeField : \"#node-input-example1-type\" }) Configuracion < input type = \"text\" id = \"node-input-example2\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example2\" ). typedInput ({ type : \"json\" , types : [ \"json\" ] }) Configuracion < input type = \"text\" id = \"node-input-example3\" > < input type = \"hidden\" id = \"node-input-example3-type\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example3\" ). typedInput ({ type : \"msg\" , types : [ \"msg\" , \"flow\" , \"global\" ], typeField : \"#node-input-example3-type\" }) Configuracion < input type = \"text\" id = \"node-input-example4\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example4\" ). typedInput ({ types : [ { value : \"fruit\" , options : [ { value : \"apple\" , label : \"Apple\" }, { value : \"banana\" , label : \"Banana\" }, { value : \"cherry\" , label : \"Cherry\" }, ] } ] }) El resultado de un multi-select es una lista separada por comas con lo seleccionado. Configuracion < input type = \"text\" id = \"node-input-example5\" > Definici\u00f3n -> oneditprepare $ ( \"#node-input-example5\" ). typedInput ({ types : [ { value : \"fruit\" , multiple : \"true\" , options : [ { value : \"apple\" , label : \"Apple\" }, { value : \"banana\" , label : \"Banana\" }, { value : \"cherry\" , label : \"Cherry\" }, ] } ] })","title":"Inputs"},{"location":"iot/nodered/custom-components/custom-components/#multi-line-text-editor","text":"El editor de texto multil\u00ednea es un widget sacado del editor Monaco o Ace (dependiendo cual tengas activado en las settings). Para generarlo debes usar <div class=\"node-text-editor\" id=\"editor-id\"></div> , pero deber\u00edas de a\u00f1adirle unas dimensiones para que no se vaya de madre. Se inicializa con el oneditprepare de la Definici\u00f3n y con oneditsave y oneditcancel obtienes el valor cuando se cierra el editor. Configuraci\u00f3n < div style = \"height: 250px; min-height:150px;\" class = \"node-text-editor\" id = \"node-input-example-editor\" ></ div > Definici\u00f3n oneditprepare : function () { this . editor = RED . editor . createEditor ({ id : 'node-input-example-editor' , mode : 'ace/mode/text' , value : this . exampleText }); }, oneditsave : function () { this . exampleText = this . editor . getValue (); this . editor . destroy (); delete this . editor ; }, oneditcancel : function () { this . editor . destroy (); delete this . editor ; },","title":"Multi-line Text Editor"},{"location":"iot/nodered/custom-components/custom-components/#help-text-informacion","text":"La parte de Informaci\u00f3n es para la documentaci\u00f3n que se puede ver desde el editor, en la pesta\u00f1a de informaci\u00f3n. Es un <script></script> HTML o Markdown que tiene que tener el atributo data-help-name . HTML Markdown <!-- Documentaci\u00f3n --> < script type = \"text/html\" data-help-name = \"component-name\" > < p > Esto va a ser el tooltip que aparezca cuando haces < code > hover < /code> con el rat\u00f3n sobre el componente</p> <!-- HTML Documentaci\u00f3n --> </ script > <!-- Documentaci\u00f3n --> < script type = \"text/markdown\" data-help-name = \"component-name\" > Esto va a ser el tooltip que aparezca cuando haces < code > hover < /code> con el rat\u00f3n sobre el componente <!-- Markdown Documentaci\u00f3n --> </ script > La estructura es m\u00e1s o menos la siguiente: Un p\u00e1rrafo corto que describa el componente -> Esto servir\u00e1 de tooltip cuando se haga hover con el rat\u00f3n. Secci\u00f3n de Inputs Secci\u00f3n de Outputs Secci\u00f3n de Details Secci\u00f3n de References Notas a tener en cuenta Markdown es mucho m\u00e1s sencillo / menos verboso Cuando vayas a referirte a una propiedad de msg y no a ser dentro de una lista espec\u00edficara para eso, usa <code></code> . No uses <b> , <i> y otro etiquetas de marcado que no se describan m\u00e1s abajo.","title":"Help Text (Informaci\u00f3n)"},{"location":"iot/nodered/custom-components/custom-components/#secciones","text":"Cada secci\u00f3n se marca con un t\u00edtulo 3 <h3> y las subsecciones con t\u00edtulo 4 (o inferior) <h4> . HTML Markdown < h3 > Seccion </ h3 > < h4 > Subsecci\u00f3n </ h4 > ### Secci\u00f3n #### Subsecci\u00f3n","title":"Secciones"},{"location":"iot/nodered/custom-components/custom-components/#propiedades-del-msg","text":"Para definir las propiedades del mensaje, hay que usar <dl class=\"message-properties\"> . Por cada propiedad debe de haber un par de elementos <dt> y <dd> Cada <dt> contiene el nombre de la propiedad y opcionalmente un <span class=\"property-type\"> con el tipo. Si la propiedad es opcional se pone como <dt class=\"optional\"> El <dd> solo contiene una breve descripci\u00f3n Resultado HTML Markdown < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string | buffer </ span > </ dt > < dd > the payload of the message to publish. </ dd > < dt class = \"optional\" > topic < span class = \"property-type\" > string </ span > </ dt > < dd > the MQTT topic to publish to. </ dd > </ dl > : payload (string | buffer) : the payload of the message to publish. : *topic* (string) : the MQTT topic to publish to.","title":"Propiedades del msg"},{"location":"iot/nodered/custom-components/custom-components/#mas-de-una-salida","text":"Si el componente solo tiene una salida, solo debe de llevar el elemento <dl> como en el punto anterior. Per si tiene m\u00e1s de una salida, esa lista debe de ir envuelta con un elemento <ol class=\"node-ports\"> . Ahora cada elemento de la lista debe ir con su correspondiente <dl> . Resultado HTML Markdown < ol class = \"node-ports\" > < li > Standard output < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string </ span ></ dt > < dd > the standard output of the command. </ dd > </ dl > </ li > < li > Standard error < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string </ span ></ dt > < dd > the standard error of the command. </ dd > </ dl > </ li > </ ol > 1. Standard output : payload (string) : the standard output of the command. 2. Standard error : payload (string) : the standard error of the command.","title":"M\u00e1s de una salida"},{"location":"iot/nodered/custom-components/custom-components/#ejemplo-completo-con-todo","text":"Resultado Ejemplo completo Markdown Ejemplo completo HTML < script type = \"text/markdown\" data-help-name = \"node-type\" > Connects to a MQTT broker and publishes messages . ### Inputs : payload ( string | buffer ) : the payload of the message to publish . : * topic * ( string ) : the MQTT topic to publish to . ### Outputs 1. Standard output : payload ( string ) : the standard output of the command . 2. Standard error : payload ( string ) : the standard error of the command . ### Details `msg.payload` is used as the payload of the published message . If it contains an Object it will be converted to a JSON string before being sent . If it contains a binary Buffer the message will be published as - is . The topic used can be configured in the node or , if left blank , can be set `msg.topic` . Likewise the QoS and retain values can be configured in the node or , if left blank , set by `msg.qos` and `msg.retain` respectively . ### References - [ Twitter API docs ]() - full description of `msg.tweet` property - [ GitHub ]() - the nodes github repository </ script > < script type = \"text/html\" data-help-name = \"node-type\" > < p > Connects to a MQTT broker and publishes messages . < /p> < h3 > Inputs < /h3> < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string | buffer < /span> < /dt> < dd > the payload of the message to publish . < /dd> < dt class = \"optional\" > topic < span class = \"property-type\" > string < /span></dt> < dd > the MQTT topic to publish to . < /dd> < /dl> < h3 > Outputs < /h3> < ol class = \"node-ports\" > < li > Standard output < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string < /span></dt> < dd > the standard output of the command . < /dd> < /dl> < /li> < li > Standard error < dl class = \"message-properties\" > < dt > payload < span class = \"property-type\" > string < /span></dt> < dd > the standard error of the command . < /dd> < /dl> < /li> < /ol> < h3 > Details < /h3> < p >< code > msg . payload < /code> is used as the payload of the published message. If it contains an Object it will be converted to a JSON string before being sent . If it contains a binary Buffer the message will be published as - is . < /p> < p > The topic used can be configured in the node or , if left blank , can be set by < code > msg . topic < /code>.</p> < p > Likewise the QoS and retain values can be configured in the node or , if left blank , set by < code > msg . qos < /code> and <code>msg.retain</code> respectively.</p> < h3 > References < /h3> < ul > < li >< a > Twitter API docs < /a> - full description of <code>msg.tweet</code> property</li> < li >< a > GitHub < /a> - the nodes github repository</li> < /ul> </ script >","title":"Ejemplo completo con todo"},{"location":"iot/nodered/custom-components/custom-components/#fichero-js","text":"El Fichero JS indica el comportamiento del componente cuando est\u00e1 en funcionamiento. Para crear un componente el esqueleto es como el que sigue: Hay que exportar una funci\u00f3n que reciba como par\u00e1metro el objeto global / runtime, Node-Red (en el ejemplo, RED ). Luego tiene que haber una funci\u00f3n donde se le va a pasar como argumento su configuraci\u00f3n proveniente del Fichero HTML (el config en el ejemplo). Luego lo siguiente que hay que hacer es cargar el this con su configuraci\u00f3n a trav\u00e9s de RED.Nodes.createNode() Despu\u00e9s vendr\u00eda la l\u00f3gica del componente. Por \u00faltimo, fuera de la funci\u00f3n del m\u00f3dulo, hay que registrar el identificador del componente (el string usado en el Fichero HTML) con la funci\u00f3n creada a trav\u00e9s de RED.nodes.registerType() Esqueleto de un componente en JS module . exports = function ( RED ) { function SampleNode ( config ) { RED . nodes . createNode ( this , config ); // component logic } RED . nodes . registerType ( \"sample\" , SampleNode ); } Renombrar el this Una pr\u00e1ctica com\u00fan dentro de la l\u00f3gica del componente es renombrar el this como node , para saber que te refieres al nodo const node = this ; Para las subsecciones siguientes, si ves node piensa que es el this .","title":"Fichero JS"},{"location":"iot/nodered/custom-components/custom-components/#leer-y-enviar-mensajes","text":"Para leer mensajes, hay que habilitar el evento de input y pasarle una funci\u00f3n listener 3 par\u00e1metros: El primero es el mensaje de entrada. El segundo es la funci\u00f3n para enviar el mensaje. El tercero es un parametro opcional, que sirve para terminar el env\u00edo si el m\u00f3dulo env\u00eda mensajes as\u00edncronamente. node . on ( 'input' , function ( msg , send , done ) { // do something with 'msg' // Once finished, call 'done'. // This call is wrapped in a check that 'done' exists // so the node will work in earlier versions of Node-RED (<1.0) if ( done ) { done (); } }); En cambio para enviar mensajes tienes dos opciones: Que no dependan de las entradas -> Se mandan directamente Que dependan de las entradas -> Hay que mandarlas a trav\u00e9s de la funci\u00f3n listener anterior. const node = this ; // Salida que no depende de la entrada const msg = { payload : \"salida sin entrada\" } node . send ( msg ); // Salida que depende de la entrada node . on ( 'input' , function ( msg , send , done ) { // Comprobar que existe la funci\u00f3n send para retrocompatibilidades de Node-Red send = send || function () { node . send . apply ( node , arguments ) } // Preparar el mensaje msg . payload = \"salida con entrada\" ; send ( msg ); // Acabar el env\u00edo if ( done ) { done (); } }); Independientemente de como sean las salidas (dependiente de entradas o no), hay que tener en cuenta que Node-Red permite tener m\u00faltiple salidas y m\u00faltiples mensajes M\u00e1s de una salida -> node.send([msg1, msg2, msg3]) Mas de un mensaje por salida -> node.send([msg1, [msg2A, msg2B], msg3]) Si tu salida depende de la entrada, y solo vas a modificar el mensaje, procura reenviar el objeto msg modificado y no crear uno nuevo. Si el msg es null , aunque llames a send(msg) , este no se enviar\u00e1.","title":"Leer y enviar mensajes"},{"location":"iot/nodered/custom-components/custom-components/#trabajar-con-contexto","text":"Como ya sabr\u00e1s, en Node-Red puedes trabajar con 3 tipos de contextos: Contexto del Nodo -> Objeto context en los nodos function : Es la informaci\u00f3n almacenada en el nodo. Contexto del Flujo -> Objeto flow en los nodos function : Es la informaci\u00f3n almacenada en el flujo. Contexto Global -> Objeto global en los nodos function : Es la informaci\u00f3n almacenada global. Para poder usar esto desde el Fichero JS es tan sencillo como usar: node.context() -> Contexto del nodo node.context().flow -> Contexto del Flow node.context().global -> Contexto Global Cada uno de los contextos tienen sus funciones t\u00edpicas set / get para guardar y leer informaci\u00f3n. // Node const nodeContext = this . context (); nodeContext . set ( 'data' , 1 ) node . log ( nodecontext . get ( 'data' )) // Flow const flowContext = this . context (). flow ; flowContext . set ( 'data' , 'say h' ) node . log ( flowContext . get ( 'data' )) // Global const globalContext = this . context (). global ; globalContext . set ( 'data' , { hi : 'hello' }) node . log ( globalContext . get ( 'data' )) Componententes config y contexto Los nodos de configuraci\u00f3n que son utilizados y son compartidos por otros nodos, son globales por defecto. A menos que el usuario del nodo especifique lo contrario. En tal caso, no se puede suponer que tengan acceso al contexto del Flow.","title":"Trabajar con contexto"},{"location":"iot/nodered/custom-components/custom-components/#logging-y-gestion-de-errores","text":"Para poder tener mensajes de logs, el propio componente nos provee ya de estas funciones: // Since Node-RED 0.17 node . trace ( \"Log para comprobar cosas internas en el desarrollo, no para producci\u00f3n\" ); node . debug ( \"Log para detalles de debuggear el nodo, no para producci\u00f3n\" ); // Before Node-RED 0.17 node . log ( \"Log de informaci\u00f3n\" ); node . warn ( \"Log de warning para advertir que algo posiblemente malo est\u00e1 pasando\" ); node . error ( \"Log de errores\" ); Tambi\u00e9n se pueden propagar errores para ser estudiados desde el Flow posteriormente. Para ello hay que pasar el error a la funci\u00f3n done() , pero por retrocompatibilidad, si esta funci\u00f3n no existe, hay que usar node.error() . let node = this ; node . on ( 'input' , function ( msg , send , done ) { // do something with 'msg' // If an error is hit, report it to the runtime if ( err ) { if ( done ) { // Node-RED 1.0 compatible done ( err ); } else { // Node-RED 0.x compatible node . error ( err , msg ); } } });","title":"Logging y gesti\u00f3n de errores"},{"location":"iot/nodered/custom-components/custom-components/#status","text":"Se puede definir el status del componente, sobre todo como ayuda visual en el Flow : para ver si est\u00e1 conectado, desconectado, etc. El status es m\u00e1s importante de lo que crees El status del componente no solo es algo visual para el editor. El estado de un componente se puede capturar con el componente Status que te permite averiguar si por ejemplo un componente concreto ha perdido la conexi\u00f3n, o se ha conectado. Ponle especial cari\u00f1o al estado de tu componente Para setearlo hay que usar la funci\u00f3n status() y pasarle un objeto que contenga Propiedad Valor Descripci\u00f3n shape ring - dot Forma con la que mostrar el status fill red - green - yellow - blue - grey Color con el que mostrar el status text Texto a mostrar en el status Ejemplos de status node . status ({ shape : \"ring\" , fill : \"red\" , text : \"disconnected\" }); // ... node . status ({ shape : \"dot\" , fill : \"green\" , text : \"connected\" });","title":"Status"},{"location":"iot/nodered/custom-components/custom-components/#cerrando-el-componente","text":"Cada vez que se hace un nuevo deploy de los flujos, todos los componentes se borran. Luego es importante que si nuestro componente almacena alg\u00fan estado / conexi\u00f3n / event listener, sea removido antes de borrar el componente. Para esto hay que usar otra funci\u00f3n listener para el evento close . Dependiendo de como funcione el nodo, esta funci\u00f3n tiene m\u00e1s o menos parametros: Nodo s\u00edncrono: No tiene ningun par\u00e1metro Nodo s\u00edncrono: Tiene como par\u00e1metro la funci\u00f3n done Nodo s\u00edncrono desde Node-Red 0.17: Tiene como par\u00e1metros una variable booleana que indica si ha sido deshabilitado ya o no y la funci\u00f3n done de antes. Nodo s\u00edncrono Nodo as\u00edncrono Nodo as\u00edncrono desde Node-Red 0.17 node . on ( 'close' , function () { // tidy up any state }); this . on ( 'close' , function ( done ) { doSomethingWithACallback ( function () { done (); }); }); node . on ( 'close' , function ( removed , done ) { if ( removed ) { // This node has been disabled/deleted } else { // This node is being restarted } done (); }); OJO con los componentes as\u00edncronos Si el componente es as\u00edncrono y no se llama a la funci\u00f3n done hay problemas : Antiguamente esperaba 15 segundos , y si no se hab\u00eda llamado, se lanzaba el error y se reiniciaba el flujo . Ahora se queda esperando indefinidamente , lo que bloquear\u00eda todo tu Node-Red .","title":"Cerrando el componente"},{"location":"iot/nodered/custom-components/custom-components/#packagejson","text":"Antes se publicaban los paquetes como node-red-contrib-<paquete> . Pero ahora debe ser @<scope>/<paquete> o en su defecto @<scope>/node-red-<paquete> : @<scope> el usuario / organizacion / grupo con el que se va a publicar el paquete. <paquete> es el nombre del paquete. El fichero package.json est\u00e1 en la parte m\u00e1s alta del repositorio y se trabaja con \u00e9l como con cualquier paquete npm. Lo que hay que tener en cuenta para definir los componentes es que se tiene que a\u00f1adir el apartado \"node-red\" : \"version\" : Indica la versi\u00f3n m\u00ednima de Node-Red que soportan los componentes \"nodes\" : Indica los componentes que hay en el paquete y se apunta al fichero .js del componente. package.json { \"name\" : \"@<scope>/node-red-<paquete>\" , \"version\" : \"0.0.1\" , \"description\" : \"A sample node for node-red\" , \"dependencies\" : {}, \"keywords\" : [ \"node-red\" ], \"node-red\" : { \"version\" : \">=2.0.0\" , \"nodes\" : { \"component-name1\" : \"src/component-name1/component-name1.js\" , \"component-name2\" : \"src/component-name2/component-name2.js\" , ... } } }","title":"package.json"},{"location":"iot/nodered/custom-components/custom-components/#propiedades-del-nodo","text":"Las propiedades de un nodo se definen de la forma siguiente: Fichero HTML -> Definition -> defaults -> Se indican las propiedades que tiene el node (valor por defecto, tipo, etc). Fichero HTML - Definition defaults : { name : { value : \"\" }, prefix : { value : \"\" } }, Fichero HTML -> Edit Dialog -> Se crean los componentes HTML con el id=\"node-input-<property>\" para poder configurar cada una de las propiedades. Fichero HTML - Edit Dialog < div class = \"form-row\" > < label for = \"node-input-prefix\" >< i class = \"fa fa-tag\" ></ i > Prefix </ label > < input type = \"text\" id = \"node-input-prefix\" > </ div > Fichero JS -> En el par\u00e1metro de entrada de la funci\u00f3n (en los ejemplos config ), ese es el objeto con las propiedades ya configuradas por el usuario en el Edit Dialog . Fichero JS function ExampleNode ( config ) { RED . nodes . createNode ( this , config ); this . prefix = config . prefix ; var node = this ; this . on ( 'input' , function ( msg ) { msg . payload = node . prefix + msg . payload . toLowerCase (); node . send ( msg ); }); }","title":"Propiedades del Nodo"},{"location":"iot/nodered/custom-components/custom-components/#propiedades-en-el-fichero-html-definition","text":"Las propiedades configurables por el usuario se definen dentro del defaults . Hay algunas que estan reservadas y no se pueden usar: Propiedades con un \u00fanico car\u00e1cter (Node-Red si que usa estas internamente x , y , z , d , g , l ) Palabras reservadas id , type , wires , inputs . La palabra outputs es reservada, pero si se pone permite que el usuario pueda editar el n\u00famero de salidas Cada una de estas propiedades dentro del defaults es un objeto con las siguientes propiedades: Propiedad Tipo Opcional Descripci\u00f3n value any Valor por defecto required boolean x Si el par\u00e1metro es obligatorio ( false por defecto) validate function x Funci\u00f3n para validar que el valor es correcto (Node-Red por defecto tiene varias como RED.validators.number() o RED.validators.regex() ) type string x Si necesita usar un nodo de tipo configuraci\u00f3n para funcionar, hay que especificar aqu\u00ed el identificador Para validar las propiedades , aparte del required , existe el campo validate . Este permite pasar un una funci\u00f3n que devuelva un boolean para validar que se cumpla que el dato sea como tiene que ser. Node-Red por defecto te da dos (hay otra extra, pero ese no hace falta usarlo, es para los TypedInput ) RED.validators.number() comprueba que el valor de la propiedad sea un n\u00famero. RED.validators.regex() comprueba que el valor cumpla una expresi\u00f3n regular. Un ejemplo podr\u00eda ser este defaults : { minimumLength : { value : 0 , validate : RED . validators . number () }, lowerCaseOnly : { value : \"\" , validate : RED . validators . regex ( /[a-z]+/ ) }, custom : { value : \"\" , validate : function ( v ) { const minimumLength = $ ( \"#node-input-minimumLength\" ). length ? $ ( \"#node-input-minimumLength\" ). val () : this . minimumLength ; return v . length > minimumLength } } }, Las dem\u00e1s propiedades que no van en defaults son para definir como es el componente. Aunque si se necesita modificar el comportamiento por defecto, tambi\u00e9n se puede customizar usando las propiedades. Estas son propiedades de tipo funci\u00f3n, donde se les pasa una funci\u00f3n para que sea ejecutada en cierto momento. oneditprepare : Es llamada inmediatamente antes de renderizar / mostrar el Edit Dialog . oneditsave : Es llamada despu\u00e9s de darle a Done (guardar) en el Edit Dialog . oneditcancel : Es llamada despu\u00e9s de darle a Cancel (cancelar) en el Edit Dialog . oneditdelete : Es llamada despu\u00e9s de darle a Delete (borrar) en el Edit Dialog . oneditresize : Es llamada cuando se redimensiona el Edit Dialog . Puedes comprobar los campos, a\u00f1adir opciones al UI del Edit Dialog, etc. Un ejemplo es el m\u00f3dulo Inject que cambia la UI cuando le das alg\u00fan tipo de frecuencia a la inyecci\u00f3n. Puedes mirar el c\u00f3digo para ver como usa estas funciones: oneditprepare -> c\u00f3digo oneditsave -> c\u00f3digo","title":"Propiedades en el Fichero HTML - Definition"},{"location":"iot/nodered/custom-components/custom-components/#propiedades-en-el-fichero-html-edit-dialog","text":"Cuando se abre el Edit Dialog , el editor busca que haya por cada elemento del defaults , un <input> que contenga un id : id=\"node-input-<property>\" para propiedades normales. id=\"node-input-config-property>\" para propiedades que corresponden a nodos de tipo configuraci\u00f3n. Cada uno de estos <input> son configurados al valor por defecto que tienen en el defaults .","title":"Propiedades en el Fichero HTML - Edit Dialog"},{"location":"iot/nodered/custom-components/custom-components/#propiedades-en-el-fichero-js","text":"Cada componente en el Fichero JS recibe un par\u00e1metro de entrada, normalmente se llama config en la docu oficial. Esto es as\u00ed porque realmente lo es. Esa configuraci\u00f3n es un objeto que contiene las propiedades mencionadas en el defaults de la Definition y configuradas en el Edit Dialog.","title":"Propiedades en el Fichero JS"},{"location":"iot/nodered/custom-components/custom-components/#propiedades-en-el-settingsjs","text":"Tambi\u00e9n se pueden exponer propiedades del nodo en el settings.js pero para eso se necesita que se sigan unas reglas: El nodo debe de no requerir que el usuario lo configure -> Luego tiene que tener un valor por defecto. El nombre de la propiedad en el settings.js debe tener como prefijo el identificador del nodo. El nombre debe ir en camelCase. Ejemplo f\u00e1cil: En mi nodo sample-node quiero poder editar la propiedad colour . En el settings.js tengo que definir la propiedad como sampleNodeColour . Ahora el runtime puede referenciar a esta propiedad como RED.settings.sampleNodeColour Estas propiedades del settings.js tambi\u00e9n se pueden exponer para el usuario. Para ello hay que registrarlas en el Fichero JS . En el RED.nodes.registerType() hay que pasar un tercer par\u00e1metro. Este es un objeto que contiene otro objeto settings , donde se le pasa cada propiedad con el nombre del settings.js y dentro contiene un objeto con las propiedades value : Valor por defecto de la propiedad exportable : Tiene que estar fijada a true para decirle al runtime que es editable desde el editor. Siguiendo con el ejemplo anterior, en el Fichero JS habr\u00eda que a\u00f1adir esto: RED . nodes . registerType ( \"sample\" , SampleNode , { settings : { sampleNodeColour : { value : \"red\" , exportable : true } } }); Ahora RED.settings.sampleNodeColour tambi\u00e9n ser\u00e1 accesible desde el editor.","title":"Propiedades en el settings.js"},{"location":"iot/nodered/custom-components/custom-components/#credenciales","text":"Hay un tipo especial de propiedades que son las credentials . Estas normalmente se usan para alg\u00fan tipo de conexi\u00f3n, as\u00ed que se almacenan a parte del main Flow y no se pueden exportar desde el editor. Por eso en el Definition del Fichero HTML no van dentro del defaults y tienen su propio campo. Para definirlas hay que seguir estos 3 pasos: Fichero HTML -> Definition -> credentials : las entradas solo pueden tener un type de tipo text o password . < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition credentials : { username : { type : \"text\" }, password : { type : \"password\" } }, }) </ script > Fichero HTML -> Edit Dialog : Usar el mismo convenio que para las propiedades dentro del defaults , es decir, node-input-<property> . < div class = \"form-row\" > < label for = \"node-input-username\" >< i class = \"fa fa-tag\" ></ i > Username </ label > < input type = \"text\" id = \"node-input-username\" > </ div > < div class = \"form-row\" > < label for = \"node-input-password\" >< i class = \"fa fa-tag\" ></ i > Password </ label > < input type = \"password\" id = \"node-input-password\" > </ div > Fichero JS -> RED.nodes.registerType() : En el tercer par\u00e1metro, igual que en las propiedades el settings.js , a\u00f1ade un apartado para credentials . RED . nodes . registerType ( \"my-node\" , MyNode , { settings : {...}, credentials : { username : { type : \"text\" }, password : { type : \"password\" } } }); Con las credenciales se puede trabajar desde el runtime (la l\u00f3gica dentro del Fichero JS ). Una vez cargado el objeto del nodo, se puede acceder directamente con la propiedad credentials . En este ejemplo se puede ver bien. function MyNode ( config ) { RED . nodes . createNode ( this , config ); const node = this ; const username = node . credentials . username ; const password = node . credentials . password ; // ... } Con el editor (las secciones del Fichero HTML ), el nodo tiene restringido el acceso a las credenciales. Las credenciales de tipo text si se pueden leer como en el runtime, pero las de tipo password no. En su lugar hay que usar la propiedad has_<property> para saber si est\u00e1 vac\u00eda o no < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition credentials : { username : { type : \"text\" }, password : { type : \"password\" } }, // ... oneditprepare : function () { // this.credentials.username -> available // this.credentials.has_password -> available // this.credentials.password -> NO available } }) </ script > Por \u00faltimo, hay usos avanzados de las credenciales, que implica no solo guardar el t\u00edpico user-password. Sino tambi\u00e9n tokens recibidos por el servidor y dem\u00e1s. Un nodo que explota este uso avanzando de las credenciales es el node de Twitter.","title":"Credenciales"},{"location":"iot/nodered/custom-components/custom-components/#nodos-de-configuracion","text":"Los nodos de configuraci\u00f3n son nodos que normalmente se usan para mantener conexiones con distintos servicios, como por ejemplo una conexi\u00f3n TCP, MQTT, WebSocket, etc. Y luego este nodo de configuraci\u00f3n que mantiene la conexi\u00f3n es consumido por otros nodos. Cuidado Si tu nodo de configuraci\u00f3n gestiona una conexi\u00f3n, por especial atenci\u00f3n el evento close , para cerrar la conexi\u00f3n ante futuros deploys. Para definir un nodo como configuraci\u00f3n es todo igual que los demas nodos, excepto: Fichero HTML - Definition - category : Tiene que ser config . Fichero HTM**L - **Edit Dialog : Cada propiedad tiene que ser nombrada como node-config-input-<property> Luego para ser consumido por otro nodo, en el Definition se crea una propiedad pero poniendo en el type que sea el identificador del nodo de configuraci\u00f3n. Esto har\u00e1 que en el Edit Dialog transforme el input en un select para poder elegir y/o editar el m\u00f3dulo de configuraci\u00f3n. Por \u00faltimo desde el Fichero JS se instancia con RED.nodes.getNode(config.<property>) . Con un ejemplo se ve todo mejor. En el siguiente ejemplo se va a crear un componente remote-server que solo almacena configuraci\u00f3n, no tiene ninguna l\u00f3gica remote-server.html remote-server.js <!-- Definition --> < script type = \"text/javascript\" > RED . nodes . registerType ( 'remote-server' ,{ category : 'config' , defaults : { host : { value : \"localhost\" , required : true }, port : { value : 1234 , required : true , validate : RED . validators . number () }, }, label : function () { return this . host + \":\" + this . port ; } }); </ script > <!-- Edit Dialog --> < script type = \"text/html\" data-template-name = \"remote-server\" > < div class = \"form-row\" > < label for = \"node-config-input-host\" >< i class = \"fa fa-bookmark\" >< /i> Host</label> < input type = \"text\" id = \"node-config-input-host\" > < /div> < div class = \"form-row\" > < label for = \"node-config-input-port\" >< i class = \"fa fa-bookmark\" >< /i> Port</label> < input type = \"text\" id = \"node-config-input-port\" > < /div> </ script > module . exports = function ( RED ) { function RemoteServerNode ( n ) { RED . nodes . createNode ( this , n ); const node = this ; node . host = n . host ; node . port = n . port ; node . on ( 'close' , function () { node . host = null ; node . port = null ; }) } RED . nodes . registerType ( \"remote-server\" , RemoteServerNode ); } Ahora para poder consumir el m\u00f3dulo desde otro m\u00f3dulo Fichero HTML Fichero JS <!-- Definition --> < script type = \"text/javascript\" > RED . nodes . registerType ( 'another-component' ,{ defaults : { server : { value : \"\" , type : \"remote-server\" }, }, }); </ script > <!-- Edit Dialog --> < script type = \"text/html\" data-template-name = \"another-component\" > < div class = \"form-row\" > < label for = \"node-input-server\" > Server < /label> < input type = \"text\" id = \"node-input-server\" > < /div> </ script > module . exports = function ( RED ) { function AnotherComponent ( config ) { RED . nodes . createNode ( this , config ); const node = this ; // Retrieve the config node node . server = RED . nodes . getNode ( config . server ); if ( node . server ) { // Do something with: // node.server.host // node.server.port } else { // No config node configured } } RED . nodes . registerType ( \"another-component\" , MyNode ); }","title":"Nodos de Configuraci\u00f3n"},{"location":"iot/nodered/custom-components/custom-components/#tests","text":"NUNCA PUBLIQUES COMPONENTES SIN TESTEAR Publicar un componente no es un proceso complejo, pero si requiere de ciertos pasos que no son f\u00e1ciles de revertir si algo est\u00e1 mal. Por favor antes de publicar cualquier cosa, cerci\u00f3rate bien que lo has testeado a muerte antes: Test manuales Test automatizados Unit Testing Integration Testing Para hacer tests manuales, lo m\u00e1s sencillo es instalar el propio componente (y as\u00ed puedes ver como funciona). La forma de hacerlo es con npm e indicando en que carpeta est\u00e1 el package.json del componente. Es recomendable a\u00f1adir --no-save si quieres que no te lo a\u00f1ada el package.json del Node-Red con el que vayas a testear el componente. npm i -- no - save < component - folder - path > Siempre que puedas, genera tests autom\u00e1ticos, ya que de los tests manuales no te puedes fiar 100%. Es cierto que generar tests automatizados en Node-Red no es del todo sencillo. Para poder hacerlos se recomienda usar node-red-node-test-helper . Este framework de tests se basa en Mocha . Para usarlo: Instala el paquete npm i -D node-red-node-test-helper . Customiza el package.json y a\u00f1ade a los scripts que el comando test para que ejecute los tests buscando en la carpeta tests todos los ficheros que acaben como _spec.js ... \"scripts\" : { \"test\" : \"mocha \\\"tests/**/*_spec.js\\\"\" }, ... Crea la carpeta tests y para cada componente crea su fichero <component-name>_spec.js . A falta de documentar bien los tests, m\u00edrate bien la docu del paquete. Aqu\u00ed tienes un ejemplo de como testea el componente lower-case , que todas las inputs de tipo string las pasa a min\u00fasculas. lower-case_spec.js const helper = require ( \"node-red-node-test-helper\" ); const lowerNode = require ( \"../lower-case.js\" ); describe ( 'lower-case Node' , function () { afterEach ( function () { helper . unload (); }); it ( 'should be loaded' , function ( done ) { const flow = [ { id : \"n1\" , type : \"lower-case\" , name : \"test name\" } ]; helper . load ( lowerNode , flow , function () { const n1 = helper . getNode ( \"n1\" ); n1 . should . have . property ( 'name' , 'test name' ); done (); }); }); it ( 'should make payload lower case' , function ( done ) { const flow = [ { id : \"n1\" , type : \"lower-case\" , name : \"test name\" , wires : [[ \"n2\" ]] }, { id : \"n2\" , type : \"helper\" } ]; helper . load ( lowerNode , flow , function () { const n1 = helper . getNode ( \"n1\" ); const n2 = helper . getNode ( \"n2\" ); n2 . on ( \"input\" , function ( msg ) { msg . should . have . property ( 'payload' , 'uppercase' ); done (); }); n1 . receive ({ payload : \"UpperCase\" }); }); }); });","title":"Tests"},{"location":"iot/nodered/custom-components/custom-components/#ejemplos","text":"Se recomienda, a modo de documentaci\u00f3n del propio componente, a\u00f1adir al menos un ejemplo que muestre como se trabaja con \u00e9l. As\u00ed pues, un ejemplo no es m\u00e1s que: Coger una instancia de Node-Red Instalarle solo el componente Crear un flujo us\u00e1ndolo Exportar ese flujo Guardarlo en la carpeta examples con un nombre indicativo (como example1.json ) No tiene mucha historia, pero se agradece mucho.","title":"Ejemplos"},{"location":"iot/nodered/custom-components/custom-components/#apariencia-del-nodo","text":"En un componente se pueden customizar 3 cosas respecto a la apariencia: Icono Color de fondo Etiqueta Pero adem\u00e1s se le pueden a\u00f1adir botones, tanto a la izquierda (como en el nodo Inject ), como a la derecha (como en el nodo Debug ).","title":"Apariencia del Nodo"},{"location":"iot/nodered/custom-components/custom-components/#icono","text":"Para especificar el icono de un componente es tan sencillo como poner Fichero HTML -> Definition -> icon igual a un string del icono < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition icon : \"arrow-in\" , }) </ script > Este string puede ser: El nombre de uno de los iconos de stock que trae Node-Red (b\u00e1sicamente son los iconos de Angular Material ) Ejemplo: icon: \"arrow-in\", Un icono de Font Awesome 4.7 Ejemplo: icon: \"fa-automobile\", Un icono espec\u00edfico del m\u00f3dulo. Algunos iconos de stock de Node-Red Para los iconos custom / espec\u00edficos del m\u00f3dulo, Node-Red buscar\u00e1 la carpeta icons en donde se encuentre el Fichero JS . Estos iconos deben cumplir unas normas: El nombre debe ser \u00fanico, ya que Node-Red va a buscar todos los iconos y los va a agrupar juntos. Deber\u00edan de tener un aspect ratio de 2:3. Su tama\u00f1o m\u00ednimo deber\u00eda ser 40 x 60 px. Tambi\u00e9n los puede editar el usuario El usuario puede editar que icono tiene el node desde la pesta\u00f1a appearance en el Edit Dialog . Pero esto se puede bloquear para que no suceda. Para ello hay que a\u00f1adir una property icon dentro del default del Definition ( Fichero HTML ). Un ejemplo de nodo que bloquea el icono es el ui_button del paquete node-red-dashboard -> c\u00f3digo .","title":"Icono"},{"location":"iot/nodered/custom-components/custom-components/#color-de-fondo","text":"Para especificar el color de fondo de un componente es tan sencillo como poner Fichero HTML -> Definition -> color igual a un string RGB de color hexadecimal < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition color : \"#a6bbcf\" , }) </ script > Colores t\u00edpicos usados para los componentes","title":"Color de fondo"},{"location":"iot/nodered/custom-components/custom-components/#etiqueta","text":"Para customizar las etiquetas de un componente es tan sencillo como poner Fichero HTML -> Definition -> label , paletteLabel , labelStyle , inputLabels , outputLabels < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition label : function () { return this . name || \"my name\" }, paletteLabel : \"MyName\" , labelStyle : function () { return this . name ? \"node_label_italic\" : \"\" }, inputLabels : \"input parameter\" , outputLabels : [ \"main output\" , \"error output\" , \"code output\" ], }) </ script > Todas ellas permiten definir o modificar la etiqueta, ya sea de manera est\u00e1tica (con un string) o din\u00e1mica (con una funci\u00f3n). Las propiedades son: label : Es la etiqueta del nodo. paleteLabel : Es la etiqueta del nodo en la paleta. labelStyle : Estilo CSS de la etiqueta en el nodo. inputLabels : Es la etiqueta del puerto de entrada del nodo. outputLabel : Es la etiqueta de los puertos de salida del nodo.","title":"Etiqueta"},{"location":"iot/nodered/custom-components/custom-components/#label","text":"Es la etiqueta del nodo. Si tiene valor din\u00e1mico, la etiqueta se carga cuando el nodo se carga en el editor. Un ejemplo ser\u00eda < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition label : function () { return this . name || \"my name\" }, }) </ script > Si no se especifica, se carga como valor por defecto el nombre del componente. Se suele usar por convenio el nombre del nodo editado por el usuario como la etiqueta del nodo. Nada de credenciales No puedes poner como etiqueta ning\u00fan campo de las credentials","title":"label"},{"location":"iot/nodered/custom-components/custom-components/#paletelabel","text":"Es la etiqueta del nodo en la paleta. Como valor por defecto tiene el mismo que label . Si tiene valor din\u00e1mico, la etiqueta se carga cuando el nodo se a\u00f1ade a la paleta.","title":"paleteLabel"},{"location":"iot/nodered/custom-components/custom-components/#labelstyle","text":"Es el estilo CSS que tiene la etiqueta. Si no se especifica ninguna, por defecto tiene node_label . Ejemplo: < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition labelStyle : function () { return ( this . name ) ? \"node_label_italic\" : \"\" }, }) </ script >","title":"labelStyle"},{"location":"iot/nodered/custom-components/custom-components/#ports-labels-inputlabels-y-outputlabels","text":"Las etiquetas de los puertos de entrada y salidas son respectivamente inputLabels y outputLabels . Se pueden definir est\u00e1ticamente o din\u00e1micante. Si la salida es definida din\u00e1micamente, la funci\u00f3n tiene que tener un argumento de entrada, que ser\u00e1 el \u00edndice de cada entrada empezando por 0 Puertos Est\u00e1ticos Puertos din\u00e1micos < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition inputLabels : \"input parameter\" , outputLabels : [ \"main output\" , \"error output\" , \"code output\" ], }) </ script > < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition inputLabels : \"input parameter\" , outputLabels : function ( index ) { return \"output number \" + index }, }) </ script > El usuario puede modificarlas Todos los puertos pueden ser editados por el usuario manualmente en el node settings del Edit Dialog","title":"Ports labels: inputLabels y outputLabels"},{"location":"iot/nodered/custom-components/custom-components/#alineamiento","text":"Por defecto, tanto el icono como las etiquetas est\u00e1n alineadas a la izquierda dentro del nodo. Pero esto se puede modificar con la propiedad align del Fichero HTML - Definition < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition align : \"right\" , }) </ script > Alineamientos de un nodo","title":"Alineamiento"},{"location":"iot/nodered/custom-components/custom-components/#botones","text":"Los nodos normalmente no tienen botones, ya que la idea no es usar Node-Red desde el editor. De hecho el editor se puede deshabilitar. Pero hay nodos especiales como el Inject y el Debug , a los que se les ha a\u00f1adido un bot\u00f3n a la izquierda y a la derecha respectivamente. Si necesitas que tu nodo tenga esta funcionalidad tienes que a\u00f1adir la priopiedad button Fichero HTML -> Definiton -> button : {} Esta propiedad es un objeto que puede contener: Una funci\u00f3n onclick para capturar cuando se aprieta. Una funci\u00f3n enabled que devuelve un booleano para habilitar o deshabilitar el bot\u00f3n. Una funci\u00f3n visible que devuelve un booleano para esconder o mostrar el bot\u00f3n. Un booleano toggle que permite convertir el bot\u00f3n en un toggle-button. Las 3 primeras ser\u00edan para un bot\u00f3n normal. La \u00faltima permite convertir el bot\u00f3n en un toggle-button. Para ello necesitas crear una propiedad booleana dentro del defaults y referenciarla en la propiedad toggle . Aqu\u00ed tienes dos ejemplos, el primero de un bot\u00f3n normal, y el segundo un toggle-button Bot\u00f3n normmal Toggle button < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition ... button : { enabled : function () { // return whether or not the button is enabled, based on the current // configuration of the node return ! this . changed }, visible : function () { // return whether or not the button is visible, based on the current // configuration of the node return this . hasButton }, onclick : function () { ... } }, ... }) </ script > < script type = \"text/javascript\" > RED . nodes . registerType ( 'component-name' , { // Definition defaults : { ... buttonState : { value : true }, ... }, ... button : { toggle : \"buttonState\" , onclick : function () { ... } }, ... }) </ script >","title":"Botones"},{"location":"iot/nodered/custom-components/custom-components/#publicar-componente","text":"A parte de preparar el package.json como se especifica en la secci\u00f3n correspondiente , hay ciertos pasos m\u00e1s que deber\u00edas cumplir: A\u00f1ade una licencia Prepara un buen README.md Despu\u00e9s puedes publicar tus componentes como paquetes npm, pero aqu\u00ed no acaba la cosa. Por \u00faltimo tienes que a\u00f1adir tu paquete a la Node-RED Library . Para hacer esto tienes que: Crearte una cuenta / iniciar sesi\u00f3n Darle al bot\u00f3n + Elegir Node Seguir las instrucciones que indican, que a estas alturas es solo a\u00f1adir el nombre de tu paquete npm Darle a add node Esperar, porque tardar\u00e1 un tiempo entre que se da de alta y dem\u00e1s Luego ya podr\u00e1s instalar tu paquete desde dentro de Node-Red. Formulario de alta de la Node-RED Library","title":"Publicar componente"},{"location":"linux/bluetooth/","text":"Bluetooth \u00b6 Cambiar el nombre del Bluetooth (hecho en Ubuntu 22.04) a un <name> concreto. Tienes que averiguar la direcci\u00f3n MAC de tu dispositivo -> <mac> Luego tienes que editar con sudo el fichero /var/lib/bluetooth/<mac>/settings , en [General] tienes que a\u00f1adir Name=<name> /var/lib/bluetooth/ /settings [ General ] Name = \"<name>\"","title":"Bluetooth"},{"location":"linux/bluetooth/#bluetooth","text":"Cambiar el nombre del Bluetooth (hecho en Ubuntu 22.04) a un <name> concreto. Tienes que averiguar la direcci\u00f3n MAC de tu dispositivo -> <mac> Luego tienes que editar con sudo el fichero /var/lib/bluetooth/<mac>/settings , en [General] tienes que a\u00f1adir Name=<name> /var/lib/bluetooth/ /settings [ General ] Name = \"<name>\"","title":"Bluetooth"},{"location":"linux/comandos/linux-fecha-hora/","text":"Fecha y Hora \u00b6 Para ajustar la fecha usamos el comando date Fecha \u00b6 sudo date +%Y%m%d -s \"20170628\" Hora (formato 24 horas) \u00b6 sudo date +%T -s \"12:47:24\" Hora (formato 12 horas) \u00b6 sudo date +%T%p -s \"12:47:24AM\" sudo date +%T%p -s \"12:47:24PM\" Para m\u00e1s info mirar siempre la ayuda \u00b6 date --help Referencias \u00b6 Fecha y Hora en la terminal","title":"Fecha y Hora"},{"location":"linux/comandos/linux-fecha-hora/#fecha-y-hora","text":"Para ajustar la fecha usamos el comando date","title":"Fecha y Hora"},{"location":"linux/comandos/linux-fecha-hora/#fecha","text":"sudo date +%Y%m%d -s \"20170628\"","title":"Fecha"},{"location":"linux/comandos/linux-fecha-hora/#hora-formato-24-horas","text":"sudo date +%T -s \"12:47:24\"","title":"Hora (formato 24 horas)"},{"location":"linux/comandos/linux-fecha-hora/#hora-formato-12-horas","text":"sudo date +%T%p -s \"12:47:24AM\" sudo date +%T%p -s \"12:47:24PM\"","title":"Hora (formato 12 horas)"},{"location":"linux/comandos/linux-fecha-hora/#para-mas-info-mirar-siempre-la-ayuda","text":"date --help","title":"Para m\u00e1s info mirar siempre la ayuda"},{"location":"linux/comandos/linux-fecha-hora/#referencias","text":"Fecha y Hora en la terminal","title":"Referencias"},{"location":"linux/comandos/linux-ficheros/","text":"Encontrar un fichero \u00b6 Supongamos que quiero encontrar el fichero config.ini y por ejemplo queremos buscarlo en el directorio home (~/). Desde la terminal pondr\u00eda find ~/ -type f -name \"config.ini\" La versi\u00f3n Python de esto se explica aqu\u00ed -> Python version Aqu\u00ed por ejemplo buscamos todos los ficheros .txt en el directorio home import os , fnmatch def find ( pattern , path ): result = [] for root , dirs , files in os . walk ( path ): for name in files : if fnmatch . fnmatch ( name , pattern ): result . append ( os . path . join ( root , name )) return result find ( '*.txt' , '/home' ) Referencias \u00b6 Link de ayuda","title":"Ficheros"},{"location":"linux/comandos/linux-ficheros/#encontrar-un-fichero","text":"Supongamos que quiero encontrar el fichero config.ini y por ejemplo queremos buscarlo en el directorio home (~/). Desde la terminal pondr\u00eda find ~/ -type f -name \"config.ini\" La versi\u00f3n Python de esto se explica aqu\u00ed -> Python version Aqu\u00ed por ejemplo buscamos todos los ficheros .txt en el directorio home import os , fnmatch def find ( pattern , path ): result = [] for root , dirs , files in os . walk ( path ): for name in files : if fnmatch . fnmatch ( name , pattern ): result . append ( os . path . join ( root , name )) return result find ( '*.txt' , '/home' )","title":"Encontrar un fichero"},{"location":"linux/comandos/linux-ficheros/#referencias","text":"Link de ayuda","title":"Referencias"},{"location":"linux/redes/redes-iptables/","text":"iptables \u00b6 TODO","title":"iptables"},{"location":"linux/redes/redes-iptables/#iptables","text":"TODO","title":"iptables"},{"location":"linux/redes/redes-ipv6/","text":"IPv6 \u00b6 TODO","title":"IPv6"},{"location":"linux/redes/redes-ipv6/#ipv6","text":"TODO","title":"IPv6"},{"location":"linux/redes/redes-linux/","text":"REDES \u00b6 Redes WiFi's \u00b6 Para ver las redes WiFi disponibles usamos el comando sudo iw dev wlan0 scan | grep SSID Escanear dispositivos dentro de una red \u00b6 Primero instalamos nmap sudo apt install nmap Despu\u00e9s comprobamos con ifconfig que IP tenemos y que m\u00e1scara de red sudo ifconfig Mi IP es 192.168.1.132 y la m\u00e1scara de red es 255.255.255.0 (24 bits). Luego uso este comando para ver los dispositivos en mi red sudo nmap -sP 192.168.1.0/24 Redireccionamiento del Tr\u00e1fico -> IPTables \u00b6","title":"Linux"},{"location":"linux/redes/redes-linux/#redes","text":"","title":"REDES"},{"location":"linux/redes/redes-linux/#redes-wifis","text":"Para ver las redes WiFi disponibles usamos el comando sudo iw dev wlan0 scan | grep SSID","title":"Redes WiFi's"},{"location":"linux/redes/redes-linux/#escanear-dispositivos-dentro-de-una-red","text":"Primero instalamos nmap sudo apt install nmap Despu\u00e9s comprobamos con ifconfig que IP tenemos y que m\u00e1scara de red sudo ifconfig Mi IP es 192.168.1.132 y la m\u00e1scara de red es 255.255.255.0 (24 bits). Luego uso este comando para ver los dispositivos en mi red sudo nmap -sP 192.168.1.0/24","title":"Escanear dispositivos dentro de una red"},{"location":"linux/redes/redes-linux/#redireccionamiento-del-trafico-iptables","text":"","title":"Redireccionamiento del Tr\u00e1fico -&gt; IPTables"},{"location":"linux/redes/redes-ssh/","text":"SSH \u00b6 Instalaci\u00f3n y configuraci\u00f3n \u00b6 Servidor \u00b6 Instalaci\u00f3n sudo apt install openssh-server Esto genera 4 pares de ficheros de clave p\u00fablica-privada en el servidor con 4 algoritmos de cifrado: Algoritmo Fichero Clave Privada Fichero Clave P\u00fablica DSA ssh_host_dsa_key ssh_host_dsa_key.pub ECDSA ssh_host_ecdsa_key ssh_host_ecdsa_key.pub ED25519 ssh_host_ed25519_key ssh_host_ed25519_key.pub RSA ssh_host_rsa_key ssh_host_rsa_key.pub Configuraci\u00f3n en /etc/ssh/sshd_config . Una buena pr\u00e1ctica es configurar que el acceso por root solo se haga a trav\u00e9s de clave p\u00fablica con PermitRootLogin without-password Cliente \u00b6 Instalaci\u00f3n sudo apt install openssh-client Configuraci\u00f3n en /etc/ssh/ssh_config Acceso con usuario-contrase\u00f1a \u00b6 Lo t\u00edpico para iniciar sesi\u00f3n en SSH es usar las credenciales del usuario y contrase\u00f1a ssh <usuario>@<ip> O tambi\u00e9n se puede usar ssh -l <usuarios> <ip> Luego nos pedir\u00e1 la contrase\u00f1a, y la primera vez nos pedir\u00e1 aceptar la conexi\u00f3n. Ejecutar comandos sin abrir una terminal remota \u00b6 Tambi\u00e9n se pueden ejecutar comandos o scripts sin abrir una consola remota ssh <user>@<ip> <comando> ssh <user>@<ip> '<script>' Acceso con par clave p\u00fablico-privada sin passphrase \u00b6 Lo l\u00f3gico en SSH es usar el par claves p\u00fablico-privada para acceder por SSH, y no tener que estar poniendo usuario-contrase\u00f1a cada vez que queremos acceder (a parte de que es menos inseguro). Crear par de clave privada-p\u00fablica (en el equipo local): Para crear el par de claves usamos el comando ssh-keygen -t <algoritmo> <algortimo> -> dsa | ed25519 | rsa | rsa1 Saldr\u00e1 un di\u00e1logo y nos pedir\u00e1 el nombre para el fichero. Tambi\u00e9n nos pedir\u00e1 un passphrase (frase de paso), que es opcional, lo dejamos en blanco. Esto lo vemos en la siguiente secci\u00f3n. Esto generar\u00e1 dos ficheros, por ejemplo si usamos rsa y el nombre por defecto, tendremos: En ~/.ssh/ los ficheros de claves. id_rsa clave privada. id_rsa.pub clave p\u00fablica. Copiar clave p\u00fablica (en el equipo remoto): Para poder acceder con este m\u00e9todo, hay que \"publicar\" la clave p\u00fablica en el equipo remoto. Esto consiste en meter la clave p\u00fablica en el fichero ~/.ssh/authorized_keys del equipo remoto. Hay varios m\u00e9todos pero el m\u00e1s sencillo es con el comando ssh-copy-id -i <ruta al fichero de clave privada> <usuario>@<ip> Por ejemplo, si queremos copiar nuestra rsa clave que est\u00e1 en ~/.ssh/ en el equipo con usuario pepe con la ip 192.168.1.13 haremos ssh-copy-id -i ~/.ssh/id_rsa pepe@192.168.1.13 Ahora para acceder no nos pedir\u00e1 contrase\u00f1a. Ventajas: Es m\u00e1s seguro Si se cambia el password del usuario, nosotros no necesitaremos saberlo (no nos afecta). Acceso con par p\u00fablico-privada con passphrase \u00b6 El passphrase es un second factor authentication. Si a\u00f1adimos una passphrase a nuestro par de claves, al acceder por ssh nos la pedir\u00e1, como cuando accedemos por usuario y la contrase\u00f1a. Ventajas: Es m\u00e1s seguro. Si alguien nos roba la clave privada, no podr\u00e1 usarla si no sabe la passphrase. Para que sea m\u00e1s c\u00f3modo esto, usamos el programa ssh-agent , y as\u00ed solo tendremos que poner el passphrase la primera vez y ya est\u00e1. ssh-agent \u00b6 El programa / servicio ssh-agent nos permite no tener que estar introduciendo la passphrase cada vez que nos conectemos. Lo ponemos una vez y listo. Los pasos para que todo esto funcionen son: Comprobamos que est\u00e9 ejecutando ssh-agent ps aux | grep ssh-agent Si no se est\u00e1 ejecutando lo activamos con ssh-agent /bin/bash Una vez se est\u00e1 ejecutando, se a\u00f1ade la clave privada ssh-add <ruta fichero clave privada> Por ejemplo ssh-add ~/.ssh/id_rsa Utilidades de ssh-agent : Ver las claves cargadas ssh-add -L Ver sus huellas ssh-add -l Para eliminar una clave ssh-add -d <fichero-clave-privada> Eliminar todas las claves ssh-add -D Crear clave p\u00fablica (si no existe) desde la clave privada Supongamos que por lo que sea solo tenemos una clave privada y queremos generar la p\u00fablica ssh-keygen -y -f <fichero clave privada> >> <fichero clave p\u00fablica> * Por ejemplo ```bash ssh-keygen -y -f id_rsa >> id_rsa.pub ``` El proceso inverso, sacar la privada de la p\u00fablica, no es posible. authorized_keys -> Gestionar accesos a mi equipo \u00b6 El servidor SSH guarda las claves p\u00fablicas autorizadas para que puedan en el fichero ~/.ssh/authorized_keys . Si quisiera que una clave p\u00fablica no se pudiera usar para acceder en mi servidor, la borro de ese fichero. El formato que tiene cada l\u00ednea es <tipo-clave> <clave-p\u00fablica-cliente> <comentario> El <tipo-clave> me dice el algoritmo con el que se ha creado. La <clave-publica-cliente> es la clave del cliente que se va a conectar a mi equipo. El <comentario> suele ser el <usuario>@<equipo> . known_hosts -> Gestionar equipos a los que accedo \u00b6 El cliente tiene un control de todos los servidores SSH a los que se conecta. Esto lo hace guardando las claves p\u00fablicas de los servidores en el fichero ~/.ssh/known_hosts . Tiene 3 campos <hash-ip-equipo-remoto> <tipo-clave> <clave-publica-servidor> Problemas con acceso a la misma ip pero distintos hosts \u00b6 Supongamos que yo ten\u00eda un pc al que acced\u00eda con la ip 192.168.1.120 . Por lo que sea, he formateado y trato de volver a acceder a esa m\u00e1quina formateada. Lo m\u00e1s seguro es que me salga un mensaje de error diciendome que el remote host ha cambiado (del que yo ten\u00eda guardado), y puedo sufrir un ataque man-in-the-middle . Si estamos completamente seguros que no hay nadie en medio, y accedo directamente a mi m\u00e1quina, l que debemos hacer es borrar el known_hosts el anterior equipo. Tranquilos, que el propio comando te lo dan en el mensaje de ayuda, solo hay que hacer copia-pega. El comando es as\u00ed: ssh-keygen [ -f \"<path-to-known_hosts>\" ] -R <ip> En nuestro caso ser\u00eda ssh-keygen -f \"~/.ssh/known_hosts\" -R 192.168.1.120 . La parte de -f \"~/.ssh/known_hosts\" es opcional, podr\u00edamos hacer ssh-keygen -R 192.168.1.120 y ser\u00eda totalmente v\u00e1lido. Forwarding \u00b6 Esta t\u00e9cnica permite reenviar \"algo\", desde un equipo al otro, pasando por otro. Agent Forwarding \u00b6 Imaginemos que existen 3 m\u00e1quinas, A, B, C, y tenemos el siguiente problema: A <-> B = A y B se pueden comunicar por SSH. B <-> C = B y C se pueden comunicar por SSH. A C = A y C no se pueden comunicar por SSH. Agent forwarding nos permite que A <-> C a trav\u00e9s de B, es decir A <-B-> C. Esto es posible haciendo: Activando en el servidor de B /etc/ssh/sshd_config la opci\u00f3n AllowAgentForwarding yes Activando en el agente / cliente de B /etc/ssh/ssh_config la opci\u00f3n ForwardAgent yes As\u00ed ahora, para hacer A <-> C, lo que har\u00eda es: Accedo desde A por SSH a B = A -> B. Accedo desde B por SSH a C = B -> C. Y ahora en la shell ver\u00e9 que estoy en C. Parece obvio, pero si estas opciones no est\u00e1n activadas, no se podr\u00eda hacer. La idea al final de todo esto, es que si tengo muchas m\u00e1quinas C's: C1, C2, C3, etc. Es recomendable que no est\u00e9n expuestas al exterior. Lo mejor es tener un \"basti\u00f3n\", es decir, una m\u00e1quina B, que est\u00e1 autenticada con claves publico-privada + passphrase con cada Cx, y yo desde A solo tengo acceso a B. X11 Forwarding \u00b6 Si accedo por SSH de una m\u00e1quina A a otra B, A -> B, y ejecuto una aplicaci\u00f3n gr\u00e1fica (X11), no la veo en mi equipo A, solo se ve en el equipo B. La forma de poder ver en A una app X11 ejecutada en B es con la t\u00e9cnica X11 forwarding. Para poder aplicar esta t\u00e9cnica tengo que: Habilitar en el servidor de B /etc/ssh/sshd_config las opciones X11Forwarding yes X11DisplayOffset 10 Si lo que quiero es ejecutar una aplicaci\u00f3n gr\u00e1fica de C en mi m\u00e1quina A, debo de: Habilitar en el cliente/agente de B /etc/ssh/ssh_config la opci\u00f3n FordwardX11 yes Al ejecutar una app X11 remota, aunque la vea en mi equipo local, los recursos que consume son de la m\u00e1quina remota. Transferir ficheros por SSH \u00b6 SSH no solo permite iniciar sesiones o ejecutar comandos en remoto. Tambi\u00e9n permite la transferencia de ficheros a trav\u00e9s de dos protocolos, SCP y SFTP. SCP \u00b6 SCP es un protocolo que se puede usar con SSH para poder compartir ficheros. Su sintaxis es similar a la cp , pero \"generalizada\" scp [[ <usuario-origen>@ ] <host-origen>: ] <fichero-origen> [[ <usuario-destino>@ ] <host-destino>: ] <fichero-destino> scp -r [[ <usuario-origen>@ ] <host-origen>: ] <directorio-origen> [[ <usuario-destino>@ ] <host-destino>: ] <directorio-destino> Visto as\u00ed es muy lioso, vamos a verlo con ejemplos. M\u00e1quina Usuario Host A usera 192.168.1.120 B userb 192.168.1.121 C userc 192.168.1.122 En todos los ejemplos voy a suponer que estoy en la m\u00e1quina A: Pasar fichero mifichero.txt en el $HOME origen, a la carpeta micarpeta del $HOME destino A -> B (de local a remoto) scp $HOME /mifichero.txt userb@192.168.1.121: $HOME /micarpeta/ B -> A (de remoto a local) scp userb@192.168.121: $HOME /fichero.txt $HOME /micarpeta/ B -> C (de remoto a remoto) scp userb@192.168.1.121: $HOME /fichero.txt userc@192.168.1.122: $HOME /micarpeta/ Pasar la carpeta micarpeta del $HOME origen al $HOME destino A -> B (de local a remoto) scp -r $HOME /micarpeta userb@192.168.1.121: $HOME / B -> A (de remoto a local) scp -r userb@192.168.1.121: $HOME /micarpeta $HOME / B -> C (de remoto a remoto) scp -r userb@192.168.1.121: $HOME /micarpeta userc@192.168.1.122: $HOME / SFTP \u00b6 SFTP es SSH FTP, es decir, una comunicaci\u00f3n FTP sobre SSH. No confundir con FTPS, que es una variaci\u00f3n de FTP securizada. Para usarla hacemos sftp <usuario>@<host> Se nos abrir\u00e1 una shell que podemos usar como si fuera una shell FTP. Tambi\u00e9n podemos abrir una conexi\u00f3n SFTP desde cualquier programa FTP cliente como Filezilla T\u00faneles SSH \u00b6 Esto se conoce como Port Fordwarding o TCP Fordwarding. Supongamos que tenemos: Maquina Usuario Host Puerto SSH A usera hosta porta A<->B B userb hostb portb B<->A, B<->C C userc hostc portc C<->B Con este escenario, tenemos 3 tipos de t\u00faneles: Local Fordwarding (-L): Traer un puerto (servicio) remoto (de A \u00f3 C) a uno local (de C \u00f3 A) por B. Remote Fordwarding (-R): Enviar un puerto (servicio) local (de A \u00f3 C) a uno remoto (de C \u00f3 A) por B. Dynamic Fordwarding (-D): ni idea B\u00e1sicamente consiste en traer / enviar un puerto local / remoto desde una m\u00e1quina a otra, pasando por una m\u00e1quina intermedia. Local Fordwarding \u00b6 Local Fordwarding consiste en traer un puerto remoto (de otra m\u00e1quina) a un puerto de mi m\u00e1quina local. Es decir, es como si desde mi puerto local estuviera en el puerto remoto de la otra m\u00e1quina. Comando y variantes: ssh -f -N -L [ <bind-address>: ] <port>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -L [ <bind-address>: ] <port>:<remote-socket> [ <user>@<host> ] ssh -f -N -L <local-socket>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -L <local-socket>:<remote-socket> [ <user>@<host> ] Supongamos que A con acceso libre a Internet, y C con acceso restringido Internet (no puede acceder a ciertos servicios / web). As\u00ed que nos interesar\u00eda: Desde C, traer hosta:porta a hostc:portc, por B ssh -f -NL portc:hosta:porta userb@hostb Ahora supongamos que C tiene un servicio NGINX en su puerto 80, y lo queremos poder consumir: Desde A, traer el puerto 80 de C al puerto 1080 de A, por B ssh -f -NL 1080 :hostc:80 userb@hostb Tambi\u00e9n podr\u00edamos hacer: Desde B, traer el pierto de C al puerto 1080 de B ssh -f -NL Desde A, consumir ese NGINX accediendo en el navegador a hostb:1080 Remote Forwarding \u00b6 Remote Fordwarding consiste en enviar un puerto local (de mi m\u00e1quina) a un puerto de una m\u00e1quina remota. Es decir, es como si desde un puerto de una m\u00e1quina remota estuviera en el puerto de mi m\u00e1quina local. Comando y sus variantes: ssh -f -N -R [ <bind-address>: ] <port>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -R [ <bind-address>: ] <port>:<local-socket> [ <user>@<host> ] ssh -f -N -R <remote-socket>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -R <remote-socket>:<local-socket> [ <user>@<host> ] ssh -f -N -R [ <bind-address>: ] <port> [ <user>@<host> ] Supongamos que Dynamic Fordwarding \u00b6 ssh -f -N -D [ <bind-address>: ] <port> Conexi\u00f3n a Github con par clave p\u00fablico-privada \u00b6 Generar par de claves con passphrase mediante ssh-keygen -t rsa -b 4096 -C \"<github email>\" A\u00f1adir la clave al ssh-agent ssh-add -K <ruta al fichero de clave privada> A\u00f1adir la clave p\u00fablica en Github Copiar la clave p\u00fablica en el clipboard pbcopy < <ruta al fichero de clave p\u00fablica> Pegar la clave p\u00fablica en Github Ir a Settings -> SSH and GPG Keys -> New SSH or Add SSH Key Poner un t\u00edtulo para que se entienda de que equipo es la clave y pegar la clave en el campo Key Por \u00faltimo, darle al bot\u00f3n Add SSH key , confirmar y listo.","title":"SSH"},{"location":"linux/redes/redes-ssh/#ssh","text":"","title":"SSH"},{"location":"linux/redes/redes-ssh/#instalacion-y-configuracion","text":"","title":"Instalaci\u00f3n y configuraci\u00f3n"},{"location":"linux/redes/redes-ssh/#servidor","text":"Instalaci\u00f3n sudo apt install openssh-server Esto genera 4 pares de ficheros de clave p\u00fablica-privada en el servidor con 4 algoritmos de cifrado: Algoritmo Fichero Clave Privada Fichero Clave P\u00fablica DSA ssh_host_dsa_key ssh_host_dsa_key.pub ECDSA ssh_host_ecdsa_key ssh_host_ecdsa_key.pub ED25519 ssh_host_ed25519_key ssh_host_ed25519_key.pub RSA ssh_host_rsa_key ssh_host_rsa_key.pub Configuraci\u00f3n en /etc/ssh/sshd_config . Una buena pr\u00e1ctica es configurar que el acceso por root solo se haga a trav\u00e9s de clave p\u00fablica con PermitRootLogin without-password","title":"Servidor"},{"location":"linux/redes/redes-ssh/#cliente","text":"Instalaci\u00f3n sudo apt install openssh-client Configuraci\u00f3n en /etc/ssh/ssh_config","title":"Cliente"},{"location":"linux/redes/redes-ssh/#acceso-con-usuario-contrasena","text":"Lo t\u00edpico para iniciar sesi\u00f3n en SSH es usar las credenciales del usuario y contrase\u00f1a ssh <usuario>@<ip> O tambi\u00e9n se puede usar ssh -l <usuarios> <ip> Luego nos pedir\u00e1 la contrase\u00f1a, y la primera vez nos pedir\u00e1 aceptar la conexi\u00f3n.","title":"Acceso con usuario-contrase\u00f1a"},{"location":"linux/redes/redes-ssh/#ejecutar-comandos-sin-abrir-una-terminal-remota","text":"Tambi\u00e9n se pueden ejecutar comandos o scripts sin abrir una consola remota ssh <user>@<ip> <comando> ssh <user>@<ip> '<script>'","title":"Ejecutar comandos sin abrir una terminal remota"},{"location":"linux/redes/redes-ssh/#acceso-con-par-clave-publico-privada-sin-passphrase","text":"Lo l\u00f3gico en SSH es usar el par claves p\u00fablico-privada para acceder por SSH, y no tener que estar poniendo usuario-contrase\u00f1a cada vez que queremos acceder (a parte de que es menos inseguro). Crear par de clave privada-p\u00fablica (en el equipo local): Para crear el par de claves usamos el comando ssh-keygen -t <algoritmo> <algortimo> -> dsa | ed25519 | rsa | rsa1 Saldr\u00e1 un di\u00e1logo y nos pedir\u00e1 el nombre para el fichero. Tambi\u00e9n nos pedir\u00e1 un passphrase (frase de paso), que es opcional, lo dejamos en blanco. Esto lo vemos en la siguiente secci\u00f3n. Esto generar\u00e1 dos ficheros, por ejemplo si usamos rsa y el nombre por defecto, tendremos: En ~/.ssh/ los ficheros de claves. id_rsa clave privada. id_rsa.pub clave p\u00fablica. Copiar clave p\u00fablica (en el equipo remoto): Para poder acceder con este m\u00e9todo, hay que \"publicar\" la clave p\u00fablica en el equipo remoto. Esto consiste en meter la clave p\u00fablica en el fichero ~/.ssh/authorized_keys del equipo remoto. Hay varios m\u00e9todos pero el m\u00e1s sencillo es con el comando ssh-copy-id -i <ruta al fichero de clave privada> <usuario>@<ip> Por ejemplo, si queremos copiar nuestra rsa clave que est\u00e1 en ~/.ssh/ en el equipo con usuario pepe con la ip 192.168.1.13 haremos ssh-copy-id -i ~/.ssh/id_rsa pepe@192.168.1.13 Ahora para acceder no nos pedir\u00e1 contrase\u00f1a. Ventajas: Es m\u00e1s seguro Si se cambia el password del usuario, nosotros no necesitaremos saberlo (no nos afecta).","title":"Acceso con par clave p\u00fablico-privada sin passphrase"},{"location":"linux/redes/redes-ssh/#acceso-con-par-publico-privada-con-passphrase","text":"El passphrase es un second factor authentication. Si a\u00f1adimos una passphrase a nuestro par de claves, al acceder por ssh nos la pedir\u00e1, como cuando accedemos por usuario y la contrase\u00f1a. Ventajas: Es m\u00e1s seguro. Si alguien nos roba la clave privada, no podr\u00e1 usarla si no sabe la passphrase. Para que sea m\u00e1s c\u00f3modo esto, usamos el programa ssh-agent , y as\u00ed solo tendremos que poner el passphrase la primera vez y ya est\u00e1.","title":"Acceso con par p\u00fablico-privada con passphrase"},{"location":"linux/redes/redes-ssh/#ssh-agent","text":"El programa / servicio ssh-agent nos permite no tener que estar introduciendo la passphrase cada vez que nos conectemos. Lo ponemos una vez y listo. Los pasos para que todo esto funcionen son: Comprobamos que est\u00e9 ejecutando ssh-agent ps aux | grep ssh-agent Si no se est\u00e1 ejecutando lo activamos con ssh-agent /bin/bash Una vez se est\u00e1 ejecutando, se a\u00f1ade la clave privada ssh-add <ruta fichero clave privada> Por ejemplo ssh-add ~/.ssh/id_rsa Utilidades de ssh-agent : Ver las claves cargadas ssh-add -L Ver sus huellas ssh-add -l Para eliminar una clave ssh-add -d <fichero-clave-privada> Eliminar todas las claves ssh-add -D Crear clave p\u00fablica (si no existe) desde la clave privada Supongamos que por lo que sea solo tenemos una clave privada y queremos generar la p\u00fablica ssh-keygen -y -f <fichero clave privada> >> <fichero clave p\u00fablica> * Por ejemplo ```bash ssh-keygen -y -f id_rsa >> id_rsa.pub ``` El proceso inverso, sacar la privada de la p\u00fablica, no es posible.","title":"ssh-agent"},{"location":"linux/redes/redes-ssh/#authorized_keys-gestionar-accesos-a-mi-equipo","text":"El servidor SSH guarda las claves p\u00fablicas autorizadas para que puedan en el fichero ~/.ssh/authorized_keys . Si quisiera que una clave p\u00fablica no se pudiera usar para acceder en mi servidor, la borro de ese fichero. El formato que tiene cada l\u00ednea es <tipo-clave> <clave-p\u00fablica-cliente> <comentario> El <tipo-clave> me dice el algoritmo con el que se ha creado. La <clave-publica-cliente> es la clave del cliente que se va a conectar a mi equipo. El <comentario> suele ser el <usuario>@<equipo> .","title":"authorized_keys -&gt; Gestionar accesos a mi equipo"},{"location":"linux/redes/redes-ssh/#known_hosts-gestionar-equipos-a-los-que-accedo","text":"El cliente tiene un control de todos los servidores SSH a los que se conecta. Esto lo hace guardando las claves p\u00fablicas de los servidores en el fichero ~/.ssh/known_hosts . Tiene 3 campos <hash-ip-equipo-remoto> <tipo-clave> <clave-publica-servidor>","title":"known_hosts -&gt; Gestionar equipos a los que accedo"},{"location":"linux/redes/redes-ssh/#problemas-con-acceso-a-la-misma-ip-pero-distintos-hosts","text":"Supongamos que yo ten\u00eda un pc al que acced\u00eda con la ip 192.168.1.120 . Por lo que sea, he formateado y trato de volver a acceder a esa m\u00e1quina formateada. Lo m\u00e1s seguro es que me salga un mensaje de error diciendome que el remote host ha cambiado (del que yo ten\u00eda guardado), y puedo sufrir un ataque man-in-the-middle . Si estamos completamente seguros que no hay nadie en medio, y accedo directamente a mi m\u00e1quina, l que debemos hacer es borrar el known_hosts el anterior equipo. Tranquilos, que el propio comando te lo dan en el mensaje de ayuda, solo hay que hacer copia-pega. El comando es as\u00ed: ssh-keygen [ -f \"<path-to-known_hosts>\" ] -R <ip> En nuestro caso ser\u00eda ssh-keygen -f \"~/.ssh/known_hosts\" -R 192.168.1.120 . La parte de -f \"~/.ssh/known_hosts\" es opcional, podr\u00edamos hacer ssh-keygen -R 192.168.1.120 y ser\u00eda totalmente v\u00e1lido.","title":"Problemas con acceso a la misma ip pero distintos hosts"},{"location":"linux/redes/redes-ssh/#forwarding","text":"Esta t\u00e9cnica permite reenviar \"algo\", desde un equipo al otro, pasando por otro.","title":"Forwarding"},{"location":"linux/redes/redes-ssh/#agent-forwarding","text":"Imaginemos que existen 3 m\u00e1quinas, A, B, C, y tenemos el siguiente problema: A <-> B = A y B se pueden comunicar por SSH. B <-> C = B y C se pueden comunicar por SSH. A C = A y C no se pueden comunicar por SSH. Agent forwarding nos permite que A <-> C a trav\u00e9s de B, es decir A <-B-> C. Esto es posible haciendo: Activando en el servidor de B /etc/ssh/sshd_config la opci\u00f3n AllowAgentForwarding yes Activando en el agente / cliente de B /etc/ssh/ssh_config la opci\u00f3n ForwardAgent yes As\u00ed ahora, para hacer A <-> C, lo que har\u00eda es: Accedo desde A por SSH a B = A -> B. Accedo desde B por SSH a C = B -> C. Y ahora en la shell ver\u00e9 que estoy en C. Parece obvio, pero si estas opciones no est\u00e1n activadas, no se podr\u00eda hacer. La idea al final de todo esto, es que si tengo muchas m\u00e1quinas C's: C1, C2, C3, etc. Es recomendable que no est\u00e9n expuestas al exterior. Lo mejor es tener un \"basti\u00f3n\", es decir, una m\u00e1quina B, que est\u00e1 autenticada con claves publico-privada + passphrase con cada Cx, y yo desde A solo tengo acceso a B.","title":"Agent Forwarding"},{"location":"linux/redes/redes-ssh/#x11-forwarding","text":"Si accedo por SSH de una m\u00e1quina A a otra B, A -> B, y ejecuto una aplicaci\u00f3n gr\u00e1fica (X11), no la veo en mi equipo A, solo se ve en el equipo B. La forma de poder ver en A una app X11 ejecutada en B es con la t\u00e9cnica X11 forwarding. Para poder aplicar esta t\u00e9cnica tengo que: Habilitar en el servidor de B /etc/ssh/sshd_config las opciones X11Forwarding yes X11DisplayOffset 10 Si lo que quiero es ejecutar una aplicaci\u00f3n gr\u00e1fica de C en mi m\u00e1quina A, debo de: Habilitar en el cliente/agente de B /etc/ssh/ssh_config la opci\u00f3n FordwardX11 yes Al ejecutar una app X11 remota, aunque la vea en mi equipo local, los recursos que consume son de la m\u00e1quina remota.","title":"X11 Forwarding"},{"location":"linux/redes/redes-ssh/#transferir-ficheros-por-ssh","text":"SSH no solo permite iniciar sesiones o ejecutar comandos en remoto. Tambi\u00e9n permite la transferencia de ficheros a trav\u00e9s de dos protocolos, SCP y SFTP.","title":"Transferir ficheros por SSH"},{"location":"linux/redes/redes-ssh/#scp","text":"SCP es un protocolo que se puede usar con SSH para poder compartir ficheros. Su sintaxis es similar a la cp , pero \"generalizada\" scp [[ <usuario-origen>@ ] <host-origen>: ] <fichero-origen> [[ <usuario-destino>@ ] <host-destino>: ] <fichero-destino> scp -r [[ <usuario-origen>@ ] <host-origen>: ] <directorio-origen> [[ <usuario-destino>@ ] <host-destino>: ] <directorio-destino> Visto as\u00ed es muy lioso, vamos a verlo con ejemplos. M\u00e1quina Usuario Host A usera 192.168.1.120 B userb 192.168.1.121 C userc 192.168.1.122 En todos los ejemplos voy a suponer que estoy en la m\u00e1quina A: Pasar fichero mifichero.txt en el $HOME origen, a la carpeta micarpeta del $HOME destino A -> B (de local a remoto) scp $HOME /mifichero.txt userb@192.168.1.121: $HOME /micarpeta/ B -> A (de remoto a local) scp userb@192.168.121: $HOME /fichero.txt $HOME /micarpeta/ B -> C (de remoto a remoto) scp userb@192.168.1.121: $HOME /fichero.txt userc@192.168.1.122: $HOME /micarpeta/ Pasar la carpeta micarpeta del $HOME origen al $HOME destino A -> B (de local a remoto) scp -r $HOME /micarpeta userb@192.168.1.121: $HOME / B -> A (de remoto a local) scp -r userb@192.168.1.121: $HOME /micarpeta $HOME / B -> C (de remoto a remoto) scp -r userb@192.168.1.121: $HOME /micarpeta userc@192.168.1.122: $HOME /","title":"SCP"},{"location":"linux/redes/redes-ssh/#sftp","text":"SFTP es SSH FTP, es decir, una comunicaci\u00f3n FTP sobre SSH. No confundir con FTPS, que es una variaci\u00f3n de FTP securizada. Para usarla hacemos sftp <usuario>@<host> Se nos abrir\u00e1 una shell que podemos usar como si fuera una shell FTP. Tambi\u00e9n podemos abrir una conexi\u00f3n SFTP desde cualquier programa FTP cliente como Filezilla","title":"SFTP"},{"location":"linux/redes/redes-ssh/#tuneles-ssh","text":"Esto se conoce como Port Fordwarding o TCP Fordwarding. Supongamos que tenemos: Maquina Usuario Host Puerto SSH A usera hosta porta A<->B B userb hostb portb B<->A, B<->C C userc hostc portc C<->B Con este escenario, tenemos 3 tipos de t\u00faneles: Local Fordwarding (-L): Traer un puerto (servicio) remoto (de A \u00f3 C) a uno local (de C \u00f3 A) por B. Remote Fordwarding (-R): Enviar un puerto (servicio) local (de A \u00f3 C) a uno remoto (de C \u00f3 A) por B. Dynamic Fordwarding (-D): ni idea B\u00e1sicamente consiste en traer / enviar un puerto local / remoto desde una m\u00e1quina a otra, pasando por una m\u00e1quina intermedia.","title":"T\u00faneles SSH"},{"location":"linux/redes/redes-ssh/#local-fordwarding","text":"Local Fordwarding consiste en traer un puerto remoto (de otra m\u00e1quina) a un puerto de mi m\u00e1quina local. Es decir, es como si desde mi puerto local estuviera en el puerto remoto de la otra m\u00e1quina. Comando y variantes: ssh -f -N -L [ <bind-address>: ] <port>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -L [ <bind-address>: ] <port>:<remote-socket> [ <user>@<host> ] ssh -f -N -L <local-socket>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -L <local-socket>:<remote-socket> [ <user>@<host> ] Supongamos que A con acceso libre a Internet, y C con acceso restringido Internet (no puede acceder a ciertos servicios / web). As\u00ed que nos interesar\u00eda: Desde C, traer hosta:porta a hostc:portc, por B ssh -f -NL portc:hosta:porta userb@hostb Ahora supongamos que C tiene un servicio NGINX en su puerto 80, y lo queremos poder consumir: Desde A, traer el puerto 80 de C al puerto 1080 de A, por B ssh -f -NL 1080 :hostc:80 userb@hostb Tambi\u00e9n podr\u00edamos hacer: Desde B, traer el pierto de C al puerto 1080 de B ssh -f -NL Desde A, consumir ese NGINX accediendo en el navegador a hostb:1080","title":"Local Fordwarding"},{"location":"linux/redes/redes-ssh/#remote-forwarding","text":"Remote Fordwarding consiste en enviar un puerto local (de mi m\u00e1quina) a un puerto de una m\u00e1quina remota. Es decir, es como si desde un puerto de una m\u00e1quina remota estuviera en el puerto de mi m\u00e1quina local. Comando y sus variantes: ssh -f -N -R [ <bind-address>: ] <port>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -R [ <bind-address>: ] <port>:<local-socket> [ <user>@<host> ] ssh -f -N -R <remote-socket>:<host>:<host-port> [ <user>@<host> ] ssh -f -N -R <remote-socket>:<local-socket> [ <user>@<host> ] ssh -f -N -R [ <bind-address>: ] <port> [ <user>@<host> ] Supongamos que","title":"Remote Forwarding"},{"location":"linux/redes/redes-ssh/#dynamic-fordwarding","text":"ssh -f -N -D [ <bind-address>: ] <port>","title":"Dynamic Fordwarding"},{"location":"linux/redes/redes-ssh/#conexion-a-github-con-par-clave-publico-privada","text":"Generar par de claves con passphrase mediante ssh-keygen -t rsa -b 4096 -C \"<github email>\" A\u00f1adir la clave al ssh-agent ssh-add -K <ruta al fichero de clave privada> A\u00f1adir la clave p\u00fablica en Github Copiar la clave p\u00fablica en el clipboard pbcopy < <ruta al fichero de clave p\u00fablica> Pegar la clave p\u00fablica en Github Ir a Settings -> SSH and GPG Keys -> New SSH or Add SSH Key Poner un t\u00edtulo para que se entienda de que equipo es la clave y pegar la clave en el campo Key Por \u00faltimo, darle al bot\u00f3n Add SSH key , confirmar y listo.","title":"Conexi\u00f3n a Github con par clave p\u00fablico-privada"},{"location":"linux/terminal/terminal-bash/","text":"Bash Scripting \u00b6 Los scripts de bash sirven sobre todo para automatizaci\u00f3n. Ficheros Bash \u00b6 Suelen acabar con la extensi\u00f3n .sh , aunque no es obligatorio. Lo que si es obligatorio es que empiecen con el shebang (comando que empieza por # en la primera linea del fichero) que indica como hay que ejecutar el fichero. #!/bin/bash En entornos viejos probablemente haya que poner #!/bin/sh Ejecuci\u00f3n \u00b6 Se pueden ejecutar desde la shell haciendo: ./<fichero> sh <fichero> bash <fichero> Situ\u00e1ndolo dentro de uno de los directorios especiales /usr/local/bin o /usr/bin Deber\u00edan de tener permisos de lectura como de ejecuci\u00f3n. Variables \u00b6 Las variables ser\u00edan <variable>=<valor> , sin espacios en el igual. Existen diferentes tipos: String: El valor va entre comillas dobles nombre=\"Paco Pepe\" . Num\u00e9rica: Sin comillas y en un solo bloque numero=1977 . Array (lista): Valores entre par\u00e9ntesis y separados por un espacio lista=(Paco Pepe Hernandez) . Empiezan por la posici\u00f3n cero. Se accede a un elemento concreto usando corchetes lista[0]=\"Paco\" . Se pueden a\u00f1adir elementos lista[3]=\"Fernandez . Salida de comando: Se declara entre tildes invertidas ` fichero='cat fichero.sh' Para poder usar una variable anteriormente definida, EXCEPTO LOS ARRAYS , se puede usar: $ -> Mi nombre es $nombre . (()) -> ((numero++)) \u00f3 ((numero=numero+1)) . let \"\" -> let \"numero++\" \u00f3 let \"numero=numero+1 . Variable $? : Si se ha ejecutado un comando anterior, podemos recoger el valor que devuelve con esta variable. Si el comando se ha ejecutado sin problemas, devuelve 0. Si da algun problema, devuelve otro n\u00famero / cosa. Para saber que devuelve el comando hay que mirar su man page -> man <comando> . Arrays \u00b6 Declaraci\u00f3n: Directamente -> lista=(uno dos tres) Poco a poco -> lista=[0]=\"uno\"; lista[1]=\"dos\"; lista[2]=\"tres\" . Uso con ${} $lista -> Devuelve solo el primer elemento. $lista[3] -> Sigue devolviendo el primer elemento junto con las letras [3] . ${lista} -> Devuelve solo el primer elemento. ${lista[3]} -> Devuelve el cuarto elemento. ${lista[*]} -> Devuelve todo el array. ${#lista[*]} -> Devuelve el n\u00famero de elementos que contiene el array. ${#lista[1]} -> Devuelve el n\u00famero de elementos que tiene el segundo elemento del array. Borrar con unset : unset lista[1] -> Borra el segundo elemento. unset lista -> Borra todo el array. Sintaxis \u00b6 No es obligatorio con las tabulaciones. Si es muy porculero con los espacios, sobre todo en condiciones, bucles, y dem\u00e1s. Los comentarios empiezan por # . Se pueden poner varias instrucciones por linea separ\u00e1ndolas por ; . La sentencia set -u despu\u00e9s del shebang inicial ayuda a indicar errores de gram\u00e1tica (poner mal el nombre de una variable). Operadores \u00b6 Operadores booleanes: true . false . Operadores matem\u00e1ticos: + -> Suma. - -> Resta. * -> Multiplicaci\u00f3n. / -> Division. % -> M\u00f3dulo. Comparaciones l\u00f3gicas: -lt / -gt -> Menor (<) / mayor (>) que. -le / -ge -> Menor o igual (<=) / mayor o igual (>=) que. -eq / -ne -> Igual (==) / distinto (!=) que. z / n -> Nulo (ning\u00fan car\u00e1cter) / no nulo (al menos un car\u00e1cter). -a \u00f3 && -> AND. -o \u00f3 || -> OR. Operadores condicionales de ficheros: -e -> Si existe. -f -> Si existe y NO es un directorio. -d -> Si existe y NO es un fichero. -s -> Si existe y no est\u00e1 vac\u00edo. -r -> Si existe y tiene permisos de lectura. -w -> Si existe y tiene permisos de escritura. -x -> Si existe y tiene permisos de ejecuci\u00f3n. Argumentos de entrada \u00b6 ./<fichero> <arg1> <arg2> <arg3> El argumento 0 ser\u00eda el nombre del propio fichero. Los dem\u00e1s argumentos van separados por espacios. Dentro del fichero podemos usar los argumentos con: $0 -> Primer argumento (nombre del script). $1 -> Segundo argumento. $... Se pueden usar como un array: $* -> Todos los argumentos en formato string (sin $0 ). $@ -> Todos los argumentos en formato array (sin $0 ). $# -> N\u00famero de argumentos (sin $0 ). Puedes leer argumentos interactivamente con read <variable> #!/bin/bash echo \"Introduce tu nombre\" read nombre read -p \"Ahora el apellido\" apellido echo \"Te llamas $nombre $apellido exit \u00b6 Existe un comando para salir de un script en un momento concreto y devolver un valor estimado. exit <valor> exit 1 -> Saldr\u00eda del script devolviendo 1. exit -> Saldr\u00eda del script devolviendo el valor de la variable $? de dentro del script. if \u00b6 if [ <condicion> ] ; then <comandos> elif [ <condicion> ] ; then <comandos> else <comandos> fi Si la <condicion> es un string, deber\u00edas de poner [[ <condicion> ]] en lugar de [ <condicion> ] . case \u00b6 case <variable> in <opcion1> ) <comandos> ;; <opcion2> | <opcion3> ) <comandos> ;; <opcion4> ) <comandos> ;; * ) <comandos> esac En las <opcion> podemos hacer lo siguiente, si quisiera que se leyera make o Make , har\u00edamos que <opcion> sea [Mm]ake . while \u00b6 while (( <condicion> )) do <comandos> done for \u00b6 for <elemento> in <array> do <comandos> done Se recomienda usar la @ en los arrays de los for en lugar de * . Ejemplo: #!/bin/bash lista =( uno dos tres ) for i in ${ lista [@] } do echo \"Elemento $i \" done Recorrer ficheros externos \u00b6 Con while leemos l\u00edneas: while read LINE do <comandos> done < <fichero> Con for leemos palabras: for <elemento> in <contenido-fichero> do <comandos> done Un ejemplo, le paso sh ejemplo.sh mifichero.txt : #!/bin/bash fichero = $1 pos = 1 while read LINE do echo \"Linea $pos : $LINE \" (( pos++ )) done < $fichero palabras = ` cat $fichero ` for palabra in $palabras do echo $palabra done","title":"Bash Scripting"},{"location":"linux/terminal/terminal-bash/#bash-scripting","text":"Los scripts de bash sirven sobre todo para automatizaci\u00f3n.","title":"Bash Scripting"},{"location":"linux/terminal/terminal-bash/#ficheros-bash","text":"Suelen acabar con la extensi\u00f3n .sh , aunque no es obligatorio. Lo que si es obligatorio es que empiecen con el shebang (comando que empieza por # en la primera linea del fichero) que indica como hay que ejecutar el fichero. #!/bin/bash En entornos viejos probablemente haya que poner #!/bin/sh","title":"Ficheros Bash"},{"location":"linux/terminal/terminal-bash/#ejecucion","text":"Se pueden ejecutar desde la shell haciendo: ./<fichero> sh <fichero> bash <fichero> Situ\u00e1ndolo dentro de uno de los directorios especiales /usr/local/bin o /usr/bin Deber\u00edan de tener permisos de lectura como de ejecuci\u00f3n.","title":"Ejecuci\u00f3n"},{"location":"linux/terminal/terminal-bash/#variables","text":"Las variables ser\u00edan <variable>=<valor> , sin espacios en el igual. Existen diferentes tipos: String: El valor va entre comillas dobles nombre=\"Paco Pepe\" . Num\u00e9rica: Sin comillas y en un solo bloque numero=1977 . Array (lista): Valores entre par\u00e9ntesis y separados por un espacio lista=(Paco Pepe Hernandez) . Empiezan por la posici\u00f3n cero. Se accede a un elemento concreto usando corchetes lista[0]=\"Paco\" . Se pueden a\u00f1adir elementos lista[3]=\"Fernandez . Salida de comando: Se declara entre tildes invertidas ` fichero='cat fichero.sh' Para poder usar una variable anteriormente definida, EXCEPTO LOS ARRAYS , se puede usar: $ -> Mi nombre es $nombre . (()) -> ((numero++)) \u00f3 ((numero=numero+1)) . let \"\" -> let \"numero++\" \u00f3 let \"numero=numero+1 . Variable $? : Si se ha ejecutado un comando anterior, podemos recoger el valor que devuelve con esta variable. Si el comando se ha ejecutado sin problemas, devuelve 0. Si da algun problema, devuelve otro n\u00famero / cosa. Para saber que devuelve el comando hay que mirar su man page -> man <comando> .","title":"Variables"},{"location":"linux/terminal/terminal-bash/#arrays","text":"Declaraci\u00f3n: Directamente -> lista=(uno dos tres) Poco a poco -> lista=[0]=\"uno\"; lista[1]=\"dos\"; lista[2]=\"tres\" . Uso con ${} $lista -> Devuelve solo el primer elemento. $lista[3] -> Sigue devolviendo el primer elemento junto con las letras [3] . ${lista} -> Devuelve solo el primer elemento. ${lista[3]} -> Devuelve el cuarto elemento. ${lista[*]} -> Devuelve todo el array. ${#lista[*]} -> Devuelve el n\u00famero de elementos que contiene el array. ${#lista[1]} -> Devuelve el n\u00famero de elementos que tiene el segundo elemento del array. Borrar con unset : unset lista[1] -> Borra el segundo elemento. unset lista -> Borra todo el array.","title":"Arrays"},{"location":"linux/terminal/terminal-bash/#sintaxis","text":"No es obligatorio con las tabulaciones. Si es muy porculero con los espacios, sobre todo en condiciones, bucles, y dem\u00e1s. Los comentarios empiezan por # . Se pueden poner varias instrucciones por linea separ\u00e1ndolas por ; . La sentencia set -u despu\u00e9s del shebang inicial ayuda a indicar errores de gram\u00e1tica (poner mal el nombre de una variable).","title":"Sintaxis"},{"location":"linux/terminal/terminal-bash/#operadores","text":"Operadores booleanes: true . false . Operadores matem\u00e1ticos: + -> Suma. - -> Resta. * -> Multiplicaci\u00f3n. / -> Division. % -> M\u00f3dulo. Comparaciones l\u00f3gicas: -lt / -gt -> Menor (<) / mayor (>) que. -le / -ge -> Menor o igual (<=) / mayor o igual (>=) que. -eq / -ne -> Igual (==) / distinto (!=) que. z / n -> Nulo (ning\u00fan car\u00e1cter) / no nulo (al menos un car\u00e1cter). -a \u00f3 && -> AND. -o \u00f3 || -> OR. Operadores condicionales de ficheros: -e -> Si existe. -f -> Si existe y NO es un directorio. -d -> Si existe y NO es un fichero. -s -> Si existe y no est\u00e1 vac\u00edo. -r -> Si existe y tiene permisos de lectura. -w -> Si existe y tiene permisos de escritura. -x -> Si existe y tiene permisos de ejecuci\u00f3n.","title":"Operadores"},{"location":"linux/terminal/terminal-bash/#argumentos-de-entrada","text":"./<fichero> <arg1> <arg2> <arg3> El argumento 0 ser\u00eda el nombre del propio fichero. Los dem\u00e1s argumentos van separados por espacios. Dentro del fichero podemos usar los argumentos con: $0 -> Primer argumento (nombre del script). $1 -> Segundo argumento. $... Se pueden usar como un array: $* -> Todos los argumentos en formato string (sin $0 ). $@ -> Todos los argumentos en formato array (sin $0 ). $# -> N\u00famero de argumentos (sin $0 ). Puedes leer argumentos interactivamente con read <variable> #!/bin/bash echo \"Introduce tu nombre\" read nombre read -p \"Ahora el apellido\" apellido echo \"Te llamas $nombre $apellido","title":"Argumentos de entrada"},{"location":"linux/terminal/terminal-bash/#exit","text":"Existe un comando para salir de un script en un momento concreto y devolver un valor estimado. exit <valor> exit 1 -> Saldr\u00eda del script devolviendo 1. exit -> Saldr\u00eda del script devolviendo el valor de la variable $? de dentro del script.","title":"exit"},{"location":"linux/terminal/terminal-bash/#if","text":"if [ <condicion> ] ; then <comandos> elif [ <condicion> ] ; then <comandos> else <comandos> fi Si la <condicion> es un string, deber\u00edas de poner [[ <condicion> ]] en lugar de [ <condicion> ] .","title":"if"},{"location":"linux/terminal/terminal-bash/#case","text":"case <variable> in <opcion1> ) <comandos> ;; <opcion2> | <opcion3> ) <comandos> ;; <opcion4> ) <comandos> ;; * ) <comandos> esac En las <opcion> podemos hacer lo siguiente, si quisiera que se leyera make o Make , har\u00edamos que <opcion> sea [Mm]ake .","title":"case"},{"location":"linux/terminal/terminal-bash/#while","text":"while (( <condicion> )) do <comandos> done","title":"while"},{"location":"linux/terminal/terminal-bash/#for","text":"for <elemento> in <array> do <comandos> done Se recomienda usar la @ en los arrays de los for en lugar de * . Ejemplo: #!/bin/bash lista =( uno dos tres ) for i in ${ lista [@] } do echo \"Elemento $i \" done","title":"for"},{"location":"linux/terminal/terminal-bash/#recorrer-ficheros-externos","text":"Con while leemos l\u00edneas: while read LINE do <comandos> done < <fichero> Con for leemos palabras: for <elemento> in <contenido-fichero> do <comandos> done Un ejemplo, le paso sh ejemplo.sh mifichero.txt : #!/bin/bash fichero = $1 pos = 1 while read LINE do echo \"Linea $pos : $LINE \" (( pos++ )) done < $fichero palabras = ` cat $fichero ` for palabra in $palabras do echo $palabra done","title":"Recorrer ficheros externos"},{"location":"linux/terminal/zsh/","text":"ZSH - La shell de tus sue\u00f1os \u00b6 Vamos a instalar y configurar ese fant\u00e1stico shell que es ZSH Instalaci\u00f3n \u00b6 Abrimos la terminal y lo instalamos sudo apt install zsh Oh My ZSH - Customizaci\u00f3n para ZSH \u00b6 # 1. Descargarmos el script de la utilidad que le va a aportar todo su valor. El script se llama **install.sh** wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh # 2. Le damos permisos de ejecuci\u00f3n chmod a+x install.sh # 3. Instalamos el script sh install.sh # 4. Despu\u00e9s de instalar todo, al final en el prompt nos pide un password # Si lo hemos introducido correctamente, lo m\u00e1s probable es que ya se haya cambiado la shell # Si la shell no se ha cambiado, entonces hay que hacer esto chsh -s 'which zsh' # 5. Reiniciar la consola source ~/.zshrc Configurar Oh My ZSH \u00b6 Abrir el fichero .zshrc con el editor que m\u00e1s te guste scratch-text-editor ~/.zshrc Plugins \u00b6 Sobre la l\u00ednea 54 tenemos algo asi como plugins =( git ) Lo \u00fanico que hay que hacer es ir a\u00f1adi\u00e9ndole todos los plugins que quieras ponerle y que esten contenidos en la carpeta ~/.oh-my-zsh/plugins . Los plugins se a\u00f1aden simplemente con un espacio y el nombre al lado (no uses comillas). En mi caso como programo en python uso los siguientes plugins plugins =( git python pip virtualenvwrapper autopep8 pep8 ) Todos los plugins oficiales est\u00e1n comentados aqu\u00ed . El que m\u00e1s me ha llamado la atenci\u00f3n es el plugin de Chuck Norris . Una vez terminado, guardamos, cerramos el editor y recargamos la shell. source ~/.zshrc Themes \u00b6 Lo que le da el aspecto chachi son los temas, y est\u00e1n en la carpeta ~/.oh-my-zsh/themes/ . Aqu\u00ed est\u00e1n recogidos todos los temas oficiales con capturas . Yo suelo usar el tema bira , aunque a veces uso el agnoster con modificaciones. Bien pues para poner un tema, abrimos el fichero ~/.zshrc y en la linea 10 aproximadamente tendremos algo asi como ZSH_THEME = \"robbyrussell\" Simplemente ponemos el que m\u00e1s nos guste ZSH_THEME = \"agnoster\" Cerramos el editor y reiniciamos la shell source ~/.zshrc TEMA AGNOSTER TUNEADO \u00b6 El tema agnoster es muy muy bonito, pero para usarlo hay que tunear ciertas cosas. Para comprobar que rula tienes que metes estos comandos en la shell echo \"\\ue0b0 \\u00b1 \\ue0a0 \\u27a6 \\u2718 \\u26a1 \\u2699\" Deber\u00eda de salir algo as\u00ed Si no sale, debes instalar las fuentes Powerline git clone https://github.com/powerline/fonts.git --depth = 1 cd fonts chmod a+x install.sh sh install.sh cd .. sudo rm -R fonts Una vez sabemos que el tema va a funcionar, lo elegimos en el archivo ~/.zshrc ZSH_THEME = \"agnoster\" Faltan dos pasos que son opcionales. A mi me ocurre que el agnoster no viene preparado para introducir comandos en una linea nueva (cosa que si hace el bira por ejemplo). Si tu agnoster ya trae esta funcionalidad o no la quieres poner, salta al siguiente paso. Si no, tienes que editar el fichero ~/.oh-my-zsh/themes/agnoster . nano ~/.oh-my-zsh/themes/agnoster.zsh-theme El fichero debe de quedar como aqu\u00ed . Si no quieres copiar sin saber que has hecho, sigue leyendo. En la \u00faltima funci\u00f3n, build_prompt tendremos algo as\u00ed ## Main prompt build_prompt () { RETVAL = $? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_end } Antes del prompt_end tienes que a\u00f1adirle un prompt_newline , osea que quedar\u00eda as\u00ed ## Main prompt build_prompt () { RETVAL = $? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_newline prompt_end } Pero falta por definir la funcion nueva que has a\u00f1adido, as\u00ed que encima del ## Main prompt a\u00f1ade lo siguiente # Newline # Add new line to the prompt prompt_newline () { if [[ -n $CURRENT_BG ]] ; then echo -n \" %{%k%F{ $CURRENT_BG }%} $SEGMENT_SEPARATOR %{%k%F{ $CURRENT_BG }%} $SEGMENT_SEPARATOR \" else echo -n \" %{%k%}\" fi echo -n \" %{%f%}\" CURRENT_BG = '' } Por \u00faltimo vamos a a\u00f1adirle la fecha y hora (un timestamp ). Para ello, en el fichero del punto anterior ~/.oh-my-zsh/themes/agnoster.zsh-theme y en el \u00faltimo comando, que es algo asi como PROMPT = '%{%f%b%k%}$(build_prompt) ' Hay que a\u00f1adirle delante esto %D { %f/%m/%y } | %D { %L:%M:%S } La referencia sobre esta utilidad la saqu\u00e9 de aqu\u00ed . Al final el \u00faltimo comando acaba quedando as\u00ed PROMPT = '%D{%f/%m/%y}|%D{%L:%M:%S}%{%f%b%k%}$(build_prompt) ' Y recarga la shell source ~/.zshrc","title":"ZSH"},{"location":"linux/terminal/zsh/#zsh-la-shell-de-tus-suenos","text":"Vamos a instalar y configurar ese fant\u00e1stico shell que es ZSH","title":"ZSH - La shell de tus sue\u00f1os"},{"location":"linux/terminal/zsh/#instalacion","text":"Abrimos la terminal y lo instalamos sudo apt install zsh","title":"Instalaci\u00f3n"},{"location":"linux/terminal/zsh/#oh-my-zsh-customizacion-para-zsh","text":"# 1. Descargarmos el script de la utilidad que le va a aportar todo su valor. El script se llama **install.sh** wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh # 2. Le damos permisos de ejecuci\u00f3n chmod a+x install.sh # 3. Instalamos el script sh install.sh # 4. Despu\u00e9s de instalar todo, al final en el prompt nos pide un password # Si lo hemos introducido correctamente, lo m\u00e1s probable es que ya se haya cambiado la shell # Si la shell no se ha cambiado, entonces hay que hacer esto chsh -s 'which zsh' # 5. Reiniciar la consola source ~/.zshrc","title":"Oh My ZSH - Customizaci\u00f3n para ZSH"},{"location":"linux/terminal/zsh/#configurar-oh-my-zsh","text":"Abrir el fichero .zshrc con el editor que m\u00e1s te guste scratch-text-editor ~/.zshrc","title":"Configurar Oh My ZSH"},{"location":"linux/terminal/zsh/#plugins","text":"Sobre la l\u00ednea 54 tenemos algo asi como plugins =( git ) Lo \u00fanico que hay que hacer es ir a\u00f1adi\u00e9ndole todos los plugins que quieras ponerle y que esten contenidos en la carpeta ~/.oh-my-zsh/plugins . Los plugins se a\u00f1aden simplemente con un espacio y el nombre al lado (no uses comillas). En mi caso como programo en python uso los siguientes plugins plugins =( git python pip virtualenvwrapper autopep8 pep8 ) Todos los plugins oficiales est\u00e1n comentados aqu\u00ed . El que m\u00e1s me ha llamado la atenci\u00f3n es el plugin de Chuck Norris . Una vez terminado, guardamos, cerramos el editor y recargamos la shell. source ~/.zshrc","title":"Plugins"},{"location":"linux/terminal/zsh/#themes","text":"Lo que le da el aspecto chachi son los temas, y est\u00e1n en la carpeta ~/.oh-my-zsh/themes/ . Aqu\u00ed est\u00e1n recogidos todos los temas oficiales con capturas . Yo suelo usar el tema bira , aunque a veces uso el agnoster con modificaciones. Bien pues para poner un tema, abrimos el fichero ~/.zshrc y en la linea 10 aproximadamente tendremos algo asi como ZSH_THEME = \"robbyrussell\" Simplemente ponemos el que m\u00e1s nos guste ZSH_THEME = \"agnoster\" Cerramos el editor y reiniciamos la shell source ~/.zshrc","title":"Themes"},{"location":"linux/terminal/zsh/#tema-agnoster-tuneado","text":"El tema agnoster es muy muy bonito, pero para usarlo hay que tunear ciertas cosas. Para comprobar que rula tienes que metes estos comandos en la shell echo \"\\ue0b0 \\u00b1 \\ue0a0 \\u27a6 \\u2718 \\u26a1 \\u2699\" Deber\u00eda de salir algo as\u00ed Si no sale, debes instalar las fuentes Powerline git clone https://github.com/powerline/fonts.git --depth = 1 cd fonts chmod a+x install.sh sh install.sh cd .. sudo rm -R fonts Una vez sabemos que el tema va a funcionar, lo elegimos en el archivo ~/.zshrc ZSH_THEME = \"agnoster\" Faltan dos pasos que son opcionales. A mi me ocurre que el agnoster no viene preparado para introducir comandos en una linea nueva (cosa que si hace el bira por ejemplo). Si tu agnoster ya trae esta funcionalidad o no la quieres poner, salta al siguiente paso. Si no, tienes que editar el fichero ~/.oh-my-zsh/themes/agnoster . nano ~/.oh-my-zsh/themes/agnoster.zsh-theme El fichero debe de quedar como aqu\u00ed . Si no quieres copiar sin saber que has hecho, sigue leyendo. En la \u00faltima funci\u00f3n, build_prompt tendremos algo as\u00ed ## Main prompt build_prompt () { RETVAL = $? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_end } Antes del prompt_end tienes que a\u00f1adirle un prompt_newline , osea que quedar\u00eda as\u00ed ## Main prompt build_prompt () { RETVAL = $? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_newline prompt_end } Pero falta por definir la funcion nueva que has a\u00f1adido, as\u00ed que encima del ## Main prompt a\u00f1ade lo siguiente # Newline # Add new line to the prompt prompt_newline () { if [[ -n $CURRENT_BG ]] ; then echo -n \" %{%k%F{ $CURRENT_BG }%} $SEGMENT_SEPARATOR %{%k%F{ $CURRENT_BG }%} $SEGMENT_SEPARATOR \" else echo -n \" %{%k%}\" fi echo -n \" %{%f%}\" CURRENT_BG = '' } Por \u00faltimo vamos a a\u00f1adirle la fecha y hora (un timestamp ). Para ello, en el fichero del punto anterior ~/.oh-my-zsh/themes/agnoster.zsh-theme y en el \u00faltimo comando, que es algo asi como PROMPT = '%{%f%b%k%}$(build_prompt) ' Hay que a\u00f1adirle delante esto %D { %f/%m/%y } | %D { %L:%M:%S } La referencia sobre esta utilidad la saqu\u00e9 de aqu\u00ed . Al final el \u00faltimo comando acaba quedando as\u00ed PROMPT = '%D{%f/%m/%y}|%D{%L:%M:%S}%{%f%b%k%}$(build_prompt) ' Y recarga la shell source ~/.zshrc","title":"TEMA AGNOSTER TUNEADO"},{"location":"linux/terminal/tmux/tmux-comandos/","text":"TMUX \u00b6 La mayor\u00eda de la informaci\u00f3n est\u00e1 sacada de esta web -> referencia tmux es una herramienta para poder \"partir\" la terminal en varias. Instalaci\u00f3n \u00b6 # Ubuntu sudo apt install tmux # Mac brew install tmux Funcionamiento \u00b6 tmux funciona dentro de una terminal. Lo que se hace es invocar el programa y es como si nos creara una nueva terminal. Al hecho de abrir una terminal con tmux lo vamos a llamar \"sesion\". Las sesiones tienen un nombre, pero si no se especifica, se pone un n\u00famero por defecto como nombre (1, 2, ...). Una vez abierta una sesi\u00f3n, aparecer\u00e1 una barra abajo del todo, indicando donde estamos. Para usar los comandos de tmux debemos pulsar el atajo de teclado Ctrl+b y despu\u00e9s el comando. Ojo, no a la vez, primero Ctrl+b y luego el comando. Por \u00faltimo podemos cerrar la sesi\u00f3n (eliminarla) o salir de ella (la sesion sigue activa). Ahora vemos todo con m\u00e1s detalle. Abrir una sesi\u00f3n an\u00f3nima \u00b6 tmux Abrir nueva sesi\u00f3n con nombre \u00b6 tmux new -s <nombre-sesion> Salir de sesi\u00f3n (pero dejandola activa) \u00b6 Salir de una sesi\u00f3n, pero dej\u00e1ndola activa, se llama detach # Salir de sesion o detach Ctrl+b d Listar sesiones \u00b6 tmux ls Entrar a una sesi\u00f3n \u00b6 Entrar a una sesi\u00f3n activa se llama attatch tmux a -t <nombre-sesion> Matar una sesi\u00f3n \u00b6 tmux kill-session -t <nombre-sesion> Dividir panel verticalmente / horizontalmente \u00b6 # Vertical Ctrl+b % # Horizontal Ctrl+b \" Redimensionar paneles \u00b6 Ctrl+b : resize-pane -<direcci\u00f3n> <n\u00famero-de-lineas> Invocar el comando Ctrl+b : para que abra el prompt de tmux. Luego ponemos el comando resize-pane -<direcci\u00f3n> <n\u00famero-de-lineas> Con <direcci\u00f3n> indicamos hacia donde crece = U (up) | D (down) | L (left) | R (derecha) Con <numero-de-lineas> le decimos la cantidad de lineas que tiene que desplazarse. Ejemplo -> Que el panel crezca dos lineas hacia abajo Ctrl+b : resize-panel -D 2 Matar panel actual \u00b6 Ctrl+b x Cambiar de panel \u00b6 Ctrl+b <tecla-direccion> Cambiar de panel c\u00edclicamente \u00b6 Ctrl+b o Cambiar de panel solo entre el actual y el anterior \u00b6 Ctrl+b ; Matar servidor tmux con todas sus sesiones \u00b6 tmux kill-server","title":"Comandos"},{"location":"linux/terminal/tmux/tmux-comandos/#tmux","text":"La mayor\u00eda de la informaci\u00f3n est\u00e1 sacada de esta web -> referencia tmux es una herramienta para poder \"partir\" la terminal en varias.","title":"TMUX"},{"location":"linux/terminal/tmux/tmux-comandos/#instalacion","text":"# Ubuntu sudo apt install tmux # Mac brew install tmux","title":"Instalaci\u00f3n"},{"location":"linux/terminal/tmux/tmux-comandos/#funcionamiento","text":"tmux funciona dentro de una terminal. Lo que se hace es invocar el programa y es como si nos creara una nueva terminal. Al hecho de abrir una terminal con tmux lo vamos a llamar \"sesion\". Las sesiones tienen un nombre, pero si no se especifica, se pone un n\u00famero por defecto como nombre (1, 2, ...). Una vez abierta una sesi\u00f3n, aparecer\u00e1 una barra abajo del todo, indicando donde estamos. Para usar los comandos de tmux debemos pulsar el atajo de teclado Ctrl+b y despu\u00e9s el comando. Ojo, no a la vez, primero Ctrl+b y luego el comando. Por \u00faltimo podemos cerrar la sesi\u00f3n (eliminarla) o salir de ella (la sesion sigue activa). Ahora vemos todo con m\u00e1s detalle.","title":"Funcionamiento"},{"location":"linux/terminal/tmux/tmux-comandos/#abrir-una-sesion-anonima","text":"tmux","title":"Abrir una sesi\u00f3n an\u00f3nima"},{"location":"linux/terminal/tmux/tmux-comandos/#abrir-nueva-sesion-con-nombre","text":"tmux new -s <nombre-sesion>","title":"Abrir nueva sesi\u00f3n con nombre"},{"location":"linux/terminal/tmux/tmux-comandos/#salir-de-sesion-pero-dejandola-activa","text":"Salir de una sesi\u00f3n, pero dej\u00e1ndola activa, se llama detach # Salir de sesion o detach Ctrl+b d","title":"Salir de sesi\u00f3n (pero dejandola activa)"},{"location":"linux/terminal/tmux/tmux-comandos/#listar-sesiones","text":"tmux ls","title":"Listar sesiones"},{"location":"linux/terminal/tmux/tmux-comandos/#entrar-a-una-sesion","text":"Entrar a una sesi\u00f3n activa se llama attatch tmux a -t <nombre-sesion>","title":"Entrar a una sesi\u00f3n"},{"location":"linux/terminal/tmux/tmux-comandos/#matar-una-sesion","text":"tmux kill-session -t <nombre-sesion>","title":"Matar una sesi\u00f3n"},{"location":"linux/terminal/tmux/tmux-comandos/#dividir-panel-verticalmente-horizontalmente","text":"# Vertical Ctrl+b % # Horizontal Ctrl+b \"","title":"Dividir panel verticalmente / horizontalmente"},{"location":"linux/terminal/tmux/tmux-comandos/#redimensionar-paneles","text":"Ctrl+b : resize-pane -<direcci\u00f3n> <n\u00famero-de-lineas> Invocar el comando Ctrl+b : para que abra el prompt de tmux. Luego ponemos el comando resize-pane -<direcci\u00f3n> <n\u00famero-de-lineas> Con <direcci\u00f3n> indicamos hacia donde crece = U (up) | D (down) | L (left) | R (derecha) Con <numero-de-lineas> le decimos la cantidad de lineas que tiene que desplazarse. Ejemplo -> Que el panel crezca dos lineas hacia abajo Ctrl+b : resize-panel -D 2","title":"Redimensionar paneles"},{"location":"linux/terminal/tmux/tmux-comandos/#matar-panel-actual","text":"Ctrl+b x","title":"Matar panel actual"},{"location":"linux/terminal/tmux/tmux-comandos/#cambiar-de-panel","text":"Ctrl+b <tecla-direccion>","title":"Cambiar de panel"},{"location":"linux/terminal/tmux/tmux-comandos/#cambiar-de-panel-ciclicamente","text":"Ctrl+b o","title":"Cambiar de panel c\u00edclicamente"},{"location":"linux/terminal/tmux/tmux-comandos/#cambiar-de-panel-solo-entre-el-actual-y-el-anterior","text":"Ctrl+b ;","title":"Cambiar de panel solo entre el actual y el anterior"},{"location":"linux/terminal/tmux/tmux-comandos/#matar-servidor-tmux-con-todas-sus-sesiones","text":"tmux kill-server","title":"Matar servidor tmux con todas sus sesiones"},{"location":"linux/terminal/tmux/tmux-customizar/","text":"Customizar tmux \u00b6 Toda la configuraci\u00f3n de tmux se encuentra en el fichero .tmux.conf . Es probable que por defecto no haya ning\u00fan fichero de configuraci\u00f3n. si as\u00ed fuera, se recomienda ponerlo en ~/.tmux.conf . Cuando se quiera cargar la configuraci\u00f3n hay que hacer tmux source-file <fichero> En nuestro caso ser\u00eda tmux source-file ~/.tmux.conf Temas \u00b6 Jim Myhrbergs tiene un repo lleno de temas -> tmux-themepack Hay dos maneras de instalarlos, manualmente o a trav\u00e9s del TMP (tmux plugin manager) Cheatsheet \u00b6 Se adjunta una cheatsheet con todos los comandos -> Cheatsheet Oh My Tmux \u00b6 Repo para customizar a lo ZSH -> Oh My Tmux! El Tao de TMUX \u00b6 Un libro para saber como trabajar eficientemente con TMUX -> The Tao of tmux","title":"Customizaci\u00f3n"},{"location":"linux/terminal/tmux/tmux-customizar/#customizar-tmux","text":"Toda la configuraci\u00f3n de tmux se encuentra en el fichero .tmux.conf . Es probable que por defecto no haya ning\u00fan fichero de configuraci\u00f3n. si as\u00ed fuera, se recomienda ponerlo en ~/.tmux.conf . Cuando se quiera cargar la configuraci\u00f3n hay que hacer tmux source-file <fichero> En nuestro caso ser\u00eda tmux source-file ~/.tmux.conf","title":"Customizar tmux"},{"location":"linux/terminal/tmux/tmux-customizar/#temas","text":"Jim Myhrbergs tiene un repo lleno de temas -> tmux-themepack Hay dos maneras de instalarlos, manualmente o a trav\u00e9s del TMP (tmux plugin manager)","title":"Temas"},{"location":"linux/terminal/tmux/tmux-customizar/#cheatsheet","text":"Se adjunta una cheatsheet con todos los comandos -> Cheatsheet","title":"Cheatsheet"},{"location":"linux/terminal/tmux/tmux-customizar/#oh-my-tmux","text":"Repo para customizar a lo ZSH -> Oh My Tmux!","title":"Oh My Tmux"},{"location":"linux/terminal/tmux/tmux-customizar/#el-tao-de-tmux","text":"Un libro para saber como trabajar eficientemente con TMUX -> The Tao of tmux","title":"El Tao de TMUX"},{"location":"sw/coding/ides/vscode/vscode/","text":"Visual Studio Code \u00b6 Ayuda oficial -> Tips & Tricks Fernando Herrera tiene un curso de VSCode Repo de un curso a Introducci\u00f3n a VSCode -> repo Atajos de teclado \u00b6 Enlaces a las hojas de resumen de atajos de teclado. Linux Mac Windows Enlace oficial Linux Enlace oficial Mac Enlace oficial Windows Atajos interesantes \u00b6 Comando Atajo de teclado Multiples cursores Mantengo Alt y luego click donde quiera cursores Multiples cursores con palabras Mantengo Alt y luego doble click las palabras donde quiera cursores Duplicar cursor hacia arriba Ctrl + Shift + Up Selecionar lineas Mantener Alt y click en la l\u00ednea Duplicar cursor hacia abajo Ctrl + Shift + Down Mover l\u00edneas arriba Alt + Up Mover l\u00edneas abajo Alt + Down Comentar / descomentar l\u00ednea Linux Ctrl + / Mac Cmd + / Ir a la definici\u00f3n de una funci\u00f3n o variable Cursor sobre la funci\u00f3n o variable y F12 Borrar l\u00ednea Oficial Ctrl + Shift + K Para mi es Ctrl + D Borrar todas las ocurrencias de una palabra / variable/ funcion/... Cursor sobre la palabra / variable / funcion /... + Seleccionar todas con Linux Ctrl + Shift + L Mac Cmd + Shift + L + Borrar l\u00ednea Deshacer Linux Ctrl + Z Mac Cmd + Z Rehacer Linux Ctrl + Shift + Z Mac Cmd + Shift + Z Toggle sidebar Linux Ctrl + B Mac Cmd + B Pantalla completa F11 Toggle Modo Zen Linux Ctrl + K y Z Mac Cmd + K y Z Toggle terminal Linux Ctrl + J Mac Cmd + J Cambiar pesta\u00f1a Ctrl + Tab Cerrar pesta\u00f1a Linux Ctrl + W Mac Cmd + W Reabrir pesta\u00f1a Linux Ctrl + Shift + T Mac Cmd + Shift + T Cerrar todas las pesta\u00f1as Linux Ctrl + K y Ctrl + W Mac Cmd + K y Cmd + W Copiar linea arriba Linux Ctrl + Shift + Up Mac Cmd + Shift + Up Copiar linea abajo Linux Ctrl + Shift + Down Mac Cmd + Shift + Down Abrir fichero (\u00fatil en el Modo Zen) Linux Ctrl + P Mac Cmd + P Abrir paleta de comandos Linux Ctrl + Alt + P o Ctrl + P y luego escribir ++>++ Mac Cmd + Alt + P o Cmd + P y luego escribir ++>++ Ir a una l\u00ednea del fichero Linux Ctrl + G o Ctrl + P y luego escribir ++:++ Mac Cmd + G o Cmd + P y luego escribir ++:++ Ver definici\u00f3n de una clase / funci\u00f3n / etc en un fichero Linux Ctrl + P y luego escribir ++@++ Mac Cmd + P y luego escribir ++@++ Ordenar por definici\u00f3n de una clase / funci\u00f3n / etc en un fichero Linux Ctrl + P y luego escribir ++@:++ Mac Cmd + P y luego escribir ++@:++ Cambiar nombre a un fichero Con el fichero seleccionado en la navbar y pulsar F2 Refactor de una variable / funci\u00f3n / clase Seleccionar una variable / funci\u00f3n / clase y pulsar F2 Markdown preview Linux Ctrl + Shift + V Mac Cmd + Shift + V Markdown preview en el lateral Linux Ctrl + K y luego V Mac Cmd + K y luego V Markdown preview en el lateral fija Tiene que ser desde la paleta de comandos","title":"Visual Studio code"},{"location":"sw/coding/ides/vscode/vscode/#visual-studio-code","text":"Ayuda oficial -> Tips & Tricks Fernando Herrera tiene un curso de VSCode Repo de un curso a Introducci\u00f3n a VSCode -> repo","title":"Visual Studio Code"},{"location":"sw/coding/ides/vscode/vscode/#atajos-de-teclado","text":"Enlaces a las hojas de resumen de atajos de teclado. Linux Mac Windows Enlace oficial Linux Enlace oficial Mac Enlace oficial Windows","title":"Atajos de teclado"},{"location":"sw/coding/ides/vscode/vscode/#atajos-interesantes","text":"Comando Atajo de teclado Multiples cursores Mantengo Alt y luego click donde quiera cursores Multiples cursores con palabras Mantengo Alt y luego doble click las palabras donde quiera cursores Duplicar cursor hacia arriba Ctrl + Shift + Up Selecionar lineas Mantener Alt y click en la l\u00ednea Duplicar cursor hacia abajo Ctrl + Shift + Down Mover l\u00edneas arriba Alt + Up Mover l\u00edneas abajo Alt + Down Comentar / descomentar l\u00ednea Linux Ctrl + / Mac Cmd + / Ir a la definici\u00f3n de una funci\u00f3n o variable Cursor sobre la funci\u00f3n o variable y F12 Borrar l\u00ednea Oficial Ctrl + Shift + K Para mi es Ctrl + D Borrar todas las ocurrencias de una palabra / variable/ funcion/... Cursor sobre la palabra / variable / funcion /... + Seleccionar todas con Linux Ctrl + Shift + L Mac Cmd + Shift + L + Borrar l\u00ednea Deshacer Linux Ctrl + Z Mac Cmd + Z Rehacer Linux Ctrl + Shift + Z Mac Cmd + Shift + Z Toggle sidebar Linux Ctrl + B Mac Cmd + B Pantalla completa F11 Toggle Modo Zen Linux Ctrl + K y Z Mac Cmd + K y Z Toggle terminal Linux Ctrl + J Mac Cmd + J Cambiar pesta\u00f1a Ctrl + Tab Cerrar pesta\u00f1a Linux Ctrl + W Mac Cmd + W Reabrir pesta\u00f1a Linux Ctrl + Shift + T Mac Cmd + Shift + T Cerrar todas las pesta\u00f1as Linux Ctrl + K y Ctrl + W Mac Cmd + K y Cmd + W Copiar linea arriba Linux Ctrl + Shift + Up Mac Cmd + Shift + Up Copiar linea abajo Linux Ctrl + Shift + Down Mac Cmd + Shift + Down Abrir fichero (\u00fatil en el Modo Zen) Linux Ctrl + P Mac Cmd + P Abrir paleta de comandos Linux Ctrl + Alt + P o Ctrl + P y luego escribir ++>++ Mac Cmd + Alt + P o Cmd + P y luego escribir ++>++ Ir a una l\u00ednea del fichero Linux Ctrl + G o Ctrl + P y luego escribir ++:++ Mac Cmd + G o Cmd + P y luego escribir ++:++ Ver definici\u00f3n de una clase / funci\u00f3n / etc en un fichero Linux Ctrl + P y luego escribir ++@++ Mac Cmd + P y luego escribir ++@++ Ordenar por definici\u00f3n de una clase / funci\u00f3n / etc en un fichero Linux Ctrl + P y luego escribir ++@:++ Mac Cmd + P y luego escribir ++@:++ Cambiar nombre a un fichero Con el fichero seleccionado en la navbar y pulsar F2 Refactor de una variable / funci\u00f3n / clase Seleccionar una variable / funci\u00f3n / clase y pulsar F2 Markdown preview Linux Ctrl + Shift + V Mac Cmd + Shift + V Markdown preview en el lateral Linux Ctrl + K y luego V Mac Cmd + K y luego V Markdown preview en el lateral fija Tiene que ser desde la paleta de comandos","title":"Atajos interesantes"},{"location":"sw/coding/javascript/javascript/","text":"VanillaJS \u00b6 El lenguaje mondo y lirondo, o dicho en plan bien, VanillaJS, se puede ejecutar en la consola de un navegador, o sea en Frontend. Si quieres ejecutar JavaScript en un ordenador, o usar funciones avanzadas que no estan definidas en el lenguaje (como TCP), te toca usar un runtime como NodeJS (o Node), Deno o Bun. TypeScript \u00b6 Si puedes, trata de usar siempre TypeScript, \u00a1\u00a1\u00a1S-I-EM-PRE!!! Para poder usar tienes que usar un runtime si o si, ya que el navegador no soporta TypeScript. Node requiere de instalar deps. Deno y Bun soportan TypeScript por defecto.","title":"VanillaJS"},{"location":"sw/coding/javascript/javascript/#vanillajs","text":"El lenguaje mondo y lirondo, o dicho en plan bien, VanillaJS, se puede ejecutar en la consola de un navegador, o sea en Frontend. Si quieres ejecutar JavaScript en un ordenador, o usar funciones avanzadas que no estan definidas en el lenguaje (como TCP), te toca usar un runtime como NodeJS (o Node), Deno o Bun.","title":"VanillaJS"},{"location":"sw/coding/javascript/javascript/#typescript","text":"Si puedes, trata de usar siempre TypeScript, \u00a1\u00a1\u00a1S-I-EM-PRE!!! Para poder usar tienes que usar un runtime si o si, ya que el navegador no soporta TypeScript. Node requiere de instalar deps. Deno y Bun soportan TypeScript por defecto.","title":"TypeScript"},{"location":"sw/coding/javascript/nodejs/tcp/","text":"TCP \u00b6 TCP no se puede usar como tal en VanillaJS, ya que en frontend solo se puede usar HTTP y WebSockets. Por eso hay que usar un runtime como NodeJS o Deno o Bun. Servidor \u00b6 Hay que usar el modulo net del core de Node. Se crea el servidor con createServer Para gestionar los clientes / conexiones / sockets, la l\u00f3gica se puede pasar por: createServer A trav\u00e9s de una callback con el evento on('connection') El cliente / conexi\u00f3n / socket es del tipo net.Socket y se gestiona con eventos: data es cuando recibe datos. close es cuando se ha cerrado la conexi\u00f3n. error es cuando ha habido un error. El servidor tambi\u00e9n se gestiona con eventos: connection es opcional, en el sentido de que puede ir dentro de createServer . close cuando se cierra el servidor. Para iniciar el servidor hay que usar la funci\u00f3n listen . Conexi\u00f3n en createServer Conexi\u00f3n en .on('connection') import { createServer , Socket } from 'net' const PORT = process . env . TCP_SERVER_PORT || 9876 // Server + Connection const server = createServer (( client : Socket ) => { const remoteAddress = ` ${ client . remoteAddress } : ${ client . remotePort } ` console . log ( `TCP SERVER: new client connection from ${ remoteAddress } ` ) client . on ( 'data' , ( data : Buffer ) => { console . log ( `TCP SERVER: connection data from ${ remoteAddress } : ${ data } ` ) client . write ( 'TCP: SERVER: Received\\n' ) client . write ( data ) }) client . once ( 'close' , ( hadError : boolean ) => { console . log ( `TCP SERVER: connection from ${ remoteAddress } closed` ) }) client . on ( 'error' , ( error : Error ) => { console . log ( `TCP SERVER: Connection ${ remoteAddress } error: ${ error . message } ` ) }) }) // Server closed server . on ( 'close' , () => console . error ( 'TCP SERVER: closed connection at' , new Date ())) // Start server server . listen ( PORT , () => console . log ( 'TCP SERVER: listening on' , server . address ())) import { createServer , Socket } from 'net' const PORT = process . env . TCP_SERVER_PORT || 9876 // Connection logic const handleConnection = ( client : Socket ) => { const remoteAddress = ` ${ client . remoteAddress } : ${ client . remotePort } ` console . log ( `TCP SERVER: new client connection from ${ remoteAddress } ` ) client . on ( 'data' , ( data : Buffer ) => { console . log ( `TCP SERVER: connection data from ${ remoteAddress } : ${ data } ` ) client . write ( 'TCP: SERVER: Received\\n' ) client . write ( data ) }) client . once ( 'close' , ( hadError : boolean ) => { console . log ( `TCP SERVER: connection from ${ remoteAddress } closed` ) }) client . on ( 'error' , ( error : Error ) => { console . log ( `TCP SERVER: Connection ${ remoteAddress } error: ${ error . message } ` ) }) } // Server + Connection + Close const server = createServer () server . on ( 'connection' , handleConnection ) server . on ( 'close' , () => console . error ( 'TCP SERVER: closed connection at' , new Date ())) // Start server server . listen ( PORT , () => console . log ( 'TCP SERVER: listening on' , server . address ())) Cliente \u00b6 El cliente / conexi\u00f3n / socket usa la clase net.Socket . Una vez se inicia con la funci\u00f3n connect , se gestiona a trav\u00e9s de eventos: data es cuando recibe datos. close es cuando se ha cerrado la conexi\u00f3n. error es cuando ha habido un error. import { Socket } from 'net' const URL = process . env . TCP_SERVER_IP || '127.0.0.1' const PORT = process . env . TCP_SERVER_PORT || 9876 const client = new Socket () client . connect ( Number ( PORT ), URL , () => { console . log ( 'TCP CLIENT: connected' ) client . write ( `Hello world ${ new Date () } ` ) }) client . on ( 'data' , ( data : Buffer ) => { console . log ( 'TCP CLIENT: Received' , data . toString ( 'utf8' )) }) client . on ( 'close' , ( hadError : boolean ) => { console . log ( 'TCP CLIENT: socket closed' , new Date ()) })","title":"TCP"},{"location":"sw/coding/javascript/nodejs/tcp/#tcp","text":"TCP no se puede usar como tal en VanillaJS, ya que en frontend solo se puede usar HTTP y WebSockets. Por eso hay que usar un runtime como NodeJS o Deno o Bun.","title":"TCP"},{"location":"sw/coding/javascript/nodejs/tcp/#servidor","text":"Hay que usar el modulo net del core de Node. Se crea el servidor con createServer Para gestionar los clientes / conexiones / sockets, la l\u00f3gica se puede pasar por: createServer A trav\u00e9s de una callback con el evento on('connection') El cliente / conexi\u00f3n / socket es del tipo net.Socket y se gestiona con eventos: data es cuando recibe datos. close es cuando se ha cerrado la conexi\u00f3n. error es cuando ha habido un error. El servidor tambi\u00e9n se gestiona con eventos: connection es opcional, en el sentido de que puede ir dentro de createServer . close cuando se cierra el servidor. Para iniciar el servidor hay que usar la funci\u00f3n listen . Conexi\u00f3n en createServer Conexi\u00f3n en .on('connection') import { createServer , Socket } from 'net' const PORT = process . env . TCP_SERVER_PORT || 9876 // Server + Connection const server = createServer (( client : Socket ) => { const remoteAddress = ` ${ client . remoteAddress } : ${ client . remotePort } ` console . log ( `TCP SERVER: new client connection from ${ remoteAddress } ` ) client . on ( 'data' , ( data : Buffer ) => { console . log ( `TCP SERVER: connection data from ${ remoteAddress } : ${ data } ` ) client . write ( 'TCP: SERVER: Received\\n' ) client . write ( data ) }) client . once ( 'close' , ( hadError : boolean ) => { console . log ( `TCP SERVER: connection from ${ remoteAddress } closed` ) }) client . on ( 'error' , ( error : Error ) => { console . log ( `TCP SERVER: Connection ${ remoteAddress } error: ${ error . message } ` ) }) }) // Server closed server . on ( 'close' , () => console . error ( 'TCP SERVER: closed connection at' , new Date ())) // Start server server . listen ( PORT , () => console . log ( 'TCP SERVER: listening on' , server . address ())) import { createServer , Socket } from 'net' const PORT = process . env . TCP_SERVER_PORT || 9876 // Connection logic const handleConnection = ( client : Socket ) => { const remoteAddress = ` ${ client . remoteAddress } : ${ client . remotePort } ` console . log ( `TCP SERVER: new client connection from ${ remoteAddress } ` ) client . on ( 'data' , ( data : Buffer ) => { console . log ( `TCP SERVER: connection data from ${ remoteAddress } : ${ data } ` ) client . write ( 'TCP: SERVER: Received\\n' ) client . write ( data ) }) client . once ( 'close' , ( hadError : boolean ) => { console . log ( `TCP SERVER: connection from ${ remoteAddress } closed` ) }) client . on ( 'error' , ( error : Error ) => { console . log ( `TCP SERVER: Connection ${ remoteAddress } error: ${ error . message } ` ) }) } // Server + Connection + Close const server = createServer () server . on ( 'connection' , handleConnection ) server . on ( 'close' , () => console . error ( 'TCP SERVER: closed connection at' , new Date ())) // Start server server . listen ( PORT , () => console . log ( 'TCP SERVER: listening on' , server . address ()))","title":"Servidor"},{"location":"sw/coding/javascript/nodejs/tcp/#cliente","text":"El cliente / conexi\u00f3n / socket usa la clase net.Socket . Una vez se inicia con la funci\u00f3n connect , se gestiona a trav\u00e9s de eventos: data es cuando recibe datos. close es cuando se ha cerrado la conexi\u00f3n. error es cuando ha habido un error. import { Socket } from 'net' const URL = process . env . TCP_SERVER_IP || '127.0.0.1' const PORT = process . env . TCP_SERVER_PORT || 9876 const client = new Socket () client . connect ( Number ( PORT ), URL , () => { console . log ( 'TCP CLIENT: connected' ) client . write ( `Hello world ${ new Date () } ` ) }) client . on ( 'data' , ( data : Buffer ) => { console . log ( 'TCP CLIENT: Received' , data . toString ( 'utf8' )) }) client . on ( 'close' , ( hadError : boolean ) => { console . log ( 'TCP CLIENT: socket closed' , new Date ()) })","title":"Cliente"},{"location":"sw/coding/javascript/nodejs/typescript/","text":"TypeScript \u00b6 Siempre que puedas, usa TypeScript, ya que aporta much\u00edsimo m\u00e1s que trabajar con JavaScript. La mayor\u00eda de ejemplos que vas a encontrar tratar\u00e9 que esten en TypeScript. TypeScript en NodeJS \u00b6 Deps en tu proyecto \u00b6 typescript : El lenguaje @types/node : Los tipos de Node para que los sepa TypeScript. ts-node-dev : Para poder tener hot module reload, HMR, sin usar el t\u00edpico nodemon . npm i -D typescript @types/node ts-node-dev Crear el tsconfig \u00b6 tsc --init Ejecutar ficheros \u00b6 ts-node-dev <fichero.ts>","title":"TypeScript"},{"location":"sw/coding/javascript/nodejs/typescript/#typescript","text":"Siempre que puedas, usa TypeScript, ya que aporta much\u00edsimo m\u00e1s que trabajar con JavaScript. La mayor\u00eda de ejemplos que vas a encontrar tratar\u00e9 que esten en TypeScript.","title":"TypeScript"},{"location":"sw/coding/javascript/nodejs/typescript/#typescript-en-nodejs","text":"","title":"TypeScript en NodeJS"},{"location":"sw/coding/javascript/nodejs/typescript/#deps-en-tu-proyecto","text":"typescript : El lenguaje @types/node : Los tipos de Node para que los sepa TypeScript. ts-node-dev : Para poder tener hot module reload, HMR, sin usar el t\u00edpico nodemon . npm i -D typescript @types/node ts-node-dev","title":"Deps en tu proyecto"},{"location":"sw/coding/javascript/nodejs/typescript/#crear-el-tsconfig","text":"tsc --init","title":"Crear el tsconfig"},{"location":"sw/coding/javascript/nodejs/typescript/#ejecutar-ficheros","text":"ts-node-dev <fichero.ts>","title":"Ejecutar ficheros"},{"location":"sw/coding/python/entornos_virtuales/","text":"Entornos Virtuales \u00b6 Si estas en la carpeta /home/manuel/Code y tienes un fichero Python llamado hola.py , para ejecutarlo desde la consola pones python3 hola.py . Esta instrucci\u00f3n lo que hace es buscar el programa Python 3 que hay en tu sistema operativo, posiblemente est\u00e9 en /usr/bin/python3 , siendo python3 un enlace a una versi\u00f3n de Python 3 de tu sistema operativo ( python3.4 , python3.5 , python3.6 ...). Si por ejemplo la versi\u00f3n de Python 3 enlazada es la 3.5, hacer python3 hola.py equivale a /usr/bin/python3.5 /home/manuel/hola.py . Adem\u00e1s, por cada versi\u00f3n de Python instalada en tu sistema operativo, puedes contar con su gestor de paquetes PIP . \u00bfQue ocurre si quiero probar cosas muy distintas con Python (por ejemplo desarrollo web, matem\u00e1ticas, etc)? Que al final tengo instalado desde pip una cantidad de paquetes \"basura\", que no voy a usar \u00bfY si quiero usar una versi\u00f3n de una librer\u00eda para un proyecto y otra versi\u00f3n para otro? Pues que tendr\u00eda que estar instalando/desinstalando cada vez que tenga que ponerme con un proyecto u otro. Ya se empieza a ver que esto es un engorro, \u00bfverdad? VENV / Virtualenv \u00b6 Para solucionar todo esto se cre\u00f3 un concepto llamado \"Entorno virtual\" o Virtualenv . Consiste en decir Venga quiero tener una versi\u00f3n (aislada del sistema operativo) de Python con su pip para poder cacharrear/trabajar, y cuando me harte la borro y listo. \u00bfPor qu\u00e9 aislada? Porque el sistema operativo usa Python para sus cosas tambi\u00e9n, as\u00ed que es recomendable siempre, en la medida de lo posible, no tocar nunca el Python del sistema. Usa venv no virtualenv En vez de usar virtualenv , usa venv que ya viene instalado en el propio Python Instalar venv \u00b6 venv ya viene instalado con Python. Si no viniese, instalalo con sudo apt install python3-venv Usar entornos virtuales \u00b6 Una vez instalado, generas un virtualenv nuevo con la instrucci\u00f3n python3 -m venv <nombre-del-virtualenv> . Supon que quieres hacer un virtualenv para probar desarrollo web con Python. Pues haces python3 -m venv env . Esto crear\u00e1 una carpeta en el directorio donde est\u00e9s que se llamar\u00e1 env . Dentro de esta carpeta tendr\u00e1s un mont\u00f3n de carpetas con un python listo para usarlo. Para activar el virtualenv tienes que ejecutar un script que se llama activate dentro del virtualenv. Imagina que el virtualenv env esta en el directorio /home/manuel/web , pues para activarlo desde la terminal ejecuta source /home/manuel/web/env/bin/activate . Ahora veras como en el prompt de la consola (la linea donde pones los comandos) delante de todo pone (env) . Eso quiere decir que tienes el virtualenv activado. si ahora ejecutas python --version y pip --version veras que est\u00e1 usando el python y el pip del virtualenv. Para poder salir del virtualenv solo tienes que ejecutar deactivate y veras como el (env) desaparece del prompt. Si quieres borrar el virtualenv, tienes que borrar toda la carpeta env . El problema de esto, es que es un poco engorroso tener que estar poniendo la ruta del activate cada vez que quieras acceder al virtualenv. Virtualenvwrapper \u00b6 Virtualenvwrapper es una utilidad montada sobre virtualenv que permite trabajar con entornos virtuales de manera mucho m\u00e1s c\u00f3moda. Instalar virtualenvwrapper \u00b6 Para que funcione tienes que hacer: Instalarlo con el pip del sistema pip install virtualenvwrapper o pip3 install virtualenvwrapper . Dentro del fichero de configuraci\u00f3n que usa tu terminal .bashrc o .zshrc (est\u00e1 en el directorio home), tienes que a\u00f1adir decirle: Que Python es el que va a usar virtualenvwrapper. Es decir, el Python con el que lo has instalado. Si es el del sistema operativo entonces es /usr/bin/python3 . En que directorio se van a guardar todos los virtualenvs. Por lo general se suele poner la carpeta .virtualenvs en el home. Opcionalmente se le puede indicar en que carpeta vas a tener los programas/c\u00f3digos/proyectos. As\u00ed cuando actives un virtualenv, directamente te va a abrir esa carpeta (lo cual es mucho m\u00e1s c\u00f3modo). En este ejemplo se a usa la carpeta Coding . Hay que indicarle que cargue el script de virtualenvwrapper que se llama virtualenvwrapper.sh . Para encontrarlo (normalmente lo deja en $HOME/.local/bin/virtualenvwrapper.sh ) hay que usar el comando sudo find / -name virtualenvwrapper.sh As\u00ed que al final tu fichero /home/manuel/.bashrc o /home/manuel/.zshrc tiene que tener algo as\u00ed: .zshrc export VIRTUALENVWRAPPER_PYTHON = /usr/bin/python3 export WORKON_HOME = $HOME /.virtualenvs export PROJECT_HOME = $HOME /Coding source $HOME /.local/bin/virtualenvwrapper.sh Ahora tienes que cargar de nuevo tu terminal. Simplemente cierrala y vuelve a abrirla o hazlo manualmente ejecutando source ~/.bashrc (si usas BASH) o source ~/.zshrc (si usas ZSH). Como usar virtualenvwrapper \u00b6 Ejecuta workon y te listar\u00e1 todos los entornos virtuales que tengas creados en tu $WORKON_HOME . Con el comando mkvirtualenv puedes crear un entorno virtualenv de manera m\u00e1s c\u00f3moda. Si quisiera crear el entorno virtual de antes, ejecuta mkvirtualenv web ( mkvirtualenv -p python3.6 web ). Esto no solo no crea el virtualenv web , sino que adem\u00e1s lo abre / activa. Si quieres cerrar / desactivar el virtualenv usa deactivate . Para poder activarlo de nuevo ejecuta workon web . Para borrar un virtualenv usa el comando rmvirtualenv . As\u00ed para borrar el virtualenv web haces rmvirtualenv web y listo. El \u00fanico problema que tienes ahora es que esto solo tira con un Python que sea de la misma versi\u00f3n que la de tu sistema operativo \u00bfY si quieres un Python anterior o uno m\u00e1s moderno? A\u00f1adir PYTHONPATH \u00b6 Soluci\u00f3n sacada de internet La soluci\u00f3n ha sido obtenida de aqu\u00ed . Supon que tienes un proyecto python con la siguiente estructura: proj | -src | -foo.py | -examples | -examplebar | - bar.py Y que el fichero bar.py contiene la siguiente l\u00ednea bar.py from src import foo Si desde proj ejecutas python examples / examplebar / bar . py Lo m\u00e1s probable es que la consola te d\u00e9 un error como ModuleNotFoundError: No module named 'src' . Esto es porque proj no est\u00e1 a\u00f1adido a la variable de entorno $PYTHONPATH . Para ver que contiene esta variable puedes abrir la consola de python y ejectuar python import sys sys . path Podras comprobar como tu directorio no est\u00e1. Para a\u00f1adir el directorio a la variable hay muchas maneras, pero ya usas virtualenvwrapper (entre otras cosas), soluci\u00f3n es bien sencilla: Desde la terminal nos vas al directorio proj . Activas el virtualenv correspondiente workon ... . Escribe en la terminal add2virtualenv . . Esto a\u00f1adir\u00e1 el actual directorio a la variable $PYTHONPATH. Y ya est\u00e1, ya podras ejecutar sin problemas tu proyecto. Si quisieras deshacer lo que has hecho, simplemente en el paso 3. de antes ejecuta add2virtualenv -d . , y con eso ser\u00eda suficiente. Pyenv \u00b6 Pyenv es una herramienta, copiada de otra del lenguage Ruby, para poder tener distintas versiones de Python instaladas en el equipo sin comprometer la integrigad del sistema operativo. B\u00e1sicamente pyenv lo que hace es poner en la variable del sistema $PATH los binarios de las versiones de Python que instala. Art\u00edculo que explica como funciona Pyenv Este link est\u00e1 chachi -> art\u00edculo de David Naranjo Instalar pyenv \u00b6 Hay un instalador autom\u00e1tico: Descarga el instalador de pyenv y este instalar\u00e1 todo normalmente $HOME/.pyenv # Para BASH curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash # Para ZSH curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | zsh Enlazar los binarios en la variable del sistema $PATH . Pon esto en tu fichero $HOME/.bashrc si usas BASH o $HOME/.zshrc si usas ZSH. .zshrc export PYENV_ROOT = \" $HOME /.pyenv\" command -v pyenv >/dev/null || export PATH = \" $PYENV_ROOT /bin: $PATH \" eval \" $( pyenv init - ) \" Recarga la terminal cerr\u00e1ndola + volvi\u00e9ndola a abrir o con source $HOME/.bashrc para BASH o source $HOME/.zshrc para ZSH. Si te da problemas de deps, pues ve instal\u00e1ndolas conforme las pida. Antes las deps que necesitaba eran estas: sudo apt install -y make build-essential git libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev Para m\u00e1s problemas mira en esta p\u00e1gina . Para desintalar todo es tan sencillo como borrar la carpeta $HOME/.pyenv -> sudo rm -rf $HOME/.pyenv . Como usar pyenv \u00b6 Actualiza primero pyenv con pyenv update Ahora puedes listar todas las versiones de Python para instalar en tu equipo con pyenv install -l Imagina que quieres instalar la versi\u00f3n 3.11.1 pues entonces haces pyenv install 3 .11.1 Esto instalar\u00e1 un interprete de Python 3.11.1 en la carpeta ~/.pyenv/versions/ . Para que puedas ver que versiones de Python tienes instaladas ejecuta pyenv versions Y tendr\u00e1s listadas tanto la versi\u00f3n del sistema, como las que hayas instalado con pyenv. Cuando quieras usar una versi\u00f3n de Python concreta, por ejemplo la 3.11.1 que acabas de instalar, ejecuta pyenv local 3 .11.1 En esa carpeta donde est\u00e1s se te crear\u00e1 un fichero .python-version que contiene 3.11.1 como contenido. Si ahora ejecutas python --version desde la terminal, ver\u00e1s que usa el Python 3.11.1 de pyenv. Para deshacer esto y que vuelva a tener la versi\u00f3n de Python del sistema operativo, borra ese fichero .python-version o ejecuta pyenv local system Tambi\u00e9n puedes modificar el Python global que puedes usar, pero no te lo recomiendo. # Con esto modificas el Python global para que tira del 3.11.1 que has instalado pyenv global 3 .11.1 # Con esto dejas todo como estaba pyenv global system As\u00ed que lo \u00fanico que tienes que hacer a partir de ahora es: Con pyenv elije que Python vas a usar en esa carpeta. Genera tus entornos virtuales nuevos. Virtualenvwrapper + Pyenv ya te sirve para tener todo chachi para trabajar, pero te recomiendo que uses Poetry en lugar de Virtualenvwrapper. Antes hab\u00eda otra herramienta, Pipenv, pero no te la recomiendo a d\u00eda de hoy. Poetry \u00b6 Poetry es una herramienta para poder gestionar mejor los proyectos Python con entornos virtuales y hacer empaquetado. En parte ser\u00eda un equivalente a NPM en el ecosistema NodeJS. Instalar Poetry \u00b6 Hay que ejecutar curl -sSL https://install.python-poetry.org | python3 - B\u00e1sicamente el comando lo que ha hecho es: Instalar Poetry, normalmente en $HOME/.local/share/pypoetry/venv/bin/poetry . Crear un enlace simb\u00f3lico en $HOME/.local/bin/poetry que apunta a la instalaci\u00f3n anterior. Para comprobar que se ha instalado bien ejecuta poetry --version Si no te va, es porque no tienes $HOME/.local/bin a\u00f1adido a tu $PATH . Te recomiendo que a\u00f1adas entonces solo esto a tu $HOME/.bashrc o $HOME/.zshrc . .zshrc export POETRY_HOME = \" $HOME /.local/share/pypoetry/venv/\" command -v poetry >/dev/null || export PATH = \" $POETRY_HOME /bin: $PATH \" Recarga la terminal con source $HOME/.bashrc o $HOME/.zshrc y prueba de nuevo con poetry --version . Si tuvieras que desinstalar poetry usa curl -sSL https://install.python-poetry.org | python3 - --uninstall Configurar poetry \u00b6 Antes de usarlo, te recomiendo que hagas unos peque\u00f1os ajustes. Para poder ver la configuraci\u00f3n de poetry ejecuta poetry config --list La parte que debes de cambiar es virtualenvs.path para que use la que configuraste con Virtualenvwrapper. poetry config virtualenvs.path $HOME /.virtualenvs Tambi\u00e9n puedes hacerlo a\u00f1adiendo al fichero $HOME/.bashrc o $HOME/.zshrc export POETRY_VIRTUALENVS_PATH = $HOME /.virtualenvs Como usar poetry \u00b6 Lo primero, actualiza poetry con poetry self update Poetry funciona en tus proyectos usando un fichero pyproject.toml . Abrelo y te vas familiarizando con \u00e9l. Si tienes un proyecto ya hecho y quieres \"poetryzarlo\" ejecuta poetry init Si vas a empezar un proyecto desde cero con poetry, \u00e9l puede crearte todo el scafolding (toda la estructura de carpetas) con poetry new mi_proyecto Y si te acabas de descargar un proyecto que usa poetry, solo tienes que seguir leyendo. Sea como sea, una vez tengas un proyecto ya con tu ficherico pyproject.toml te recomiendo que hagas esto para poder tener tu virtualenv: Elige la versi\u00f3n de Python para ese proyecto con pyenv (por ejemplo 3.11.1) pyenv local 3 .11.1 Crea el entorno virtual con poetry usando esa versi\u00f3n de Python poetry env use 3 .11 Ahora ya tienes una el entorno virtual listo. Para a\u00f1adir dependencias a tu proyecto poetry add <dependencia> Si la dependencia es solo de desarrollo, es decir que no la usa el proyecto en producci\u00f3n pero tu si para desarrollar (como un linter o tests) poetry add --G dev <dependencia> Si lo que quieres es instalar todas las deps que ten\u00eda definido el proyecto poetry install Para pasar del proyecto de poetry al t\u00edpico requirements.txt poetry export --without-hashes --format = requirements.txt > requirements.txt Si quieres activar el entorno virtual poetry shell Para desactivarlo pues con deactivate","title":"Entornos virtuales"},{"location":"sw/coding/python/entornos_virtuales/#entornos-virtuales","text":"Si estas en la carpeta /home/manuel/Code y tienes un fichero Python llamado hola.py , para ejecutarlo desde la consola pones python3 hola.py . Esta instrucci\u00f3n lo que hace es buscar el programa Python 3 que hay en tu sistema operativo, posiblemente est\u00e9 en /usr/bin/python3 , siendo python3 un enlace a una versi\u00f3n de Python 3 de tu sistema operativo ( python3.4 , python3.5 , python3.6 ...). Si por ejemplo la versi\u00f3n de Python 3 enlazada es la 3.5, hacer python3 hola.py equivale a /usr/bin/python3.5 /home/manuel/hola.py . Adem\u00e1s, por cada versi\u00f3n de Python instalada en tu sistema operativo, puedes contar con su gestor de paquetes PIP . \u00bfQue ocurre si quiero probar cosas muy distintas con Python (por ejemplo desarrollo web, matem\u00e1ticas, etc)? Que al final tengo instalado desde pip una cantidad de paquetes \"basura\", que no voy a usar \u00bfY si quiero usar una versi\u00f3n de una librer\u00eda para un proyecto y otra versi\u00f3n para otro? Pues que tendr\u00eda que estar instalando/desinstalando cada vez que tenga que ponerme con un proyecto u otro. Ya se empieza a ver que esto es un engorro, \u00bfverdad?","title":"Entornos Virtuales"},{"location":"sw/coding/python/entornos_virtuales/#venv-virtualenv","text":"Para solucionar todo esto se cre\u00f3 un concepto llamado \"Entorno virtual\" o Virtualenv . Consiste en decir Venga quiero tener una versi\u00f3n (aislada del sistema operativo) de Python con su pip para poder cacharrear/trabajar, y cuando me harte la borro y listo. \u00bfPor qu\u00e9 aislada? Porque el sistema operativo usa Python para sus cosas tambi\u00e9n, as\u00ed que es recomendable siempre, en la medida de lo posible, no tocar nunca el Python del sistema. Usa venv no virtualenv En vez de usar virtualenv , usa venv que ya viene instalado en el propio Python","title":"VENV / Virtualenv"},{"location":"sw/coding/python/entornos_virtuales/#instalar-venv","text":"venv ya viene instalado con Python. Si no viniese, instalalo con sudo apt install python3-venv","title":"Instalar venv"},{"location":"sw/coding/python/entornos_virtuales/#usar-entornos-virtuales","text":"Una vez instalado, generas un virtualenv nuevo con la instrucci\u00f3n python3 -m venv <nombre-del-virtualenv> . Supon que quieres hacer un virtualenv para probar desarrollo web con Python. Pues haces python3 -m venv env . Esto crear\u00e1 una carpeta en el directorio donde est\u00e9s que se llamar\u00e1 env . Dentro de esta carpeta tendr\u00e1s un mont\u00f3n de carpetas con un python listo para usarlo. Para activar el virtualenv tienes que ejecutar un script que se llama activate dentro del virtualenv. Imagina que el virtualenv env esta en el directorio /home/manuel/web , pues para activarlo desde la terminal ejecuta source /home/manuel/web/env/bin/activate . Ahora veras como en el prompt de la consola (la linea donde pones los comandos) delante de todo pone (env) . Eso quiere decir que tienes el virtualenv activado. si ahora ejecutas python --version y pip --version veras que est\u00e1 usando el python y el pip del virtualenv. Para poder salir del virtualenv solo tienes que ejecutar deactivate y veras como el (env) desaparece del prompt. Si quieres borrar el virtualenv, tienes que borrar toda la carpeta env . El problema de esto, es que es un poco engorroso tener que estar poniendo la ruta del activate cada vez que quieras acceder al virtualenv.","title":"Usar entornos virtuales"},{"location":"sw/coding/python/entornos_virtuales/#virtualenvwrapper","text":"Virtualenvwrapper es una utilidad montada sobre virtualenv que permite trabajar con entornos virtuales de manera mucho m\u00e1s c\u00f3moda.","title":"Virtualenvwrapper"},{"location":"sw/coding/python/entornos_virtuales/#instalar-virtualenvwrapper","text":"Para que funcione tienes que hacer: Instalarlo con el pip del sistema pip install virtualenvwrapper o pip3 install virtualenvwrapper . Dentro del fichero de configuraci\u00f3n que usa tu terminal .bashrc o .zshrc (est\u00e1 en el directorio home), tienes que a\u00f1adir decirle: Que Python es el que va a usar virtualenvwrapper. Es decir, el Python con el que lo has instalado. Si es el del sistema operativo entonces es /usr/bin/python3 . En que directorio se van a guardar todos los virtualenvs. Por lo general se suele poner la carpeta .virtualenvs en el home. Opcionalmente se le puede indicar en que carpeta vas a tener los programas/c\u00f3digos/proyectos. As\u00ed cuando actives un virtualenv, directamente te va a abrir esa carpeta (lo cual es mucho m\u00e1s c\u00f3modo). En este ejemplo se a usa la carpeta Coding . Hay que indicarle que cargue el script de virtualenvwrapper que se llama virtualenvwrapper.sh . Para encontrarlo (normalmente lo deja en $HOME/.local/bin/virtualenvwrapper.sh ) hay que usar el comando sudo find / -name virtualenvwrapper.sh As\u00ed que al final tu fichero /home/manuel/.bashrc o /home/manuel/.zshrc tiene que tener algo as\u00ed: .zshrc export VIRTUALENVWRAPPER_PYTHON = /usr/bin/python3 export WORKON_HOME = $HOME /.virtualenvs export PROJECT_HOME = $HOME /Coding source $HOME /.local/bin/virtualenvwrapper.sh Ahora tienes que cargar de nuevo tu terminal. Simplemente cierrala y vuelve a abrirla o hazlo manualmente ejecutando source ~/.bashrc (si usas BASH) o source ~/.zshrc (si usas ZSH).","title":"Instalar virtualenvwrapper"},{"location":"sw/coding/python/entornos_virtuales/#como-usar-virtualenvwrapper","text":"Ejecuta workon y te listar\u00e1 todos los entornos virtuales que tengas creados en tu $WORKON_HOME . Con el comando mkvirtualenv puedes crear un entorno virtualenv de manera m\u00e1s c\u00f3moda. Si quisiera crear el entorno virtual de antes, ejecuta mkvirtualenv web ( mkvirtualenv -p python3.6 web ). Esto no solo no crea el virtualenv web , sino que adem\u00e1s lo abre / activa. Si quieres cerrar / desactivar el virtualenv usa deactivate . Para poder activarlo de nuevo ejecuta workon web . Para borrar un virtualenv usa el comando rmvirtualenv . As\u00ed para borrar el virtualenv web haces rmvirtualenv web y listo. El \u00fanico problema que tienes ahora es que esto solo tira con un Python que sea de la misma versi\u00f3n que la de tu sistema operativo \u00bfY si quieres un Python anterior o uno m\u00e1s moderno?","title":"Como usar virtualenvwrapper"},{"location":"sw/coding/python/entornos_virtuales/#anadir-pythonpath","text":"Soluci\u00f3n sacada de internet La soluci\u00f3n ha sido obtenida de aqu\u00ed . Supon que tienes un proyecto python con la siguiente estructura: proj | -src | -foo.py | -examples | -examplebar | - bar.py Y que el fichero bar.py contiene la siguiente l\u00ednea bar.py from src import foo Si desde proj ejecutas python examples / examplebar / bar . py Lo m\u00e1s probable es que la consola te d\u00e9 un error como ModuleNotFoundError: No module named 'src' . Esto es porque proj no est\u00e1 a\u00f1adido a la variable de entorno $PYTHONPATH . Para ver que contiene esta variable puedes abrir la consola de python y ejectuar python import sys sys . path Podras comprobar como tu directorio no est\u00e1. Para a\u00f1adir el directorio a la variable hay muchas maneras, pero ya usas virtualenvwrapper (entre otras cosas), soluci\u00f3n es bien sencilla: Desde la terminal nos vas al directorio proj . Activas el virtualenv correspondiente workon ... . Escribe en la terminal add2virtualenv . . Esto a\u00f1adir\u00e1 el actual directorio a la variable $PYTHONPATH. Y ya est\u00e1, ya podras ejecutar sin problemas tu proyecto. Si quisieras deshacer lo que has hecho, simplemente en el paso 3. de antes ejecuta add2virtualenv -d . , y con eso ser\u00eda suficiente.","title":"A\u00f1adir PYTHONPATH"},{"location":"sw/coding/python/entornos_virtuales/#pyenv","text":"Pyenv es una herramienta, copiada de otra del lenguage Ruby, para poder tener distintas versiones de Python instaladas en el equipo sin comprometer la integrigad del sistema operativo. B\u00e1sicamente pyenv lo que hace es poner en la variable del sistema $PATH los binarios de las versiones de Python que instala. Art\u00edculo que explica como funciona Pyenv Este link est\u00e1 chachi -> art\u00edculo de David Naranjo","title":"Pyenv"},{"location":"sw/coding/python/entornos_virtuales/#instalar-pyenv","text":"Hay un instalador autom\u00e1tico: Descarga el instalador de pyenv y este instalar\u00e1 todo normalmente $HOME/.pyenv # Para BASH curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash # Para ZSH curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | zsh Enlazar los binarios en la variable del sistema $PATH . Pon esto en tu fichero $HOME/.bashrc si usas BASH o $HOME/.zshrc si usas ZSH. .zshrc export PYENV_ROOT = \" $HOME /.pyenv\" command -v pyenv >/dev/null || export PATH = \" $PYENV_ROOT /bin: $PATH \" eval \" $( pyenv init - ) \" Recarga la terminal cerr\u00e1ndola + volvi\u00e9ndola a abrir o con source $HOME/.bashrc para BASH o source $HOME/.zshrc para ZSH. Si te da problemas de deps, pues ve instal\u00e1ndolas conforme las pida. Antes las deps que necesitaba eran estas: sudo apt install -y make build-essential git libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev Para m\u00e1s problemas mira en esta p\u00e1gina . Para desintalar todo es tan sencillo como borrar la carpeta $HOME/.pyenv -> sudo rm -rf $HOME/.pyenv .","title":"Instalar pyenv"},{"location":"sw/coding/python/entornos_virtuales/#como-usar-pyenv","text":"Actualiza primero pyenv con pyenv update Ahora puedes listar todas las versiones de Python para instalar en tu equipo con pyenv install -l Imagina que quieres instalar la versi\u00f3n 3.11.1 pues entonces haces pyenv install 3 .11.1 Esto instalar\u00e1 un interprete de Python 3.11.1 en la carpeta ~/.pyenv/versions/ . Para que puedas ver que versiones de Python tienes instaladas ejecuta pyenv versions Y tendr\u00e1s listadas tanto la versi\u00f3n del sistema, como las que hayas instalado con pyenv. Cuando quieras usar una versi\u00f3n de Python concreta, por ejemplo la 3.11.1 que acabas de instalar, ejecuta pyenv local 3 .11.1 En esa carpeta donde est\u00e1s se te crear\u00e1 un fichero .python-version que contiene 3.11.1 como contenido. Si ahora ejecutas python --version desde la terminal, ver\u00e1s que usa el Python 3.11.1 de pyenv. Para deshacer esto y que vuelva a tener la versi\u00f3n de Python del sistema operativo, borra ese fichero .python-version o ejecuta pyenv local system Tambi\u00e9n puedes modificar el Python global que puedes usar, pero no te lo recomiendo. # Con esto modificas el Python global para que tira del 3.11.1 que has instalado pyenv global 3 .11.1 # Con esto dejas todo como estaba pyenv global system As\u00ed que lo \u00fanico que tienes que hacer a partir de ahora es: Con pyenv elije que Python vas a usar en esa carpeta. Genera tus entornos virtuales nuevos. Virtualenvwrapper + Pyenv ya te sirve para tener todo chachi para trabajar, pero te recomiendo que uses Poetry en lugar de Virtualenvwrapper. Antes hab\u00eda otra herramienta, Pipenv, pero no te la recomiendo a d\u00eda de hoy.","title":"Como usar pyenv"},{"location":"sw/coding/python/entornos_virtuales/#poetry","text":"Poetry es una herramienta para poder gestionar mejor los proyectos Python con entornos virtuales y hacer empaquetado. En parte ser\u00eda un equivalente a NPM en el ecosistema NodeJS.","title":"Poetry"},{"location":"sw/coding/python/entornos_virtuales/#instalar-poetry","text":"Hay que ejecutar curl -sSL https://install.python-poetry.org | python3 - B\u00e1sicamente el comando lo que ha hecho es: Instalar Poetry, normalmente en $HOME/.local/share/pypoetry/venv/bin/poetry . Crear un enlace simb\u00f3lico en $HOME/.local/bin/poetry que apunta a la instalaci\u00f3n anterior. Para comprobar que se ha instalado bien ejecuta poetry --version Si no te va, es porque no tienes $HOME/.local/bin a\u00f1adido a tu $PATH . Te recomiendo que a\u00f1adas entonces solo esto a tu $HOME/.bashrc o $HOME/.zshrc . .zshrc export POETRY_HOME = \" $HOME /.local/share/pypoetry/venv/\" command -v poetry >/dev/null || export PATH = \" $POETRY_HOME /bin: $PATH \" Recarga la terminal con source $HOME/.bashrc o $HOME/.zshrc y prueba de nuevo con poetry --version . Si tuvieras que desinstalar poetry usa curl -sSL https://install.python-poetry.org | python3 - --uninstall","title":"Instalar Poetry"},{"location":"sw/coding/python/entornos_virtuales/#configurar-poetry","text":"Antes de usarlo, te recomiendo que hagas unos peque\u00f1os ajustes. Para poder ver la configuraci\u00f3n de poetry ejecuta poetry config --list La parte que debes de cambiar es virtualenvs.path para que use la que configuraste con Virtualenvwrapper. poetry config virtualenvs.path $HOME /.virtualenvs Tambi\u00e9n puedes hacerlo a\u00f1adiendo al fichero $HOME/.bashrc o $HOME/.zshrc export POETRY_VIRTUALENVS_PATH = $HOME /.virtualenvs","title":"Configurar poetry"},{"location":"sw/coding/python/entornos_virtuales/#como-usar-poetry","text":"Lo primero, actualiza poetry con poetry self update Poetry funciona en tus proyectos usando un fichero pyproject.toml . Abrelo y te vas familiarizando con \u00e9l. Si tienes un proyecto ya hecho y quieres \"poetryzarlo\" ejecuta poetry init Si vas a empezar un proyecto desde cero con poetry, \u00e9l puede crearte todo el scafolding (toda la estructura de carpetas) con poetry new mi_proyecto Y si te acabas de descargar un proyecto que usa poetry, solo tienes que seguir leyendo. Sea como sea, una vez tengas un proyecto ya con tu ficherico pyproject.toml te recomiendo que hagas esto para poder tener tu virtualenv: Elige la versi\u00f3n de Python para ese proyecto con pyenv (por ejemplo 3.11.1) pyenv local 3 .11.1 Crea el entorno virtual con poetry usando esa versi\u00f3n de Python poetry env use 3 .11 Ahora ya tienes una el entorno virtual listo. Para a\u00f1adir dependencias a tu proyecto poetry add <dependencia> Si la dependencia es solo de desarrollo, es decir que no la usa el proyecto en producci\u00f3n pero tu si para desarrollar (como un linter o tests) poetry add --G dev <dependencia> Si lo que quieres es instalar todas las deps que ten\u00eda definido el proyecto poetry install Para pasar del proyecto de poetry al t\u00edpico requirements.txt poetry export --without-hashes --format = requirements.txt > requirements.txt Si quieres activar el entorno virtual poetry shell Para desactivarlo pues con deactivate","title":"Como usar poetry"},{"location":"sw/coding/python/python/","text":"Python \u00b6 Esto es solo una forma de desarrollar con Python muy opinionada. Si tienes otra, probablemente pueda ser mejor que esta, pero esta es la m\u00eda hasta ahora. Entorno de Desarrollo \u00b6 Para trabajar con Python te recomiendo que uses una de estas dos opciones: Virtualenvwrapper + Pyenv + Poetry Docker Para la opci\u00f3n 1 ve a Entornos Virtuales La opci\u00f3n 2 la comentar\u00e9 en el futuro. Dependencias de desarrollo \u00b6 Yo uso: flake8 como linter de Python. mypy como linter de tipado. black para el formateado de c\u00f3digo. SonarLint sonarlint lo uso a trav\u00e9s de la extensi\u00f3n de VSCode, y es un linter que te avisa sobre smells y buenas pr\u00e1cticas. Es un plus para la seguiridad de tu c\u00f3digo. IDE \u00b6 VSCode Instalar las extensiones: Python python snippets Python Type Hint SonarLint Test Adapter Converter Habilitar el linting en VSCode as\u00ed como los linters .vscode/json { \"python.linting.enabled\" : true , \"python.linting.flake8Enabled\" : true , \"python.linting.mypyEnabled\" : true , }","title":"Setup"},{"location":"sw/coding/python/python/#python","text":"Esto es solo una forma de desarrollar con Python muy opinionada. Si tienes otra, probablemente pueda ser mejor que esta, pero esta es la m\u00eda hasta ahora.","title":"Python"},{"location":"sw/coding/python/python/#entorno-de-desarrollo","text":"Para trabajar con Python te recomiendo que uses una de estas dos opciones: Virtualenvwrapper + Pyenv + Poetry Docker Para la opci\u00f3n 1 ve a Entornos Virtuales La opci\u00f3n 2 la comentar\u00e9 en el futuro.","title":"Entorno de Desarrollo"},{"location":"sw/coding/python/python/#dependencias-de-desarrollo","text":"Yo uso: flake8 como linter de Python. mypy como linter de tipado. black para el formateado de c\u00f3digo. SonarLint sonarlint lo uso a trav\u00e9s de la extensi\u00f3n de VSCode, y es un linter que te avisa sobre smells y buenas pr\u00e1cticas. Es un plus para la seguiridad de tu c\u00f3digo.","title":"Dependencias de desarrollo"},{"location":"sw/coding/python/python/#ide","text":"VSCode Instalar las extensiones: Python python snippets Python Type Hint SonarLint Test Adapter Converter Habilitar el linting en VSCode as\u00ed como los linters .vscode/json { \"python.linting.enabled\" : true , \"python.linting.flake8Enabled\" : true , \"python.linting.mypyEnabled\" : true , }","title":"IDE"},{"location":"sw/web/backend/django/avanzado/","text":"Django Avanzado \u00b6 Incluir una plantilla html en todas las plantillas de la app \u00b6 Si quieres que en todas las plantillas de la app aparezca cierto c\u00f3digo html com\u00fan, debes de: Crear el directorio <proyecto>/<app>/templates/includes . Dentro de includes crear tu plantilla html com\u00fan para los dem\u00e1s. En cada plantilla html de tu app, en el dentro de tu {% block content %} , a\u00f1adirla con {% include '<app>/includes/<template>.html' %} Definir estructuras en los urlspattern \u00b6 Suponte que tienes varias apps, donde hay una vista que se llama igual, por ejemplo create . En el urls.py le tienes puesto name=<app>_create para que no coincidan. Para no tener que hacer eso, se puede usar una reestructura de los urlpatterns. <app>/urls.py -> Le pones el nombre que quieras al urlpatterns , pero ahora en vez de ser una lista como antes, va a ser una tupla, que tiene en su primer miembro el urlpatterns , y en el segundo un nombre de referencia. Ahora puedes asignar nombres gen\u00e9ricos en el urlpatterns , como es el caso de create que lo vas a usar en m\u00e1s urls.py de otras apps. from django.urls import path from .views import PageListView , PageDetailView , PageCreate pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreate . as_view (), name = 'create' ), ], 'pages' ) <proyecto>/<proyecto>/urls.py -> Importa tu urlpatterns tuneado (en este caso pages_urlpatterns ), y lo incluyes directamente en la funci\u00f3n include() . from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), ] <..>/template/<..> -> Lo \u00fanico que te falta es que ahora, en todas las templates que lo enlazas con {% urls '<vista>' ... %} debes de poner {% urls '<urls de donde vengo>:<vista>' ... %} . En este ejemplo ser\u00eda: {% urls 'pages:pages' ... %} Cuando es un template fuera de la app, que enlaza desde el urls.py del proyecto a la app. {% urls 'pages:create' ... %} Cuando es un template dentro de la app, que enlaza desde el urls.py de la propia app. Vistas Basadas en Clases \u00b6 En el views.py importo el modelo que quiera, por ejemplo TemplateView . Hago que hereden de mi modelo, defino su template, y modifico el contexto con la funci\u00f3n get_context_data() . from django.views.generic.base import TemplateView class HomePageView ( TemplateView ): template_name = 'core/home.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'title' ] = 'Mi chachi web' return context class SamplePageView ( TemplateView ): template_name = 'core/sample.html' En el urls.py importo las vistas y las llamo con la funci\u00f3n as_view() . from django.urls import path from .views import HomePageView , SamplePageView urlpatterns = [ path ( '' , HomePageView . as_view (), name = \"home\" ), path ( 'sample/' , SamplePageView . as_view (), name = \"sample\" ), ] Si la modificaci\u00f3n en el contexto es poca, podr\u00eda hacer en el views.py from django.views.generic.base import TemplateView from django.shortcuts import render class HomePageView ( TemplateView ): template_name = 'core/home.html' def get ( self , request , * args , ** kwargs ): context = { 'title' : 'Mi chachi web' } return render ( request , self . template_name , context ) ListView \u00b6 Cuando tenemos un modelo, y queremos ver listados varios objetos, una buena opci\u00f3n es usar una ListView . Si solo quisieramos ver uno en detalle, deber\u00edas de optar por DetailView . views.py -> Tendremos que importar ListView , dentro de la clase definirle que modelo de la bbdd vamos a usar. from django.views.generic.list import ListView from .models import Page # Create your views here. class PageListView ( ListView ): model = Page urls.py -> Modificar las urls from django.urls import path from .views import PageListView urlpatterns = [ path ( '' , PageListView . as_view (), name = 'pages' ), ] templates/<app>/<modelo>_list.html -> Veremos que si arrancamos el server da un error, y es porque esta vista usa un template llamado <modelo>_list.html . As\u00ed que en nuestra carpeta de templates, deberemos de llamar as\u00ed a su template html. Adem\u00e1s, donde tengamos el for para mostrar todos los elementos, debemos de usar el objeto object o el nombre del modelo (en este caso page ) # Este ser\u00eda el gen\u00e9rico {% for page in object_list %} # Este ser\u00eda m\u00e1s espec\u00edfico, pero para el caso es igual {% for page in page_list %} Paginaci\u00f3n \u00b6 En las ListView puedes mostrar solo cierto n\u00famero de objetos en lugar de todo a la vez, y poner un \u00edndice t\u00edpico de <- Anterior 1 , 2, ... Siguiente -> <app>/views.py -> Donde tengas la ListView tienes que a\u00f1adirle el campo paginated_by y ponerle un n\u00famero. Por ejemplo, paginated_by = 3 son 3 elementos por p\u00e1gina. from django.views.generic.list import ListView from registration.models import Profile # Create your views here. class ProfileListView ( ListView ): model = Profile template_name = 'profiles/profile_list.html' paginate_by = 3 <app>/templates/<app>/<template_name> -> En el template tienes que hacerle el men\u00fa para navegar entre p\u00e1ginas. En el ejemplo se adjunta uno hecho con bootstrap. <!-- Men\u00fa de paginaci\u00f3n --> {% if is_paginated %} < nav aria-label = \"Page navigation\" > < ul class = \"pagination justify-content-center\" > {% if page_obj.has_previous %} < li class = \"page-item \" > < a class = \"page-link\" href = \"?page={{ page_obj.previous_page_number }}\" > &laquo; </ a > </ li > {% else %} < li class = \"page-item disabled\" > < a class = \"page-link\" href = \"#\" tabindex = \"-1\" > &laquo; </ a > </ li > {% endif %} {% for i in paginator.page_range %} < li class = \"page-item {% if page_obj.number == i %}active{% endif %}\" > < a class = \"page-link\" href = \"?page={{ i }}\" > {{ i }} </ a > </ li > {% endfor %} {% if page_obj.has_next %} < li class = \"page-item \" > < a class = \"page-link\" href = \"?page={{ page_obj.next_page_number }}\" > &raquo; </ a > </ li > {% else %} < li class = \"page-item disabled\" > < a class = \"page-link\" href = \"#\" tabindex = \"-1\" > &raquo; </ a > </ li > {% endif %} </ ul > </ nav > {% endif %} En este ejemplo te saldr\u00e1 un warning diciendo que no est\u00e1n ordenados. Para que no salga, te vas al models.py de la app donde usas ese modelo de la ListView , le creas una clase Meta y le pones el atributo ordering indicandole en una lista porque que campos los ordenas. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = custom_upload_to , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) class Meta : ordering = [ 'user__username' ] DetailView \u00b6 Para ver en detalle un \u00fanico elemento de la bbdd, se suele usar DetailView views.py -> Importar DetailView , as\u00ed como el objeto del modelo de la bbdd y definirlo dentro de la clase. from django.views.generic.list import ListView from django.views.generic.detail import DetailView from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page urls.py -> Ojo en el pattern, que usa pk como \u00edndice. from django.urls import path from .views import PageListView , PageDetailView urlpatterns = [ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), ] template/<app>/<modelo>_detail.html -> DetailView usa un template html llamado <modelo>_detail.html , as\u00ed que debemos nombrar as\u00ed al nuestro para que lo lea. De nuevo, tenemos que usar object dentro del template o el nombre del modelo ( page en este caso). Vistas CRUD \u00b6 Son un tipo de vistas basadas en clases, que est\u00e1n pensadas para interactuar con la bbdd. Create Read Update Delete CreateView - Vista CRUD \u00b6 Sirve para poder crear una p\u00e1gina donde un admin pueda editar / crear un objeto de la bbdd. views.py -> Importa CreateView , a\u00f1ade el modelo de la bbdd as\u00ed como los campos a editar. El campo sucess_url es la vista que se pondr\u00e1 cuando hayas completado el formulario from django.shortcuts import render , get_object_or_404 , get_list_or_404 from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView from django.urls import reverse_lazy from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page class PageCreate ( CreateView ): model = Page fields = [ 'title' , 'content' , 'order' ] success_url = reverse_lazy ( 'pages:pages' ) urls.py -> Importa la vista. from django.urls import path from .views import PageListView , PageDetailView , PageCreate pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreate . as_view (), name = 'create' ), ], 'pages' ) template/<app>/<modelo>_form.html -> CreateView usa una plantilla llamada <modelo>_form.html , as\u00ed que debes de renombrar as\u00ed la tuya. UpdateView - Vista CRUD \u00b6 Es muy parecida a la anterior, pero ahora lo que vas a hacer es actualizar en lugar de crear. views.py -> La importas y solo necesitas pasarle 3 atributos, el modelo, los campos y por \u00faltimo el template_name_suffix . Con este campo se le indica que archivo tiene que leer cuando se ejecute (por defecto se pone _update_form ). Para que devuelva una p\u00e1gina al ser actualizado, habr\u00eda que usar como antes el atributo succes_url . Si quieres que vuelva al mismo sitio (como en el ejemplo), sobreescribes la funci\u00f3n get_success_url y devuelves el mismo objeto (si le a\u00f1ades alg\u00fan par\u00e1metro, luego en el template puedes hacer que le indique al usuario que la actualizaci\u00f3n ha sido correcta). from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , UpdateView from django.urls import reverse_lazy from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page class PageCreateView ( CreateView ): model = Page fields = [ 'title' , 'content' , 'order' ] success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( UpdateView ): model = Page fields = [ 'title' , 'content' , 'order' ] template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' urls.py -> Debes de pasarle un pk para poder saber cual objeto editar. from django.urls import path from .views import PageListView , PageDetailView , PageCreateView , PageUpdateView pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreateView . as_view (), name = 'create' ), path ( 'update/<int:pk>/' , PageUpdateView . as_view (), name = 'update' ), ], 'pages' ) template/<app>/<modelo>_update_form -> Por \u00faltimo, el template que usa esta vista es <modelo>_update_form , que se lo has definido en el views.py . DeleteView - Vista CRUD \u00b6 Vista para borrar un objeto. views.py -> Importar la clase DeleteView y pasarle el modelo as\u00ed como la url para cuando el borrado se haya completado. from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page class PageCreateView ( CreateView ): model = Page fields = [ 'title' , 'content' , 'order' ] success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( UpdateView ): model = Page fields = [ 'title' , 'content' , 'order' ] template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' class PageDeleteView ( DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' ) urls.py -> Tienes que pasarle un pk o un slug para borrar el elemento. from django.urls import path from .views import PageListView , PageDetailView , PageCreateView , \\ PageUpdateView , PageDeleteView pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreateView . as_view (), name = 'create' ), path ( 'update/<int:pk>/' , PageUpdateView . as_view (), name = 'update' ), path ( 'delete/<int:pk>/' , PageDeleteView . as_view (), name = 'delete' ), ], 'pages' ) template/<app>/<modelo>_confirm_delete.html -> Por \u00faltimo tienes que crear el formulario de borrado en una template que se llame <modelo>_confirm_delete.html Formularios para Modelos \u00b6 Dentro de tu app, creas un fichero llamado forms.py e importas from django import forms , para crear la estructura de los campos. Al enlazarle un modelo al formulario, este se genera autom\u00e1ticamente. forms.py -> Importas el m\u00f3dulo forms y usas su clase ModelForm . Ahora debes de crear una clase Meta dentro, con el modelo y los campos. Con el atributo widgets le indicas que tipo de elemento html va a ser y dentro le pones los css que va a usar con el attrs y su diccionario. Con labels puedes cambiarle el texto del t\u00edtulo del campo, quit\u00e1ndolo (como en el ejemplo) o poni\u00e9ndole otro. from django import forms from .models import Page class PageForm ( forms . ModelForm ): class Meta : model = Page fields = [ 'title' , 'content' , 'order' ] widgets = { 'title' : forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'T\u00edtulo' }), 'content' : forms . Textarea ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Contenido' }), 'order' : forms . NumberInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Orden' }) } labels = { 'title' : '' , 'content' : '' , 'order' : '' } views.py -> Importas el formulario y lo metes dentro de su vista. Ahora el campo fields no es necesario porque va en el formulario. from django.views.generic.edit import CreateView , UpdateView from django.urls import reverse_lazy from .models import Page from .forms import PageForm class PageCreateView ( CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' ckeditor adaptativo \u00b6 Para a\u00f1adir y hacer adaptativo el ckeditor tienes que hacer lo siguiente: <app>/static/<app>/css/custom_ckeditor.css -> Creas un fichero css donde editas los estilos del ckeditor. . django-ckeditor-widget , . cke_editor_id_content { width : 100 % !important ; max-width : 821 px !important ; } En el template que uses com\u00fan para todos los dem\u00e1s templates, importalo y a\u00f1ade el link al css donde lo has a tuneado. {% load static %} < script type = \"text/javascript\" src = \"{% static \" ckeditor / ckeditor-init . js \" %}\" ></ script > < script type = \"text/javascript\" src = \"{% static \" ckeditor / ckeditor / ckeditor . js \" %}\" ></ script > < link href = \"{% static 'pages/css/custom_ckeditor.css' %}\" rel = \"stylesheet\" > Usuarios registrados \u00b6 Es probable que muchos de los formularios solo quieras que los puedan usar usuarios admin o registrados. Siempre que no seas un usuario loggeado, Django te detecta como usuario an\u00f3nimo, AnonymousUser . views.py -> Para que en tu vista puedas detectar si el usuario est\u00e1 logeado, debes de reescribir el m\u00e9todo dispatch de la clase. En \u00e9l miras si el usuario est\u00e1 dentro del staff, y si no, lo rediriges donde quieras (por ejemplo, al login del admin). from django.views.generic.edit import CreateView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect # Create your views here. class PageCreateView ( CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) def dispatch ( self , request , * args , ** kwargs ): if not request . user . is_staff : return redirect ( reverse_lazy ( 'admin:login' )) return super ( PageCreateView , self ) . dispatch ( request , * args , ** kwargs ) Usuarios registrados - Mixins Manual \u00b6 Si quieres que esa reedireci\u00f3n de antes se use en m\u00e1s vistas, no hace falta que copias ese m\u00e9todo en cada vista. Existe un mecanismo llamado Mixin que permite escribirlo una vez y usarlo en todas. views.py -> Creas una clase, que herede de object (en Python 3, por defecto, todas las clases heredan de object ) y le pones el m\u00e9todo dispatch de antes. Luego en cada vista haces que herede primero de esta nueva clase y luego de su modelo de vista. from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect # Create your views here. class StaffRequiredMixin (): def dispatch ( self , request , * args , ** kwargs ): if not request . user . is_staff : return redirect ( reverse_lazy ( 'admin:login' )) return super ( StaffRequiredMixin , self ) . dispatch ( request , * args , ** kwargs ) class PageCreateView ( StaffRequiredMixin , CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( StaffRequiredMixin , UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' class PageDeleteView ( StaffRequiredMixin , DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' ) Usuarios registrados - Mixins Decorado \u00b6 El punto anterior ya se ha automatizado en Django usando decoradores. views.py -> Tienes que importar por un lado el method_decorator , que permite usar decoradores de Django, y por otro el decorador staff_member_required . Ahora en el m\u00e9todo dispatch puedes quitar el if con la redirecci\u00f3n, ya que se va a hacer sola. Ahora en la url al entrar, incluso te dir\u00e1 donde debe de ir despues de loguearse. from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect from django.utils.decorators import method_decorator from django.contrib.admin.views.decorators import staff_member_required # Create your views here. class StaffRequiredMixin (): @method_decorator ( staff_member_required ) def dispatch ( self , request , * args , ** kwargs ): return super ( StaffRequiredMixin , self ) . dispatch ( request , * args , ** kwargs ) class PageCreateView ( StaffRequiredMixin , CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( StaffRequiredMixin , UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' class PageDeleteView ( StaffRequiredMixin , DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' ) Pero tener una clase solo para eso no tiene sentido, as\u00ed que se puede usar el decorador en las propias vistas usando el method_decorator y pas\u00e1ndole el decorador, as\u00ed como el m\u00e9todo a decorar from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect from django.utils.decorators import method_decorator from django.contrib.admin.views.decorators import staff_member_required # Create your views here. @method_decorator ( staff_member_required , name = \"dispatch\" ) class PageCreateView ( CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) @method_decorator ( staff_member_required , name = \"dispatch\" ) class PageUpdateView ( UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' @method_decorator ( staff_member_required , name = \"dispatch\" ) class PageDeleteView ( DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' ) Existen 2 decoradores m\u00e1s que son interesantes: login_required y permission_required . Auth Views \u00b6 Django tiene vistas de autenticaci\u00f3n ya creadas: login, logout, ... No hace falta crearlas, \u00e9l las genera. <proyecto>/<proyecto>/urls.py -> Generar las urls para las vistas desde accounts . from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), # Paths de Auth path ( 'accounts/' , include ( 'django.contrib.auth.urls' )), ] Si abres la url accounts te dice todos las urls que hay, como accounts/login . LoginView \u00b6 Si abres accounts/login da error de template. Busca el template <app>/login.html , as\u00ed que hay que crearlo. <app>/templates/<app>/login.html settings.py -> En el settings del proyecto tendremos que a\u00f1adir la app al principio de todo, ya que muchos formularios pueden estar con conflicto con otras aplicaciones. Tambi\u00e9n debemos de crear al final las redirecciones con la variable LOGIN_REDIRECT_URL donde se le indica donde ir al loguearse. # ... INSTALLED_APPS = [ 'registration.apps.RegistrationConfig' , 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'ckeditor' , 'core.apps.CoreConfig' , 'pages.apps.PagesConfig' , ] # ... # Auth redirects LOGIN_REDIRECT_URL = 'home' Luego en el template donde lo vayas a usar simplemente usa {% url 'login' %} LogoutView \u00b6 Es parecido al anterior. En este caso solo tienes que definir la variable LOGOUT_REDIRECT_URL en el settings # Auth redirects LOGIN_REDIRECT_URL = 'pages:pages' LOGOUT_REDIRECT_URL = 'home' Y luego en alg\u00fan template puedes enlazar la acci\u00f3n con {% url 'logout' %} < ul class = \"navbar-nav\" > {% if not request.user.is_authenticated %} < li class = \"nav-item\" > < a class = \"nav-link\" href = \"{% url 'login' %}\" > Acceder </ a > </ li > {% else %} < li class = \"nav-item\" > < a class = \"nav-link\" href = \"{% url 'logout' %}\" > Salir </ a > </ li > {% endif %} </ ul > Registro de Usuario \u00b6 Se suele hacer en una app aparte ( registration por ejemplo). <app>/views.py -> Importa el formulario de creaci\u00f3n de usuario UserCreationForm y una vista gen\u00e9rica de creaci\u00f3n como CreateView . Dentro de esta se le pasa el formulario en el atributo form_class as\u00ed como su template. Tambi\u00e9n debes de devolver la redirecci\u00f3n con alg\u00fan par\u00e1metro que permita saber que todo ha ido correcto. from django.contrib.auth.forms import UserCreationForm from django.views.generic import CreateView from django.urls import reverse_lazy # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationForm template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' <app>/urls.py from django.urls import path , include from .views import SignUpView urlpatterns = [ path ( 'signup/' , SignUpView . as_view (), name = 'signup' ), ] <proyecto>/urls.py from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), # Paths de Auth path ( 'accounts/' , include ( 'django.contrib.auth.urls' )), path ( 'accounts/' , include ( 'registration.urls' )), ] <app>/templates/<app>/<template_name> -> Es un formulario normal y corriente. {% extends 'core/base.html' %} {% load static %} {% block title %}Registro{% endblock %} {% block content %} < style >. errorlist { color : red ;}</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" > {% csrf_token %} < h3 class = \"mb-4\" > Registro </ h3 > {{form.as_p}} < p >< input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Confirmar\" ></ p > </ form > </ div > </ div > </ div > </ main > {% endblock %} <app>/templates/<app>/<success_url> -> Para poder ver si te ha ido bien podr\u00edas a\u00f1adir {% if 'register' in request.GET %} < p style = \"color:green;\" > Usuario registrado correctamente, ya puedes loguearte. </ p > {% endif %} Customizar el registro \u00b6 Para customizar el formulario de registro debes de trastearlo en tiempo de ejecuci\u00f3n para no perder el que ya hay hecho. <app>/views.py -> Tienes que sobreescribir el m\u00e9todo get_form() , modificando sus campos, que son: username , password1 y password2 . from django.contrib.auth.forms import UserCreationForm from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationForm template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form <app>/templates/<app>/<template_name> -> Si quieres quitar todos los labels , lo puedes hacer desde el fichero anterior o simplemente en tu template pones < style > label { display : none }</ style > A\u00f1adir email como requisito \u00b6 Para que a\u00f1adas un email al registro lo mejor es extender el formulario ya existente en Django. <app>/forms.py -> Crea este fichero para extender el formulario. A\u00f1ades el atributo email . En la clase Meta a\u00f1ades el atributo. con el m\u00e9todo clean_<field> haces una validaci\u00f3n, en este caso clean_email lo haces para que el email sea \u00fanico para cada usuario (no puede haber dos usuarios con el mismo email) Si el email no existe, puede registrarse, sino, lanza un error de validaci\u00f3n. from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User class UserCreationFormWithEmail ( UserCreationForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) def clean_email ( self ): email = self . cleaned_data [ 'email' ] if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email <app>/views.py -> Cambiar el formulario anterior por el nuevo extendido, as\u00ed como las modificaciones de su campo. from .forms import UserCreationFormWithEmail from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form Recuperar contrase\u00f1a \u00b6 Existen diferentes opciones, pero una t\u00edpica es tener un servidor de correo SMTP que manda email con el link para el proceso de recuperaci\u00f3n de contrase\u00f1a. Aqu\u00ed vas a hacer un truco para debug, que es tener un fichero local donde almacenas las credenciales. <proyecto>/settings.py -> A\u00f1ades lo siguiente al final. Con EMAIL_BACKEND le estas diciendo que use un backend de ficheros de prueba para el email. Con EMAIL_FILE_PATH le indicas donde guardar ese fichero. # Email if DEBUG : EMAIL_BACKEND = \"django.core.mail.backends.filebased.EmailBackend\" EMAIL_FILE_PATH = os . path . join ( BASE_DIR , 'sent_emails' ) else : # Configuraci\u00f3n del servidor de correo SMTP real de producci\u00f3n pass Ahora te va a tocar sobreescribir los 4 templates que Django usa para recuperar la contrase\u00f1a, ya que los que \u00e9l ofrece son de forma admin, y tu quieres verlo como un usuario que ve el frontend. Los templates que debes crear son: password_reset_form.html -> Pedir nueva contrase\u00f1a. password_reset_done.html -> Email con instrucciones enviado. password_reset_confirm.html -> Definir nueva contrase\u00f1a. password_reset_complete.html -> Contrase\u00f1a cambiada. Por \u00faltimo, en el template login deber\u00edas de a\u00f1adir la t\u00edpica l\u00ednea para si has olvidado la contrase\u00f1a < p > < a href = \"{% url 'password_reset' %}\" > He olvidado mi contrase\u00f1a </ a > </ p > Para ver todos los templates de Django para cuentas puedes verlo en Perfil de Usuario \u00b6 Crear perfil \u00b6 <app>/models.py -> Creamos un modelo Profile , que tiene que tener una relaci\u00f3n 1-1 con un usuario, una foto, biograf\u00eda, web. from django.db import models from django.contrib.auth.models import User # Create your models here. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = 'profiles' , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) settings.py -> Hay que despachar los ficheros media del avatar y no tocar la redirecci\u00f3n del login. # Auth redirects #LOGIN_REDIRECT_URL = 'pages:pages' LOGOUT_REDIRECT_URL = 'home' # Media Files MEDIA_URL = '/media/' MEDIA_ROOT = os . path . join ( BASE_DIR , 'media' ) urls.py -> A\u00f1adir al urlpatterns del proyecto donde se despachan los ficheros media. from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns from django.conf import settings urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), # Paths de Auth path ( 'accounts/' , include ( 'django.contrib.auth.urls' )), path ( 'accounts/' , include ( 'registration.urls' )), ] if settings . DEBUG : from django.conf.urls.static import static urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) <app>/views.py -> Crear su vista, con el decorador login_required para cuando est\u00e9s logueado. from .forms import UserCreationFormWithEmail from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms from django.views.generic.base import TemplateView from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( TemplateView ): template_name = 'registration/profile_form.html' <app>/templates/<app>/<template_name> -> Crear su template. {% extends 'core/base.html' %} {% load static %} {% block title %}Perfil{% endblock %} {% block content %} < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3 mb-5\" > < div class = \"col-md-9 mx-auto\" > < h3 > Perfil </ h3 > < form action = \"\" method = \"post\" > {% csrf_token %} {{ form.as_p }} < div class = \"text-center\" > < input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Actualizar\" /> </ div > </ form > </ div > </ div > </ div > </ main > {% endblock %} <app>/urls.py -> Redireccionarla en la urls. from django.urls import path , include from .views import SignUpView , ProfileUpdate urlpatterns = [ path ( 'signup/' , SignUpView . as_view (), name = 'signup' ), path ( 'profile/' , ProfileUpdate . as_view (), name = 'profile' ), ] core/templates/base.html -> A\u00f1adir un enlace. < li class = \"nav-item\" > < a class = \"nav-link\" href = \"{% url 'profile' %}\" > Perfil </ a > </ li > Por \u00faltimo hacemos las migraciones. python manage.py makemigrations <app> python manage.py migrate <app> Perfil editable \u00b6 <app>views.py -> Tienes que hacer que la vista herede de UpdateView (poni\u00e9ndole su modelo y que campos son editables). Para que no de error a la hora de editar, se debe sobreescribir el m\u00e9todo get_object , donde hay que obtener el usuario de la propia request para poder usarlo en la vista. Al obtener el usuario, si este no existe, la queryset puede petar, as\u00ed que por eso hay que usar get_or_create . from .forms import UserCreationFormWithEmail from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required from django.views.generic.edit import UpdateView from .models import Profile # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( UpdateView ): model = Profile fields = [ 'avatar' , 'bio' , 'link' ] success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_form.html' def get_object ( self ): # Obtener (o crear si no existe) el objeto a editar profile , created = Profile . objects . get_or_create ( user = self . request . user ) return profile En el template, para poder ver el url de la imagen del avatar tienes que usar esto en el formulario < form action = \"\" method = \"post\" enctype = \"multipart/form-data\" > {% csrf_token %} Customizando formulario de Perfil \u00b6 <app>/forms.py -> Debes de importar el modelo. Crear un formulario que herede de forms.ModelForm . Dentro crear su clase Meta con el modelo, los campos y sus widgets para modificarlos. from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User from .models import Profile class UserCreationFormWithEmail ( UserCreationForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) def clean_email ( self ): email = self . cleaned_data [ 'email' ] if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email class ProfileForm ( forms . ModelForm ): class Meta : model = Profile fields = [ 'avatar' , 'bio' , 'link' ] widgets = { 'avatar' : forms . ClearableFileInput ( attrs = { 'class' : 'form-control-file mt-3' }), 'bio' : forms . Textarea ( attrs = { 'class' : 'form-control mt-3' , 'rows' : 3 , 'placeholder' : 'Biografia' }), 'link' : forms . URLInput ( attrs = { 'class' : 'form-control mt-3' , 'placeholder' : 'Enlace' }), } <app>/views.py -> Importa el formulario nuevo y cambia el atributo model por el de form_class , poniendole el formulario. El campo fields ya no es necesario pues est\u00e1 en el formulario. from .forms import UserCreationFormWithEmail , ProfileForm # ... @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( UpdateView ): form_class = ProfileForm success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_form.html' def get_object ( self ): # Obtener (o crear si no existe) el objeto a editar profile , _ = Profile . objects . get_or_create ( user = self . request . user ) return profile <app>/templates/<app>/<template_name> -> Modifica el formulario a pelo a tu gusto. En este ejemplo se ha puesto una imagen por defecto no-avatar.jpg en <app>/static/<app>/img/no-avatar.jpg para cuando el usuario no tenga, o borre la imagen, aparezca esta. {% extends 'core/base.html' %} {% load static %} {% block title %}Perfil{% endblock %} {% block content %} < style >. errorlist { color : red ;} label { display : none }</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" enctype = \"multipart/form-data\" > {% csrf_token %} < div class = \"row\" > <!-- Previa del avatar --> < div class = \"col-md-2\" > {% if request.user.profile.avatar %} < img src = \"{{request.user.profile.avatar.url}}\" class = \"img-fluid\" > < p class = \"mt-1\" > \u00bfBorrar? < input type = \"checkbox\" id = \"avatar-clear\" name = \"avatar-clear\" /></ p > {% else %} < img src = \"{% static 'registration/img/no-avatar.jpg' %}\" class = \"img-fluid\" > {% endif %} </ div > <!-- Formulario --> < div class = \"col-md-10\" > < h3 > Perfil </ h3 > < input type = \"file\" name = \"avatar\" class = \"form-control-file mt-3\" id = \"id_avatar\" > {{ form.bio }} {{ form.link }} < input type = \"submit\" class = \"btn btn-primary btn-block mt-3\" value = \"Actualizar\" > </ div > </ div > </ form > </ div > </ div > </ div > </ main > {% endblock %} Email editable \u00b6 Como es solo un campo, y para no tener que destrozar los modelos de formularios y vistas que ya estamos usando, lo mejor es que hagas un formulario solo para este campo. <app>/templates/<app>/<template_perfil> -> A\u00f1ades un enlace para editar el email. <app>/forms.py -> Creas el nuevo formulario EmailForm bas\u00e1ndote en uno anterior. Ahora lo que vas a recuperar es un objeto que ya existe y que debe permitir cambiarlo si no existe el nuevo valor. from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User from .models import Profile class UserCreationFormWithEmail ( UserCreationForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) def clean_email ( self ): email = self . cleaned_data [ 'email' ] if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email class ProfileForm ( forms . ModelForm ): class Meta : model = Profile fields = [ 'avatar' , 'bio' , 'link' ] widgets = { 'avatar' : forms . ClearableFileInput ( attrs = { 'class' : 'form-control-file mt-3' }), 'bio' : forms . Textarea ( attrs = { 'class' : 'form-control mt-3' , 'rows' : 3 , 'placeholder' : 'Biografia' }), 'link' : forms . URLInput ( attrs = { 'class' : 'form-control mt-3' , 'placeholder' : 'Enlace' }), } class EmailForm ( forms . ModelForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = [ 'email' ] def clean_email ( self ): email = self . cleaned_data [ 'email' ] if 'email' in self . changed_data : if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email <app>/views.py -> Creas su vista EmailUpdate y lo obtienes (el email) de la propia request . from .forms import UserCreationFormWithEmail , ProfileForm , EmailForm from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required from django.views.generic.edit import UpdateView from .models import Profile # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( UpdateView ): form_class = ProfileForm success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_form.html' def get_object ( self ): # Obtener (o crear si no existe) el objeto a editar profile , _ = Profile . objects . get_or_create ( user = self . request . user ) return profile @method_decorator ( login_required , name = 'dispatch' ) class EmailUpdate ( UpdateView ): form_class = EmailForm success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_email_form.html' def get_object ( self ): # Obtener el objeto a editar return self . request . user <app>/urls.py -> Creas su endpoint / url asociada a su vista. from django.urls import path from .views import SignUpView , ProfileUpdate , EmailUpdate urlpatterns = [ path ( 'signup/' , SignUpView . as_view (), name = 'signup' ), path ( 'profile/' , ProfileUpdate . as_view (), name = 'profile' ), path ( 'profile/email/' , EmailUpdate . as_view (), name = 'profile_email' ), ] <app>/templates/<app>/template_name -> Por \u00faltimo creas la template. {% extends 'core/base.html' %} {% load static %} {% block title %}Email{% endblock %} {% block content %} < style >. errorlist { color : red ;} label { display : none }</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" > {% csrf_token %} < h3 class = \"mb-4\" > Email </ h3 > {{form.as_p}} < p >< input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Actualizar\" ></ p > </ form > </ div > </ div > </ div > </ main > {% endblock %} Contrase\u00f1a Editable \u00b6 Al igual que suced\u00eda anteriormente cuando quer\u00edas cambiar la contrase\u00f1a (Recuperar Contrase\u00f1a), Django tiene urls de Admin para editar la contrase\u00f1a. Tu vas a usar: password_change/ -> Vista con nombre password_change y template que usa un formulario password_change_form-html . password_change/done -> Vista con nombre password_change_done y template password_change_done.html . Solo tienes que crear estos dos templates <app>/templates/<app>/password_change_form.html {% extends 'core/base.html' %} {% load static %} {% block title %}Cambio de contrase\u00f1a{% endblock %} {% block content %} < style >. errorlist { color : red ;}</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" > {% csrf_token %} < h3 class = \"mb-4\" > Cambio de contrase\u00f1a </ h3 > < p > Por favor, introduzca su contrase\u00f1a antigua por seguridad, y despu\u00e9s introduzca dos veces la nueva contrase\u00f1a para verificar que la ha escrito correctamente. </ p > {{form.old_password.errors}} < p >< input type = \"password\" name = \"old_password\" autofocus = \"\" required = \"\" id = \"id_old_password\" class = \"form-control\" placeholder = \"Contrase\u00f1a antigua\" ></ p > {{form.new_password1.errors}} < p >< input type = \"password\" name = \"new_password1\" required = \"\" id = \"id_new_password1\" class = \"form-control\" placeholder = \"Contrase\u00f1a nueva\" ></ p > {{form.new_password2.errors}} < p >< input type = \"password\" name = \"new_password2\" required = \"\" id = \"id_new_password2\" class = \"form-control\" placeholder = \"Contrase\u00f1a nueva (confirmaci\u00f3n)\" ></ p > < p >< input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Cambiar mi contrase\u00f1a\" ></ p > </ form > </ div > </ div > </ div > </ main > {% endblock %} <app>/templates/<app>/password_change_done.html {% extends 'core/base.html' %} {% load static %} {% block title %}Contrase\u00f1a cambiada correctamente{% endblock %} {% block content %} < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < h3 class = \"mb-4\" > Contrase\u00f1a cambiada correctamente </ h3 > < p > Puedes volver a tu perfil haciendo clic < a href = \"{% url 'profile' %}\" > aqu\u00ed </ a > . </ p > </ div > </ div > </ div > </ main > {% endblock %} Optimizar guardado de avatar \u00b6 Si se guardan todas las im\u00e1genes a pelo de un usuario, esto es impracticable a la larga. Lo ideal es que cuando el usuario cargue una imagen nueva, borres la anterior y la sustituyas por la nueva. Para hacer esto tienes que: <app>/models.py -> En la app donde tengas la gesti\u00f3n del perfil, en el campo avatar le pasas al argumento upload_to una funci\u00f3n, en este caso custom_upload_to . A esa funci\u00f3n tienes que pasarle primero la instancia el perfil, y luego el nombre del fichero del nuevo avatar. Una vez dentro recuperas el perfil y borras su avatar. Por \u00faltimo devuelves el path con el nombre donde se va a guardar la nueva imagen. from django.db import models from django.contrib.auth.models import User from django.dispatch import receiver from django.db.models.signals import post_save def custom_upload_to ( instance , filename ): old_instance = Profile . objects . get ( pk = instance . pk ) old_instance . avatar . delete () return 'profiles/' + filename # Create your models here. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = custom_upload_to , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) @receiver ( post_save , sender = User ) def ensure_profile_exists ( sender , instance , ** kwargs ): if kwargs . get ( 'created' , False ): Profile . objects . get_or_create ( user = instance ) print ( 'Se acaba de crear un usuario y su perfil enlazado' ) Se\u00f1ales \u00b6 Una se\u00f1al es una funci\u00f3n que se ejecuta despu\u00e9s de que ocurra un evento. Por ejemplo, si quisieras saber cuando se ha creado un usuario correctamente, puedes hacer lo siguiente. <app>/models.py -> Creas la funci\u00f3n ensure_profile_exists . Importas el decorador receiver y tambi\u00e9n la se\u00f1al post_save . Decoras la funci\u00f3n indic\u00e1ndole el decorador, la se\u00f1al, y quien la env\u00eda (en este caso User ). De los kwargs compruebas si se acaba de crear el usuario y ya puedes operar con \u00e9l. from django.db import models from django.contrib.auth.models import User from django.dispatch import receiver from django.db.models.signals import post_save # Create your models here. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = 'profiles' , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) @receiver ( post_save , sender = User ) def ensure_profile_exists ( sender , instance , ** kwargs ): if kwargs . get ( 'created' , False ): Profile . objects . get_or_create ( user = instance ) print ( 'Se acaba de crear un usuario y su perfil enlazado' ) TDD \u00b6 Tests Simples \u00b6 Los tests de cada app se crean en <app>/test.py . Un ejemplo f\u00e1cil para que te quedes con la copla, ser\u00eda testear el ejemplo de la se\u00f1al. <app>/test.py -> Tienes que importar el modelo que vayas a testear, Profile , y en este caso vas a necesitar de User tambi\u00e9n. Creas una clase para pasar los tests de tu modelo. Con el m\u00e9todo setUp generas los datos que necesites para hacer los tests. Luego generas un m\u00e9todo por cada test y que siga el patr\u00f3n test_<cosa_a_probar> . En este caso pruebas que se haya creado un perfil despu\u00e9s de haber creado un usuario. En tu ejemplo obtienes el perfil que se acaba de crear por setUp y lanzas un assert si coincide. from django.test import TestCase from django.contrib.auth.models import User from .models import Profile # Create your tests here. class ProfileTestCase ( TestCase ): def setUp ( self ): User . objects . create_user ( 'test' , 'test@test.com' , 'test1234' ) def test_profile_exists ( self ): exists = Profile . objects . filter ( user__username = 'test' ) . exists () self . assertEqual ( exists , True ) Para que se ejecuten el test debes hacer # Testear todo python manage.py test # Testear la <app> python manage.py test <app> # Testear la <clase> de la <app> python manage.py test <app>.<clase> # Teastear el <m\u00e9todo> de la <clase> de la <app> python manage.py test <app>.<clase>.<m\u00e9todo> Cada vez que acaba de ejecutarse un m\u00e9todo se borra la bbdd temporal y vuelve a ejecutarse setUp y luego el siguiente m\u00e9todo. Ejemplo de Test con se\u00f1ales \u00b6 Suponte una app messenger con dos modelos: messenger/models.py -> Message tiene un usuario, contenido y fecha de creacion. Thread tiene usuarios, mensajes. from django.db import models from django.contrib.auth.models import User # Create your models here. class Message ( models . Model ): user = models . ForeignKey ( User , on_delete = models . CASCADE ) content = models . TextField () created = models . DateTimeField ( auto_now_add = True ) class Meta : ordering = [ 'created' ] class ThreadManager ( models . Manager ): def find ( self , user1 , user2 ): # self es lo mismo que Thread.objects.all() queryset = self . filter ( users = user1 ) . filter ( users = user2 ) if len ( queryset ): return queryset [ 0 ] def find_or_create ( self , user1 , user2 ): thread = self . find ( user1 , user2 ) if not thread : thread = Thread . objects . create () thread . users . add ( user1 , user2 ) return thread class Thread ( models . Model ): users = models . ManyToManyField ( User , related_name = 'threads' ) messages = models . ManyToManyField ( Message ) # Model Manager objects = ThreadManager () messenger/test.py -> Abajo tienes el c\u00f3digo, pero f\u00edjate en el m\u00e9todo test_add_message_from_user_not_in_thread . Quieres testear si un usuario que no est\u00e1 en un hilo, y el test falla. from django.test import TestCase from django.contrib.auth.models import User from .models import Message , Thread # Create your tests here. class ThreadTestCase ( TestCase ): def setUp ( self ): self . user1 = User . objects . create_user ( 'user1' , None , 'test1234' ) self . user2 = User . objects . create_user ( 'user2' , None , 'test1234' ) self . user3 = User . objects . create_user ( 'user3' , None , 'test1234' ) self . thread = Thread . objects . create () def test_add_to_thread ( self ): self . thread . users . add ( self . user1 , self . user2 ) self . assertEqual ( len ( self . thread . users . all ()), 2 ) def test_filter_thread_by_users ( self ): self . thread . users . add ( self . user1 , self . user2 ) threads = Thread . objects . filter ( users = self . user1 ) . \\ filter ( users = self . user2 ) self . assertEqual ( self . thread , threads [ 0 ]) def test_filter_non_existent_thread ( self ): threads = Thread . objects . filter ( users = self . user1 ) . \\ filter ( users = self . user2 ) self . assertEqual ( len ( threads ), 0 ) def test_add_message_to_thread ( self ): self . thread . users . add ( self . user1 , self . user2 ) message1 = Message . objects . create ( user = self . user1 , content = 'Jelou' ) message2 = Message . objects . create ( user = self . user2 , content = 'Hola' ) self . thread . messages . add ( message1 , message2 ) self . assertEqual ( len ( self . thread . messages . all ()), 2 ) for message in self . thread . messages . all (): print ( f ' { message . user } : { message . content } ' ) def test_add_message_from_user_not_in_thread ( self ): self . thread . users . add ( self . user1 , self . user2 ) message1 = Message . objects . create ( user = self . user1 , content = 'Jelou' ) message2 = Message . objects . create ( user = self . user2 , content = 'Hola' ) message3 = Message . objects . create ( user = self . user3 , content = 'Shurmanos' ) self . thread . messages . add ( message1 , message2 , message3 ) self . assertEqual ( len ( self . thread . messages . all ()), 2 ) def test_find_thread_with_custom_manager ( self ): self . thread . users . add ( self . user1 , self . user2 ) thread = Thread . objects . find ( self . user1 , self . user2 ) self . assertEqual ( self . thread , thread ) def test_find_or_create_thread_with_custom_manager ( self ): self . thread . users . add ( self . user1 , self . user2 ) thread = Thread . objects . find_or_create ( self . user1 , self . user2 ) self . assertEqual ( self . thread , thread ) thread = Thread . objects . find_or_create ( self . user1 , self . user3 ) self . assertIsNotNone ( self . thread , thread ) Para solucionar esto, la manera de hacerlo es capturar con una se\u00f1al cuando se va a introducir un mensaje a un hilo, y no hacerlo. Cuando se a\u00f1ade un elemento a la bbdd, saltan al menos dos eventos, pre_add y post_add . Te interesa captar el primero con una se\u00f1al y borrar lo que no vaya a ser guardado messenger/models.py -> Usa la se\u00f1al m2m_changed para captar cuando se va a introducir un elemento. Creas la funci\u00f3n messages_changed para manipular ese evento, con un bucle recorres todos elementos pk_set y los guardas en un conjunto a parte los que no quieres false_pk_set y eliminas del conjunto los elementos que no deben estar. Por \u00faltimo a m2m_changed le conectas la funci\u00f3n messages_changed y le pones como sender (emisor) el flujo/caudal de mensajes de los hilos, Thread.messages.through . from django.db import models from django.contrib.auth.models import User from django.db.models.signals import m2m_changed # Create your models here. class Message ( models . Model ): user = models . ForeignKey ( User , on_delete = models . CASCADE ) content = models . TextField () created = models . DateTimeField ( auto_now_add = True ) class Meta : ordering = [ 'created' ] class ThreadManager ( models . Manager ): def find ( self , user1 , user2 ): # self es lo mismo que Thread.objects.all() queryset = self . filter ( users = user1 ) . filter ( users = user2 ) if len ( queryset ): return queryset [ 0 ] def find_or_create ( self , user1 , user2 ): thread = self . find ( user1 , user2 ) if not thread : thread = Thread . objects . create () thread . users . add ( user1 , user2 ) return thread class Thread ( models . Model ): users = models . ManyToManyField ( User , related_name = 'threads' ) messages = models . ManyToManyField ( Message ) # Model Manager objects = ThreadManager () def messages_changed ( sender , ** kwargs ): instance = kwargs . pop ( 'instance' , None ) action = kwargs . pop ( 'action' , None ) pk_set = kwargs . pop ( 'pk_set' , None ) print ( f ' { instance } { action } { pk_set } ' ) # Busca los mensajes que no deben de estar en el hilo false_pk_set = set () if action == 'pre_add' : for msg_pk in pk_set : msg = Message . objects . get ( pk = msg_pk ) if msg . user not in instance . users . all (): print ( f ' { msg . user } no forma parte del hilo' ) false_pk_set . add ( msg_pk ) # Borra del hilo los mensajes que no deben de estar pk_set . difference_update ( false_pk_set ) m2m_changed . connect ( messages_changed , sender = Thread . messages . through ) Model Manager \u00b6 Para trabajar con bases de datos, Django tiene su propio ORM que llevas usando todo el rato. Cada vez que trabajas con un modelo, como con User , tienes atributos y m\u00e9todos ya definidos. Si quisieras extenderlos, lo que debes crear es un Model Manager. <app>/models.py -> En el models.py de tu app, debes de crear una clase que herede de from django.db import models from django.contrib.auth.models import User class ThreadManager ( models . Manager ): def find ( self , user1 , user2 ): # self es lo mismo que Thread.objects.all() queryset = self . filter ( users = user1 ) . filter ( users = user2 ) if len ( queryset ): return queryset [ 0 ] def find_or_create ( self , user1 , user2 ): thread = self . find ( user1 , user2 ) if not thread : thread = Thread . objects . create () thread . users . add ( user1 , user2 ) return thread class Thread ( models . Model ): users = models . ManyToManyField ( User , related_name = 'threads' ) messages = models . ManyToManyField ( Message ) # Model Manager objects = ThreadManager () JS - Peticiones as\u00edncronas \u00b6 TODO: Deploy \u00b6 TODO: recolectar los staticos con python manage.py collecstatic Customizar el Admin \u00b6 TODO:","title":"Avanzado"},{"location":"sw/web/backend/django/avanzado/#django-avanzado","text":"","title":"Django Avanzado"},{"location":"sw/web/backend/django/avanzado/#incluir-una-plantilla-html-en-todas-las-plantillas-de-la-app","text":"Si quieres que en todas las plantillas de la app aparezca cierto c\u00f3digo html com\u00fan, debes de: Crear el directorio <proyecto>/<app>/templates/includes . Dentro de includes crear tu plantilla html com\u00fan para los dem\u00e1s. En cada plantilla html de tu app, en el dentro de tu {% block content %} , a\u00f1adirla con {% include '<app>/includes/<template>.html' %}","title":"Incluir una plantilla html en todas las plantillas de la app"},{"location":"sw/web/backend/django/avanzado/#definir-estructuras-en-los-urlspattern","text":"Suponte que tienes varias apps, donde hay una vista que se llama igual, por ejemplo create . En el urls.py le tienes puesto name=<app>_create para que no coincidan. Para no tener que hacer eso, se puede usar una reestructura de los urlpatterns. <app>/urls.py -> Le pones el nombre que quieras al urlpatterns , pero ahora en vez de ser una lista como antes, va a ser una tupla, que tiene en su primer miembro el urlpatterns , y en el segundo un nombre de referencia. Ahora puedes asignar nombres gen\u00e9ricos en el urlpatterns , como es el caso de create que lo vas a usar en m\u00e1s urls.py de otras apps. from django.urls import path from .views import PageListView , PageDetailView , PageCreate pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreate . as_view (), name = 'create' ), ], 'pages' ) <proyecto>/<proyecto>/urls.py -> Importa tu urlpatterns tuneado (en este caso pages_urlpatterns ), y lo incluyes directamente en la funci\u00f3n include() . from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), ] <..>/template/<..> -> Lo \u00fanico que te falta es que ahora, en todas las templates que lo enlazas con {% urls '<vista>' ... %} debes de poner {% urls '<urls de donde vengo>:<vista>' ... %} . En este ejemplo ser\u00eda: {% urls 'pages:pages' ... %} Cuando es un template fuera de la app, que enlaza desde el urls.py del proyecto a la app. {% urls 'pages:create' ... %} Cuando es un template dentro de la app, que enlaza desde el urls.py de la propia app.","title":"Definir estructuras en los urlspattern"},{"location":"sw/web/backend/django/avanzado/#vistas-basadas-en-clases","text":"En el views.py importo el modelo que quiera, por ejemplo TemplateView . Hago que hereden de mi modelo, defino su template, y modifico el contexto con la funci\u00f3n get_context_data() . from django.views.generic.base import TemplateView class HomePageView ( TemplateView ): template_name = 'core/home.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'title' ] = 'Mi chachi web' return context class SamplePageView ( TemplateView ): template_name = 'core/sample.html' En el urls.py importo las vistas y las llamo con la funci\u00f3n as_view() . from django.urls import path from .views import HomePageView , SamplePageView urlpatterns = [ path ( '' , HomePageView . as_view (), name = \"home\" ), path ( 'sample/' , SamplePageView . as_view (), name = \"sample\" ), ] Si la modificaci\u00f3n en el contexto es poca, podr\u00eda hacer en el views.py from django.views.generic.base import TemplateView from django.shortcuts import render class HomePageView ( TemplateView ): template_name = 'core/home.html' def get ( self , request , * args , ** kwargs ): context = { 'title' : 'Mi chachi web' } return render ( request , self . template_name , context )","title":"Vistas Basadas en Clases"},{"location":"sw/web/backend/django/avanzado/#listview","text":"Cuando tenemos un modelo, y queremos ver listados varios objetos, una buena opci\u00f3n es usar una ListView . Si solo quisieramos ver uno en detalle, deber\u00edas de optar por DetailView . views.py -> Tendremos que importar ListView , dentro de la clase definirle que modelo de la bbdd vamos a usar. from django.views.generic.list import ListView from .models import Page # Create your views here. class PageListView ( ListView ): model = Page urls.py -> Modificar las urls from django.urls import path from .views import PageListView urlpatterns = [ path ( '' , PageListView . as_view (), name = 'pages' ), ] templates/<app>/<modelo>_list.html -> Veremos que si arrancamos el server da un error, y es porque esta vista usa un template llamado <modelo>_list.html . As\u00ed que en nuestra carpeta de templates, deberemos de llamar as\u00ed a su template html. Adem\u00e1s, donde tengamos el for para mostrar todos los elementos, debemos de usar el objeto object o el nombre del modelo (en este caso page ) # Este ser\u00eda el gen\u00e9rico {% for page in object_list %} # Este ser\u00eda m\u00e1s espec\u00edfico, pero para el caso es igual {% for page in page_list %}","title":"ListView"},{"location":"sw/web/backend/django/avanzado/#paginacion","text":"En las ListView puedes mostrar solo cierto n\u00famero de objetos en lugar de todo a la vez, y poner un \u00edndice t\u00edpico de <- Anterior 1 , 2, ... Siguiente -> <app>/views.py -> Donde tengas la ListView tienes que a\u00f1adirle el campo paginated_by y ponerle un n\u00famero. Por ejemplo, paginated_by = 3 son 3 elementos por p\u00e1gina. from django.views.generic.list import ListView from registration.models import Profile # Create your views here. class ProfileListView ( ListView ): model = Profile template_name = 'profiles/profile_list.html' paginate_by = 3 <app>/templates/<app>/<template_name> -> En el template tienes que hacerle el men\u00fa para navegar entre p\u00e1ginas. En el ejemplo se adjunta uno hecho con bootstrap. <!-- Men\u00fa de paginaci\u00f3n --> {% if is_paginated %} < nav aria-label = \"Page navigation\" > < ul class = \"pagination justify-content-center\" > {% if page_obj.has_previous %} < li class = \"page-item \" > < a class = \"page-link\" href = \"?page={{ page_obj.previous_page_number }}\" > &laquo; </ a > </ li > {% else %} < li class = \"page-item disabled\" > < a class = \"page-link\" href = \"#\" tabindex = \"-1\" > &laquo; </ a > </ li > {% endif %} {% for i in paginator.page_range %} < li class = \"page-item {% if page_obj.number == i %}active{% endif %}\" > < a class = \"page-link\" href = \"?page={{ i }}\" > {{ i }} </ a > </ li > {% endfor %} {% if page_obj.has_next %} < li class = \"page-item \" > < a class = \"page-link\" href = \"?page={{ page_obj.next_page_number }}\" > &raquo; </ a > </ li > {% else %} < li class = \"page-item disabled\" > < a class = \"page-link\" href = \"#\" tabindex = \"-1\" > &raquo; </ a > </ li > {% endif %} </ ul > </ nav > {% endif %} En este ejemplo te saldr\u00e1 un warning diciendo que no est\u00e1n ordenados. Para que no salga, te vas al models.py de la app donde usas ese modelo de la ListView , le creas una clase Meta y le pones el atributo ordering indicandole en una lista porque que campos los ordenas. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = custom_upload_to , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) class Meta : ordering = [ 'user__username' ]","title":"Paginaci\u00f3n"},{"location":"sw/web/backend/django/avanzado/#detailview","text":"Para ver en detalle un \u00fanico elemento de la bbdd, se suele usar DetailView views.py -> Importar DetailView , as\u00ed como el objeto del modelo de la bbdd y definirlo dentro de la clase. from django.views.generic.list import ListView from django.views.generic.detail import DetailView from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page urls.py -> Ojo en el pattern, que usa pk como \u00edndice. from django.urls import path from .views import PageListView , PageDetailView urlpatterns = [ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), ] template/<app>/<modelo>_detail.html -> DetailView usa un template html llamado <modelo>_detail.html , as\u00ed que debemos nombrar as\u00ed al nuestro para que lo lea. De nuevo, tenemos que usar object dentro del template o el nombre del modelo ( page en este caso).","title":"DetailView"},{"location":"sw/web/backend/django/avanzado/#vistas-crud","text":"Son un tipo de vistas basadas en clases, que est\u00e1n pensadas para interactuar con la bbdd. Create Read Update Delete","title":"Vistas CRUD"},{"location":"sw/web/backend/django/avanzado/#createview-vista-crud","text":"Sirve para poder crear una p\u00e1gina donde un admin pueda editar / crear un objeto de la bbdd. views.py -> Importa CreateView , a\u00f1ade el modelo de la bbdd as\u00ed como los campos a editar. El campo sucess_url es la vista que se pondr\u00e1 cuando hayas completado el formulario from django.shortcuts import render , get_object_or_404 , get_list_or_404 from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView from django.urls import reverse_lazy from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page class PageCreate ( CreateView ): model = Page fields = [ 'title' , 'content' , 'order' ] success_url = reverse_lazy ( 'pages:pages' ) urls.py -> Importa la vista. from django.urls import path from .views import PageListView , PageDetailView , PageCreate pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreate . as_view (), name = 'create' ), ], 'pages' ) template/<app>/<modelo>_form.html -> CreateView usa una plantilla llamada <modelo>_form.html , as\u00ed que debes de renombrar as\u00ed la tuya.","title":"CreateView - Vista CRUD"},{"location":"sw/web/backend/django/avanzado/#updateview-vista-crud","text":"Es muy parecida a la anterior, pero ahora lo que vas a hacer es actualizar en lugar de crear. views.py -> La importas y solo necesitas pasarle 3 atributos, el modelo, los campos y por \u00faltimo el template_name_suffix . Con este campo se le indica que archivo tiene que leer cuando se ejecute (por defecto se pone _update_form ). Para que devuelva una p\u00e1gina al ser actualizado, habr\u00eda que usar como antes el atributo succes_url . Si quieres que vuelva al mismo sitio (como en el ejemplo), sobreescribes la funci\u00f3n get_success_url y devuelves el mismo objeto (si le a\u00f1ades alg\u00fan par\u00e1metro, luego en el template puedes hacer que le indique al usuario que la actualizaci\u00f3n ha sido correcta). from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , UpdateView from django.urls import reverse_lazy from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page class PageCreateView ( CreateView ): model = Page fields = [ 'title' , 'content' , 'order' ] success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( UpdateView ): model = Page fields = [ 'title' , 'content' , 'order' ] template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' urls.py -> Debes de pasarle un pk para poder saber cual objeto editar. from django.urls import path from .views import PageListView , PageDetailView , PageCreateView , PageUpdateView pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreateView . as_view (), name = 'create' ), path ( 'update/<int:pk>/' , PageUpdateView . as_view (), name = 'update' ), ], 'pages' ) template/<app>/<modelo>_update_form -> Por \u00faltimo, el template que usa esta vista es <modelo>_update_form , que se lo has definido en el views.py .","title":"UpdateView - Vista CRUD"},{"location":"sw/web/backend/django/avanzado/#deleteview-vista-crud","text":"Vista para borrar un objeto. views.py -> Importar la clase DeleteView y pasarle el modelo as\u00ed como la url para cuando el borrado se haya completado. from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page # Create your views here. class PageListView ( ListView ): model = Page class PageDetailView ( DetailView ): model = Page class PageCreateView ( CreateView ): model = Page fields = [ 'title' , 'content' , 'order' ] success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( UpdateView ): model = Page fields = [ 'title' , 'content' , 'order' ] template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' class PageDeleteView ( DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' ) urls.py -> Tienes que pasarle un pk o un slug para borrar el elemento. from django.urls import path from .views import PageListView , PageDetailView , PageCreateView , \\ PageUpdateView , PageDeleteView pages_patterns = ([ path ( '' , PageListView . as_view (), name = 'pages' ), path ( '<int:pk>/<slug:slug>/' , PageDetailView . as_view (), name = 'page' ), path ( 'create/' , PageCreateView . as_view (), name = 'create' ), path ( 'update/<int:pk>/' , PageUpdateView . as_view (), name = 'update' ), path ( 'delete/<int:pk>/' , PageDeleteView . as_view (), name = 'delete' ), ], 'pages' ) template/<app>/<modelo>_confirm_delete.html -> Por \u00faltimo tienes que crear el formulario de borrado en una template que se llame <modelo>_confirm_delete.html","title":"DeleteView - Vista CRUD"},{"location":"sw/web/backend/django/avanzado/#formularios-para-modelos","text":"Dentro de tu app, creas un fichero llamado forms.py e importas from django import forms , para crear la estructura de los campos. Al enlazarle un modelo al formulario, este se genera autom\u00e1ticamente. forms.py -> Importas el m\u00f3dulo forms y usas su clase ModelForm . Ahora debes de crear una clase Meta dentro, con el modelo y los campos. Con el atributo widgets le indicas que tipo de elemento html va a ser y dentro le pones los css que va a usar con el attrs y su diccionario. Con labels puedes cambiarle el texto del t\u00edtulo del campo, quit\u00e1ndolo (como en el ejemplo) o poni\u00e9ndole otro. from django import forms from .models import Page class PageForm ( forms . ModelForm ): class Meta : model = Page fields = [ 'title' , 'content' , 'order' ] widgets = { 'title' : forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'T\u00edtulo' }), 'content' : forms . Textarea ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Contenido' }), 'order' : forms . NumberInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Orden' }) } labels = { 'title' : '' , 'content' : '' , 'order' : '' } views.py -> Importas el formulario y lo metes dentro de su vista. Ahora el campo fields no es necesario porque va en el formulario. from django.views.generic.edit import CreateView , UpdateView from django.urls import reverse_lazy from .models import Page from .forms import PageForm class PageCreateView ( CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok'","title":"Formularios para Modelos"},{"location":"sw/web/backend/django/avanzado/#ckeditor-adaptativo","text":"Para a\u00f1adir y hacer adaptativo el ckeditor tienes que hacer lo siguiente: <app>/static/<app>/css/custom_ckeditor.css -> Creas un fichero css donde editas los estilos del ckeditor. . django-ckeditor-widget , . cke_editor_id_content { width : 100 % !important ; max-width : 821 px !important ; } En el template que uses com\u00fan para todos los dem\u00e1s templates, importalo y a\u00f1ade el link al css donde lo has a tuneado. {% load static %} < script type = \"text/javascript\" src = \"{% static \" ckeditor / ckeditor-init . js \" %}\" ></ script > < script type = \"text/javascript\" src = \"{% static \" ckeditor / ckeditor / ckeditor . js \" %}\" ></ script > < link href = \"{% static 'pages/css/custom_ckeditor.css' %}\" rel = \"stylesheet\" >","title":"ckeditor adaptativo"},{"location":"sw/web/backend/django/avanzado/#usuarios-registrados","text":"Es probable que muchos de los formularios solo quieras que los puedan usar usuarios admin o registrados. Siempre que no seas un usuario loggeado, Django te detecta como usuario an\u00f3nimo, AnonymousUser . views.py -> Para que en tu vista puedas detectar si el usuario est\u00e1 logeado, debes de reescribir el m\u00e9todo dispatch de la clase. En \u00e9l miras si el usuario est\u00e1 dentro del staff, y si no, lo rediriges donde quieras (por ejemplo, al login del admin). from django.views.generic.edit import CreateView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect # Create your views here. class PageCreateView ( CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) def dispatch ( self , request , * args , ** kwargs ): if not request . user . is_staff : return redirect ( reverse_lazy ( 'admin:login' )) return super ( PageCreateView , self ) . dispatch ( request , * args , ** kwargs )","title":"Usuarios registrados"},{"location":"sw/web/backend/django/avanzado/#usuarios-registrados-mixins-manual","text":"Si quieres que esa reedireci\u00f3n de antes se use en m\u00e1s vistas, no hace falta que copias ese m\u00e9todo en cada vista. Existe un mecanismo llamado Mixin que permite escribirlo una vez y usarlo en todas. views.py -> Creas una clase, que herede de object (en Python 3, por defecto, todas las clases heredan de object ) y le pones el m\u00e9todo dispatch de antes. Luego en cada vista haces que herede primero de esta nueva clase y luego de su modelo de vista. from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect # Create your views here. class StaffRequiredMixin (): def dispatch ( self , request , * args , ** kwargs ): if not request . user . is_staff : return redirect ( reverse_lazy ( 'admin:login' )) return super ( StaffRequiredMixin , self ) . dispatch ( request , * args , ** kwargs ) class PageCreateView ( StaffRequiredMixin , CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( StaffRequiredMixin , UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' class PageDeleteView ( StaffRequiredMixin , DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' )","title":"Usuarios registrados - Mixins Manual"},{"location":"sw/web/backend/django/avanzado/#usuarios-registrados-mixins-decorado","text":"El punto anterior ya se ha automatizado en Django usando decoradores. views.py -> Tienes que importar por un lado el method_decorator , que permite usar decoradores de Django, y por otro el decorador staff_member_required . Ahora en el m\u00e9todo dispatch puedes quitar el if con la redirecci\u00f3n, ya que se va a hacer sola. Ahora en la url al entrar, incluso te dir\u00e1 donde debe de ir despues de loguearse. from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect from django.utils.decorators import method_decorator from django.contrib.admin.views.decorators import staff_member_required # Create your views here. class StaffRequiredMixin (): @method_decorator ( staff_member_required ) def dispatch ( self , request , * args , ** kwargs ): return super ( StaffRequiredMixin , self ) . dispatch ( request , * args , ** kwargs ) class PageCreateView ( StaffRequiredMixin , CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) class PageUpdateView ( StaffRequiredMixin , UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' class PageDeleteView ( StaffRequiredMixin , DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' ) Pero tener una clase solo para eso no tiene sentido, as\u00ed que se puede usar el decorador en las propias vistas usando el method_decorator y pas\u00e1ndole el decorador, as\u00ed como el m\u00e9todo a decorar from django.views.generic.edit import CreateView , UpdateView , DeleteView from django.urls import reverse_lazy from .models import Page from .forms import PageForm from django.shortcuts import redirect from django.utils.decorators import method_decorator from django.contrib.admin.views.decorators import staff_member_required # Create your views here. @method_decorator ( staff_member_required , name = \"dispatch\" ) class PageCreateView ( CreateView ): model = Page form_class = PageForm success_url = reverse_lazy ( 'pages:pages' ) @method_decorator ( staff_member_required , name = \"dispatch\" ) class PageUpdateView ( UpdateView ): model = Page form_class = PageForm template_name_suffix = '_update_form' def get_success_url ( self ): return reverse_lazy ( 'pages:update' , args = [ self . object . id ]) + '?ok' @method_decorator ( staff_member_required , name = \"dispatch\" ) class PageDeleteView ( DeleteView ): model = Page success_url = reverse_lazy ( 'pages:pages' ) Existen 2 decoradores m\u00e1s que son interesantes: login_required y permission_required .","title":"Usuarios registrados - Mixins Decorado"},{"location":"sw/web/backend/django/avanzado/#auth-views","text":"Django tiene vistas de autenticaci\u00f3n ya creadas: login, logout, ... No hace falta crearlas, \u00e9l las genera. <proyecto>/<proyecto>/urls.py -> Generar las urls para las vistas desde accounts . from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), # Paths de Auth path ( 'accounts/' , include ( 'django.contrib.auth.urls' )), ] Si abres la url accounts te dice todos las urls que hay, como accounts/login .","title":"Auth Views"},{"location":"sw/web/backend/django/avanzado/#loginview","text":"Si abres accounts/login da error de template. Busca el template <app>/login.html , as\u00ed que hay que crearlo. <app>/templates/<app>/login.html settings.py -> En el settings del proyecto tendremos que a\u00f1adir la app al principio de todo, ya que muchos formularios pueden estar con conflicto con otras aplicaciones. Tambi\u00e9n debemos de crear al final las redirecciones con la variable LOGIN_REDIRECT_URL donde se le indica donde ir al loguearse. # ... INSTALLED_APPS = [ 'registration.apps.RegistrationConfig' , 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'ckeditor' , 'core.apps.CoreConfig' , 'pages.apps.PagesConfig' , ] # ... # Auth redirects LOGIN_REDIRECT_URL = 'home' Luego en el template donde lo vayas a usar simplemente usa {% url 'login' %}","title":"LoginView"},{"location":"sw/web/backend/django/avanzado/#logoutview","text":"Es parecido al anterior. En este caso solo tienes que definir la variable LOGOUT_REDIRECT_URL en el settings # Auth redirects LOGIN_REDIRECT_URL = 'pages:pages' LOGOUT_REDIRECT_URL = 'home' Y luego en alg\u00fan template puedes enlazar la acci\u00f3n con {% url 'logout' %} < ul class = \"navbar-nav\" > {% if not request.user.is_authenticated %} < li class = \"nav-item\" > < a class = \"nav-link\" href = \"{% url 'login' %}\" > Acceder </ a > </ li > {% else %} < li class = \"nav-item\" > < a class = \"nav-link\" href = \"{% url 'logout' %}\" > Salir </ a > </ li > {% endif %} </ ul >","title":"LogoutView"},{"location":"sw/web/backend/django/avanzado/#registro-de-usuario","text":"Se suele hacer en una app aparte ( registration por ejemplo). <app>/views.py -> Importa el formulario de creaci\u00f3n de usuario UserCreationForm y una vista gen\u00e9rica de creaci\u00f3n como CreateView . Dentro de esta se le pasa el formulario en el atributo form_class as\u00ed como su template. Tambi\u00e9n debes de devolver la redirecci\u00f3n con alg\u00fan par\u00e1metro que permita saber que todo ha ido correcto. from django.contrib.auth.forms import UserCreationForm from django.views.generic import CreateView from django.urls import reverse_lazy # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationForm template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' <app>/urls.py from django.urls import path , include from .views import SignUpView urlpatterns = [ path ( 'signup/' , SignUpView . as_view (), name = 'signup' ), ] <proyecto>/urls.py from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), # Paths de Auth path ( 'accounts/' , include ( 'django.contrib.auth.urls' )), path ( 'accounts/' , include ( 'registration.urls' )), ] <app>/templates/<app>/<template_name> -> Es un formulario normal y corriente. {% extends 'core/base.html' %} {% load static %} {% block title %}Registro{% endblock %} {% block content %} < style >. errorlist { color : red ;}</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" > {% csrf_token %} < h3 class = \"mb-4\" > Registro </ h3 > {{form.as_p}} < p >< input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Confirmar\" ></ p > </ form > </ div > </ div > </ div > </ main > {% endblock %} <app>/templates/<app>/<success_url> -> Para poder ver si te ha ido bien podr\u00edas a\u00f1adir {% if 'register' in request.GET %} < p style = \"color:green;\" > Usuario registrado correctamente, ya puedes loguearte. </ p > {% endif %}","title":"Registro de Usuario"},{"location":"sw/web/backend/django/avanzado/#customizar-el-registro","text":"Para customizar el formulario de registro debes de trastearlo en tiempo de ejecuci\u00f3n para no perder el que ya hay hecho. <app>/views.py -> Tienes que sobreescribir el m\u00e9todo get_form() , modificando sus campos, que son: username , password1 y password2 . from django.contrib.auth.forms import UserCreationForm from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationForm template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form <app>/templates/<app>/<template_name> -> Si quieres quitar todos los labels , lo puedes hacer desde el fichero anterior o simplemente en tu template pones < style > label { display : none }</ style >","title":"Customizar el registro"},{"location":"sw/web/backend/django/avanzado/#anadir-email-como-requisito","text":"Para que a\u00f1adas un email al registro lo mejor es extender el formulario ya existente en Django. <app>/forms.py -> Crea este fichero para extender el formulario. A\u00f1ades el atributo email . En la clase Meta a\u00f1ades el atributo. con el m\u00e9todo clean_<field> haces una validaci\u00f3n, en este caso clean_email lo haces para que el email sea \u00fanico para cada usuario (no puede haber dos usuarios con el mismo email) Si el email no existe, puede registrarse, sino, lanza un error de validaci\u00f3n. from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User class UserCreationFormWithEmail ( UserCreationForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) def clean_email ( self ): email = self . cleaned_data [ 'email' ] if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email <app>/views.py -> Cambiar el formulario anterior por el nuevo extendido, as\u00ed como las modificaciones de su campo. from .forms import UserCreationFormWithEmail from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form","title":"A\u00f1adir email como requisito"},{"location":"sw/web/backend/django/avanzado/#recuperar-contrasena","text":"Existen diferentes opciones, pero una t\u00edpica es tener un servidor de correo SMTP que manda email con el link para el proceso de recuperaci\u00f3n de contrase\u00f1a. Aqu\u00ed vas a hacer un truco para debug, que es tener un fichero local donde almacenas las credenciales. <proyecto>/settings.py -> A\u00f1ades lo siguiente al final. Con EMAIL_BACKEND le estas diciendo que use un backend de ficheros de prueba para el email. Con EMAIL_FILE_PATH le indicas donde guardar ese fichero. # Email if DEBUG : EMAIL_BACKEND = \"django.core.mail.backends.filebased.EmailBackend\" EMAIL_FILE_PATH = os . path . join ( BASE_DIR , 'sent_emails' ) else : # Configuraci\u00f3n del servidor de correo SMTP real de producci\u00f3n pass Ahora te va a tocar sobreescribir los 4 templates que Django usa para recuperar la contrase\u00f1a, ya que los que \u00e9l ofrece son de forma admin, y tu quieres verlo como un usuario que ve el frontend. Los templates que debes crear son: password_reset_form.html -> Pedir nueva contrase\u00f1a. password_reset_done.html -> Email con instrucciones enviado. password_reset_confirm.html -> Definir nueva contrase\u00f1a. password_reset_complete.html -> Contrase\u00f1a cambiada. Por \u00faltimo, en el template login deber\u00edas de a\u00f1adir la t\u00edpica l\u00ednea para si has olvidado la contrase\u00f1a < p > < a href = \"{% url 'password_reset' %}\" > He olvidado mi contrase\u00f1a </ a > </ p > Para ver todos los templates de Django para cuentas puedes verlo en","title":"Recuperar contrase\u00f1a"},{"location":"sw/web/backend/django/avanzado/#perfil-de-usuario","text":"","title":"Perfil de Usuario"},{"location":"sw/web/backend/django/avanzado/#crear-perfil","text":"<app>/models.py -> Creamos un modelo Profile , que tiene que tener una relaci\u00f3n 1-1 con un usuario, una foto, biograf\u00eda, web. from django.db import models from django.contrib.auth.models import User # Create your models here. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = 'profiles' , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) settings.py -> Hay que despachar los ficheros media del avatar y no tocar la redirecci\u00f3n del login. # Auth redirects #LOGIN_REDIRECT_URL = 'pages:pages' LOGOUT_REDIRECT_URL = 'home' # Media Files MEDIA_URL = '/media/' MEDIA_ROOT = os . path . join ( BASE_DIR , 'media' ) urls.py -> A\u00f1adir al urlpatterns del proyecto donde se despachan los ficheros media. from django.contrib import admin from django.urls import path , include from pages.urls import pages_patterns from django.conf import settings urlpatterns = [ path ( '' , include ( 'core.urls' )), path ( 'pages/' , include ( pages_patterns )), path ( 'admin/' , admin . site . urls ), # Paths de Auth path ( 'accounts/' , include ( 'django.contrib.auth.urls' )), path ( 'accounts/' , include ( 'registration.urls' )), ] if settings . DEBUG : from django.conf.urls.static import static urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) <app>/views.py -> Crear su vista, con el decorador login_required para cuando est\u00e9s logueado. from .forms import UserCreationFormWithEmail from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms from django.views.generic.base import TemplateView from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( TemplateView ): template_name = 'registration/profile_form.html' <app>/templates/<app>/<template_name> -> Crear su template. {% extends 'core/base.html' %} {% load static %} {% block title %}Perfil{% endblock %} {% block content %} < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3 mb-5\" > < div class = \"col-md-9 mx-auto\" > < h3 > Perfil </ h3 > < form action = \"\" method = \"post\" > {% csrf_token %} {{ form.as_p }} < div class = \"text-center\" > < input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Actualizar\" /> </ div > </ form > </ div > </ div > </ div > </ main > {% endblock %} <app>/urls.py -> Redireccionarla en la urls. from django.urls import path , include from .views import SignUpView , ProfileUpdate urlpatterns = [ path ( 'signup/' , SignUpView . as_view (), name = 'signup' ), path ( 'profile/' , ProfileUpdate . as_view (), name = 'profile' ), ] core/templates/base.html -> A\u00f1adir un enlace. < li class = \"nav-item\" > < a class = \"nav-link\" href = \"{% url 'profile' %}\" > Perfil </ a > </ li > Por \u00faltimo hacemos las migraciones. python manage.py makemigrations <app> python manage.py migrate <app>","title":"Crear perfil"},{"location":"sw/web/backend/django/avanzado/#perfil-editable","text":"<app>views.py -> Tienes que hacer que la vista herede de UpdateView (poni\u00e9ndole su modelo y que campos son editables). Para que no de error a la hora de editar, se debe sobreescribir el m\u00e9todo get_object , donde hay que obtener el usuario de la propia request para poder usarlo en la vista. Al obtener el usuario, si este no existe, la queryset puede petar, as\u00ed que por eso hay que usar get_or_create . from .forms import UserCreationFormWithEmail from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required from django.views.generic.edit import UpdateView from .models import Profile # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( UpdateView ): model = Profile fields = [ 'avatar' , 'bio' , 'link' ] success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_form.html' def get_object ( self ): # Obtener (o crear si no existe) el objeto a editar profile , created = Profile . objects . get_or_create ( user = self . request . user ) return profile En el template, para poder ver el url de la imagen del avatar tienes que usar esto en el formulario < form action = \"\" method = \"post\" enctype = \"multipart/form-data\" > {% csrf_token %}","title":"Perfil editable"},{"location":"sw/web/backend/django/avanzado/#customizando-formulario-de-perfil","text":"<app>/forms.py -> Debes de importar el modelo. Crear un formulario que herede de forms.ModelForm . Dentro crear su clase Meta con el modelo, los campos y sus widgets para modificarlos. from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User from .models import Profile class UserCreationFormWithEmail ( UserCreationForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) def clean_email ( self ): email = self . cleaned_data [ 'email' ] if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email class ProfileForm ( forms . ModelForm ): class Meta : model = Profile fields = [ 'avatar' , 'bio' , 'link' ] widgets = { 'avatar' : forms . ClearableFileInput ( attrs = { 'class' : 'form-control-file mt-3' }), 'bio' : forms . Textarea ( attrs = { 'class' : 'form-control mt-3' , 'rows' : 3 , 'placeholder' : 'Biografia' }), 'link' : forms . URLInput ( attrs = { 'class' : 'form-control mt-3' , 'placeholder' : 'Enlace' }), } <app>/views.py -> Importa el formulario nuevo y cambia el atributo model por el de form_class , poniendole el formulario. El campo fields ya no es necesario pues est\u00e1 en el formulario. from .forms import UserCreationFormWithEmail , ProfileForm # ... @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( UpdateView ): form_class = ProfileForm success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_form.html' def get_object ( self ): # Obtener (o crear si no existe) el objeto a editar profile , _ = Profile . objects . get_or_create ( user = self . request . user ) return profile <app>/templates/<app>/<template_name> -> Modifica el formulario a pelo a tu gusto. En este ejemplo se ha puesto una imagen por defecto no-avatar.jpg en <app>/static/<app>/img/no-avatar.jpg para cuando el usuario no tenga, o borre la imagen, aparezca esta. {% extends 'core/base.html' %} {% load static %} {% block title %}Perfil{% endblock %} {% block content %} < style >. errorlist { color : red ;} label { display : none }</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" enctype = \"multipart/form-data\" > {% csrf_token %} < div class = \"row\" > <!-- Previa del avatar --> < div class = \"col-md-2\" > {% if request.user.profile.avatar %} < img src = \"{{request.user.profile.avatar.url}}\" class = \"img-fluid\" > < p class = \"mt-1\" > \u00bfBorrar? < input type = \"checkbox\" id = \"avatar-clear\" name = \"avatar-clear\" /></ p > {% else %} < img src = \"{% static 'registration/img/no-avatar.jpg' %}\" class = \"img-fluid\" > {% endif %} </ div > <!-- Formulario --> < div class = \"col-md-10\" > < h3 > Perfil </ h3 > < input type = \"file\" name = \"avatar\" class = \"form-control-file mt-3\" id = \"id_avatar\" > {{ form.bio }} {{ form.link }} < input type = \"submit\" class = \"btn btn-primary btn-block mt-3\" value = \"Actualizar\" > </ div > </ div > </ form > </ div > </ div > </ div > </ main > {% endblock %}","title":"Customizando formulario de Perfil"},{"location":"sw/web/backend/django/avanzado/#email-editable","text":"Como es solo un campo, y para no tener que destrozar los modelos de formularios y vistas que ya estamos usando, lo mejor es que hagas un formulario solo para este campo. <app>/templates/<app>/<template_perfil> -> A\u00f1ades un enlace para editar el email. <app>/forms.py -> Creas el nuevo formulario EmailForm bas\u00e1ndote en uno anterior. Ahora lo que vas a recuperar es un objeto que ya existe y que debe permitir cambiarlo si no existe el nuevo valor. from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User from .models import Profile class UserCreationFormWithEmail ( UserCreationForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) def clean_email ( self ): email = self . cleaned_data [ 'email' ] if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email class ProfileForm ( forms . ModelForm ): class Meta : model = Profile fields = [ 'avatar' , 'bio' , 'link' ] widgets = { 'avatar' : forms . ClearableFileInput ( attrs = { 'class' : 'form-control-file mt-3' }), 'bio' : forms . Textarea ( attrs = { 'class' : 'form-control mt-3' , 'rows' : 3 , 'placeholder' : 'Biografia' }), 'link' : forms . URLInput ( attrs = { 'class' : 'form-control mt-3' , 'placeholder' : 'Enlace' }), } class EmailForm ( forms . ModelForm ): email = forms . EmailField ( required = True , help_text = 'Requerido, 254 caracteres como m\u00e1ximo y que sea v\u00e1lido' ) class Meta : model = User fields = [ 'email' ] def clean_email ( self ): email = self . cleaned_data [ 'email' ] if 'email' in self . changed_data : if User . objects . filter ( email = email ) . exists (): raise forms . ValidationError ( 'El email ya existe, usa otro.' ) return email <app>/views.py -> Creas su vista EmailUpdate y lo obtienes (el email) de la propia request . from .forms import UserCreationFormWithEmail , ProfileForm , EmailForm from django.views.generic import CreateView from django.urls import reverse_lazy from django import forms from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required from django.views.generic.edit import UpdateView from .models import Profile # Create your views here. class SignUpView ( CreateView ): form_class = UserCreationFormWithEmail template_name = 'registration/signup.html' def get_success_url ( self ): return reverse_lazy ( 'login' ) + '?register' def get_form ( self , form_class = None ): form = super ( SignUpView , self ) . get_form () # Customizaci\u00f3n en tiempo real form . fields [ 'username' ] . widget = forms . TextInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Nombre de usuario' }) form . fields [ 'email' ] . widget = forms . EmailInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Email' }) form . fields [ 'password1' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Contrase\u00f1a' }) form . fields [ 'password2' ] . widget = forms . PasswordInput ( attrs = { 'class' : 'form-control mb2' , 'placeholder' : 'Repite la contrase\u00f1a' }) return form @method_decorator ( login_required , name = 'dispatch' ) class ProfileUpdate ( UpdateView ): form_class = ProfileForm success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_form.html' def get_object ( self ): # Obtener (o crear si no existe) el objeto a editar profile , _ = Profile . objects . get_or_create ( user = self . request . user ) return profile @method_decorator ( login_required , name = 'dispatch' ) class EmailUpdate ( UpdateView ): form_class = EmailForm success_url = reverse_lazy ( 'profile' ) template_name = 'registration/profile_email_form.html' def get_object ( self ): # Obtener el objeto a editar return self . request . user <app>/urls.py -> Creas su endpoint / url asociada a su vista. from django.urls import path from .views import SignUpView , ProfileUpdate , EmailUpdate urlpatterns = [ path ( 'signup/' , SignUpView . as_view (), name = 'signup' ), path ( 'profile/' , ProfileUpdate . as_view (), name = 'profile' ), path ( 'profile/email/' , EmailUpdate . as_view (), name = 'profile_email' ), ] <app>/templates/<app>/template_name -> Por \u00faltimo creas la template. {% extends 'core/base.html' %} {% load static %} {% block title %}Email{% endblock %} {% block content %} < style >. errorlist { color : red ;} label { display : none }</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" > {% csrf_token %} < h3 class = \"mb-4\" > Email </ h3 > {{form.as_p}} < p >< input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Actualizar\" ></ p > </ form > </ div > </ div > </ div > </ main > {% endblock %}","title":"Email editable"},{"location":"sw/web/backend/django/avanzado/#contrasena-editable","text":"Al igual que suced\u00eda anteriormente cuando quer\u00edas cambiar la contrase\u00f1a (Recuperar Contrase\u00f1a), Django tiene urls de Admin para editar la contrase\u00f1a. Tu vas a usar: password_change/ -> Vista con nombre password_change y template que usa un formulario password_change_form-html . password_change/done -> Vista con nombre password_change_done y template password_change_done.html . Solo tienes que crear estos dos templates <app>/templates/<app>/password_change_form.html {% extends 'core/base.html' %} {% load static %} {% block title %}Cambio de contrase\u00f1a{% endblock %} {% block content %} < style >. errorlist { color : red ;}</ style > < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < form action = \"\" method = \"post\" > {% csrf_token %} < h3 class = \"mb-4\" > Cambio de contrase\u00f1a </ h3 > < p > Por favor, introduzca su contrase\u00f1a antigua por seguridad, y despu\u00e9s introduzca dos veces la nueva contrase\u00f1a para verificar que la ha escrito correctamente. </ p > {{form.old_password.errors}} < p >< input type = \"password\" name = \"old_password\" autofocus = \"\" required = \"\" id = \"id_old_password\" class = \"form-control\" placeholder = \"Contrase\u00f1a antigua\" ></ p > {{form.new_password1.errors}} < p >< input type = \"password\" name = \"new_password1\" required = \"\" id = \"id_new_password1\" class = \"form-control\" placeholder = \"Contrase\u00f1a nueva\" ></ p > {{form.new_password2.errors}} < p >< input type = \"password\" name = \"new_password2\" required = \"\" id = \"id_new_password2\" class = \"form-control\" placeholder = \"Contrase\u00f1a nueva (confirmaci\u00f3n)\" ></ p > < p >< input type = \"submit\" class = \"btn btn-primary btn-block\" value = \"Cambiar mi contrase\u00f1a\" ></ p > </ form > </ div > </ div > </ div > </ main > {% endblock %} <app>/templates/<app>/password_change_done.html {% extends 'core/base.html' %} {% load static %} {% block title %}Contrase\u00f1a cambiada correctamente{% endblock %} {% block content %} < main role = \"main\" > < div class = \"container\" > < div class = \"row mt-3\" > < div class = \"col-md-9 mx-auto mb-5\" > < h3 class = \"mb-4\" > Contrase\u00f1a cambiada correctamente </ h3 > < p > Puedes volver a tu perfil haciendo clic < a href = \"{% url 'profile' %}\" > aqu\u00ed </ a > . </ p > </ div > </ div > </ div > </ main > {% endblock %}","title":"Contrase\u00f1a Editable"},{"location":"sw/web/backend/django/avanzado/#optimizar-guardado-de-avatar","text":"Si se guardan todas las im\u00e1genes a pelo de un usuario, esto es impracticable a la larga. Lo ideal es que cuando el usuario cargue una imagen nueva, borres la anterior y la sustituyas por la nueva. Para hacer esto tienes que: <app>/models.py -> En la app donde tengas la gesti\u00f3n del perfil, en el campo avatar le pasas al argumento upload_to una funci\u00f3n, en este caso custom_upload_to . A esa funci\u00f3n tienes que pasarle primero la instancia el perfil, y luego el nombre del fichero del nuevo avatar. Una vez dentro recuperas el perfil y borras su avatar. Por \u00faltimo devuelves el path con el nombre donde se va a guardar la nueva imagen. from django.db import models from django.contrib.auth.models import User from django.dispatch import receiver from django.db.models.signals import post_save def custom_upload_to ( instance , filename ): old_instance = Profile . objects . get ( pk = instance . pk ) old_instance . avatar . delete () return 'profiles/' + filename # Create your models here. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = custom_upload_to , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) @receiver ( post_save , sender = User ) def ensure_profile_exists ( sender , instance , ** kwargs ): if kwargs . get ( 'created' , False ): Profile . objects . get_or_create ( user = instance ) print ( 'Se acaba de crear un usuario y su perfil enlazado' )","title":"Optimizar guardado de avatar"},{"location":"sw/web/backend/django/avanzado/#senales","text":"Una se\u00f1al es una funci\u00f3n que se ejecuta despu\u00e9s de que ocurra un evento. Por ejemplo, si quisieras saber cuando se ha creado un usuario correctamente, puedes hacer lo siguiente. <app>/models.py -> Creas la funci\u00f3n ensure_profile_exists . Importas el decorador receiver y tambi\u00e9n la se\u00f1al post_save . Decoras la funci\u00f3n indic\u00e1ndole el decorador, la se\u00f1al, y quien la env\u00eda (en este caso User ). De los kwargs compruebas si se acaba de crear el usuario y ya puedes operar con \u00e9l. from django.db import models from django.contrib.auth.models import User from django.dispatch import receiver from django.db.models.signals import post_save # Create your models here. class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE ) avatar = models . ImageField ( upload_to = 'profiles' , null = True , blank = True ) bio = models . TextField ( null = True , blank = True ) link = models . URLField ( max_length = 200 , null = True , blank = True ) @receiver ( post_save , sender = User ) def ensure_profile_exists ( sender , instance , ** kwargs ): if kwargs . get ( 'created' , False ): Profile . objects . get_or_create ( user = instance ) print ( 'Se acaba de crear un usuario y su perfil enlazado' )","title":"Se\u00f1ales"},{"location":"sw/web/backend/django/avanzado/#tdd","text":"","title":"TDD"},{"location":"sw/web/backend/django/avanzado/#tests-simples","text":"Los tests de cada app se crean en <app>/test.py . Un ejemplo f\u00e1cil para que te quedes con la copla, ser\u00eda testear el ejemplo de la se\u00f1al. <app>/test.py -> Tienes que importar el modelo que vayas a testear, Profile , y en este caso vas a necesitar de User tambi\u00e9n. Creas una clase para pasar los tests de tu modelo. Con el m\u00e9todo setUp generas los datos que necesites para hacer los tests. Luego generas un m\u00e9todo por cada test y que siga el patr\u00f3n test_<cosa_a_probar> . En este caso pruebas que se haya creado un perfil despu\u00e9s de haber creado un usuario. En tu ejemplo obtienes el perfil que se acaba de crear por setUp y lanzas un assert si coincide. from django.test import TestCase from django.contrib.auth.models import User from .models import Profile # Create your tests here. class ProfileTestCase ( TestCase ): def setUp ( self ): User . objects . create_user ( 'test' , 'test@test.com' , 'test1234' ) def test_profile_exists ( self ): exists = Profile . objects . filter ( user__username = 'test' ) . exists () self . assertEqual ( exists , True ) Para que se ejecuten el test debes hacer # Testear todo python manage.py test # Testear la <app> python manage.py test <app> # Testear la <clase> de la <app> python manage.py test <app>.<clase> # Teastear el <m\u00e9todo> de la <clase> de la <app> python manage.py test <app>.<clase>.<m\u00e9todo> Cada vez que acaba de ejecutarse un m\u00e9todo se borra la bbdd temporal y vuelve a ejecutarse setUp y luego el siguiente m\u00e9todo.","title":"Tests Simples"},{"location":"sw/web/backend/django/avanzado/#ejemplo-de-test-con-senales","text":"Suponte una app messenger con dos modelos: messenger/models.py -> Message tiene un usuario, contenido y fecha de creacion. Thread tiene usuarios, mensajes. from django.db import models from django.contrib.auth.models import User # Create your models here. class Message ( models . Model ): user = models . ForeignKey ( User , on_delete = models . CASCADE ) content = models . TextField () created = models . DateTimeField ( auto_now_add = True ) class Meta : ordering = [ 'created' ] class ThreadManager ( models . Manager ): def find ( self , user1 , user2 ): # self es lo mismo que Thread.objects.all() queryset = self . filter ( users = user1 ) . filter ( users = user2 ) if len ( queryset ): return queryset [ 0 ] def find_or_create ( self , user1 , user2 ): thread = self . find ( user1 , user2 ) if not thread : thread = Thread . objects . create () thread . users . add ( user1 , user2 ) return thread class Thread ( models . Model ): users = models . ManyToManyField ( User , related_name = 'threads' ) messages = models . ManyToManyField ( Message ) # Model Manager objects = ThreadManager () messenger/test.py -> Abajo tienes el c\u00f3digo, pero f\u00edjate en el m\u00e9todo test_add_message_from_user_not_in_thread . Quieres testear si un usuario que no est\u00e1 en un hilo, y el test falla. from django.test import TestCase from django.contrib.auth.models import User from .models import Message , Thread # Create your tests here. class ThreadTestCase ( TestCase ): def setUp ( self ): self . user1 = User . objects . create_user ( 'user1' , None , 'test1234' ) self . user2 = User . objects . create_user ( 'user2' , None , 'test1234' ) self . user3 = User . objects . create_user ( 'user3' , None , 'test1234' ) self . thread = Thread . objects . create () def test_add_to_thread ( self ): self . thread . users . add ( self . user1 , self . user2 ) self . assertEqual ( len ( self . thread . users . all ()), 2 ) def test_filter_thread_by_users ( self ): self . thread . users . add ( self . user1 , self . user2 ) threads = Thread . objects . filter ( users = self . user1 ) . \\ filter ( users = self . user2 ) self . assertEqual ( self . thread , threads [ 0 ]) def test_filter_non_existent_thread ( self ): threads = Thread . objects . filter ( users = self . user1 ) . \\ filter ( users = self . user2 ) self . assertEqual ( len ( threads ), 0 ) def test_add_message_to_thread ( self ): self . thread . users . add ( self . user1 , self . user2 ) message1 = Message . objects . create ( user = self . user1 , content = 'Jelou' ) message2 = Message . objects . create ( user = self . user2 , content = 'Hola' ) self . thread . messages . add ( message1 , message2 ) self . assertEqual ( len ( self . thread . messages . all ()), 2 ) for message in self . thread . messages . all (): print ( f ' { message . user } : { message . content } ' ) def test_add_message_from_user_not_in_thread ( self ): self . thread . users . add ( self . user1 , self . user2 ) message1 = Message . objects . create ( user = self . user1 , content = 'Jelou' ) message2 = Message . objects . create ( user = self . user2 , content = 'Hola' ) message3 = Message . objects . create ( user = self . user3 , content = 'Shurmanos' ) self . thread . messages . add ( message1 , message2 , message3 ) self . assertEqual ( len ( self . thread . messages . all ()), 2 ) def test_find_thread_with_custom_manager ( self ): self . thread . users . add ( self . user1 , self . user2 ) thread = Thread . objects . find ( self . user1 , self . user2 ) self . assertEqual ( self . thread , thread ) def test_find_or_create_thread_with_custom_manager ( self ): self . thread . users . add ( self . user1 , self . user2 ) thread = Thread . objects . find_or_create ( self . user1 , self . user2 ) self . assertEqual ( self . thread , thread ) thread = Thread . objects . find_or_create ( self . user1 , self . user3 ) self . assertIsNotNone ( self . thread , thread ) Para solucionar esto, la manera de hacerlo es capturar con una se\u00f1al cuando se va a introducir un mensaje a un hilo, y no hacerlo. Cuando se a\u00f1ade un elemento a la bbdd, saltan al menos dos eventos, pre_add y post_add . Te interesa captar el primero con una se\u00f1al y borrar lo que no vaya a ser guardado messenger/models.py -> Usa la se\u00f1al m2m_changed para captar cuando se va a introducir un elemento. Creas la funci\u00f3n messages_changed para manipular ese evento, con un bucle recorres todos elementos pk_set y los guardas en un conjunto a parte los que no quieres false_pk_set y eliminas del conjunto los elementos que no deben estar. Por \u00faltimo a m2m_changed le conectas la funci\u00f3n messages_changed y le pones como sender (emisor) el flujo/caudal de mensajes de los hilos, Thread.messages.through . from django.db import models from django.contrib.auth.models import User from django.db.models.signals import m2m_changed # Create your models here. class Message ( models . Model ): user = models . ForeignKey ( User , on_delete = models . CASCADE ) content = models . TextField () created = models . DateTimeField ( auto_now_add = True ) class Meta : ordering = [ 'created' ] class ThreadManager ( models . Manager ): def find ( self , user1 , user2 ): # self es lo mismo que Thread.objects.all() queryset = self . filter ( users = user1 ) . filter ( users = user2 ) if len ( queryset ): return queryset [ 0 ] def find_or_create ( self , user1 , user2 ): thread = self . find ( user1 , user2 ) if not thread : thread = Thread . objects . create () thread . users . add ( user1 , user2 ) return thread class Thread ( models . Model ): users = models . ManyToManyField ( User , related_name = 'threads' ) messages = models . ManyToManyField ( Message ) # Model Manager objects = ThreadManager () def messages_changed ( sender , ** kwargs ): instance = kwargs . pop ( 'instance' , None ) action = kwargs . pop ( 'action' , None ) pk_set = kwargs . pop ( 'pk_set' , None ) print ( f ' { instance } { action } { pk_set } ' ) # Busca los mensajes que no deben de estar en el hilo false_pk_set = set () if action == 'pre_add' : for msg_pk in pk_set : msg = Message . objects . get ( pk = msg_pk ) if msg . user not in instance . users . all (): print ( f ' { msg . user } no forma parte del hilo' ) false_pk_set . add ( msg_pk ) # Borra del hilo los mensajes que no deben de estar pk_set . difference_update ( false_pk_set ) m2m_changed . connect ( messages_changed , sender = Thread . messages . through )","title":"Ejemplo de Test con se\u00f1ales"},{"location":"sw/web/backend/django/avanzado/#model-manager","text":"Para trabajar con bases de datos, Django tiene su propio ORM que llevas usando todo el rato. Cada vez que trabajas con un modelo, como con User , tienes atributos y m\u00e9todos ya definidos. Si quisieras extenderlos, lo que debes crear es un Model Manager. <app>/models.py -> En el models.py de tu app, debes de crear una clase que herede de from django.db import models from django.contrib.auth.models import User class ThreadManager ( models . Manager ): def find ( self , user1 , user2 ): # self es lo mismo que Thread.objects.all() queryset = self . filter ( users = user1 ) . filter ( users = user2 ) if len ( queryset ): return queryset [ 0 ] def find_or_create ( self , user1 , user2 ): thread = self . find ( user1 , user2 ) if not thread : thread = Thread . objects . create () thread . users . add ( user1 , user2 ) return thread class Thread ( models . Model ): users = models . ManyToManyField ( User , related_name = 'threads' ) messages = models . ManyToManyField ( Message ) # Model Manager objects = ThreadManager ()","title":"Model Manager"},{"location":"sw/web/backend/django/avanzado/#js-peticiones-asincronas","text":"TODO:","title":"JS - Peticiones as\u00edncronas"},{"location":"sw/web/backend/django/avanzado/#deploy","text":"TODO: recolectar los staticos con python manage.py collecstatic","title":"Deploy"},{"location":"sw/web/backend/django/avanzado/#customizar-el-admin","text":"TODO:","title":"Customizar el Admin"},{"location":"sw/web/backend/django/intermedio/","text":"Django Intermedio \u00b6 TODO: Relaci\u00f3n entre modelos \u00b6 Los modelos se pueden conectar, a trav\u00e9s de las claves for\u00e1neas, con dos tipos de relaciones: One-To-Many -> Uno a muchos Relacionas un campo de una tabla con varias tablas. Many-To-Many -> Machos a muchos Relacionas varios campos de una tabla con varias tablas. Ejemplo de una one-to-many con el proyecto anterior. Creamos una app blog que va a contener dos modelos, uno categor\u00eda y otro post: Cada post solo tiene un autor, pero cada autor (usuario) puede tener varias entradas (one-to-many). Si se elimina a un autor, se deben de eliminar todos sus post (en cascada). Cuando la relaci\u00f3n es one-to-many se usa un campo ForeignKey (clave for\u00e1nea). La relaci\u00f3n one-to-many es User - Post . Cada post podr\u00e1 tener varias categor\u00edas, y cada categor\u00eda puede estar en varios post (many-to-many). Cuando la relaci\u00f3n es many-to-many se usa un campo ManyToManyField La relaci\u00f3n many-to-many es Category - Post . As\u00ed que el models.py quedar\u00eda from django.db import models from django.utils.timezone import now from django.contrib.auth.models import User # Create your models here. class Category ( models . Model ): name = models . CharField ( max_length = 100 , verbose_name = 'Nombre' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'categor\u00eda' verbose_name_plural = 'categorias' ordering = [ '-created' ] def __str__ ( self ): return self . name class Post ( models . Model ): title = models . CharField ( max_length = 200 , verbose_name = 'T\u00edtulo' ) content = models . TextField ( verbose_name = 'Contenido' ) published = models . DateTimeField ( default = now , verbose_name = 'Publicado' ) image = models . ImageField ( upload_to = 'blog' , null = True , blank = True , verbose_name = 'Imagen' ) author = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = 'Autor' ) categories = models . ManyToManyField ( Category , related_name = 'get_posts' , verbose_name = 'Categor\u00edas' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'entrada' verbose_name_plural = 'entradas' ordering = [ '-created' ] def __str__ ( self ): return self . title Personalizar el Admin \u00b6 El Admin permite ser customizado, para poder tener una mejor UX. Todos los cambios para que surtan efecto tendr\u00e1n que estar hechos en el admin.py , ya sea del proyecto o de cada apps. A\u00f1adir m\u00e1s columnas \u00b6 Igual que ten\u00edamos el campo readonly_fields para mostrar campos ocultos, existe otro comando list_display , al cual se le pasa una tupla con todos las columnas/campos que queremos tener. Ordenar columnas \u00b6 Para poder ordenador columnas se usa ordering , donde se le pasa una tupla donde se ordena en funci\u00f3n de izquierda a derecha (por ejemplo, primero por autor, luego por fecha de publicaci\u00f3n, etc). Formulario de b\u00fasqueda \u00b6 Con search_fields y una tupla con los campos. Hay que tener cuidado porque por ejemplo, si un campo en realidad se busca por subcampos que tiene dentro, hay que especificarlo y sino dar\u00e1 error. Por ejemplo, si quiero buscar por autor, en realidad quiero buscar por su usuario. O si quiero buscar por categor\u00edas, lo que quiero encontrar es el nombre de la catego\u0155ia. La nomemclatura es <campos>__<subcampo> (2 barras bajas). Por ejemplo: ordering = ( 'author__username' , 'categories__name' ) Campos con fechas \u00b6 Para los campos datetime y similares, hay que definir una jerarqu\u00eda de fechas con date_hierarchy y la tupla con los campos. Filtros de b\u00fasqueda \u00b6 Para filtrar por campos se usa list_filter seguida de la tupla de campos. Crear campos propios para los filtros \u00b6 Hay campos que pueden dar problemas, por ejemplo los many-to-many. Para eso, se crea una funci\u00f3n auxiliar que devuelva lo que realmente quiero. Luego reescribo el m\u00e9todo short_description pas\u00e1ndole el nombre del nuevo campo. En la siguiente secci\u00f3n hay un ejemplo final donde se ve esto en el post_categories() . Ejemplo con todo \u00b6 Ejemplo en el admin.py de un blog: from django.contrib import admin from .models import Category , Post # Register your models here. class CategoryAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) class PostAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) list_display = ( 'title' , 'author' , 'published' , 'post_categories' ) ordering = ( 'author' , 'published' ) search_fields = ( 'title' , 'content' , 'author__username' , 'categories__name' ) date_hierarchy = 'published' list_filter = ( 'author__username' , 'categories__name' ,) def post_categories ( self , obj ): return ', ' . join ( [ c . name for c in obj . categories . all () . order_by ( 'name' )]) post_categories . short_description = 'Categorias' admin . site . register ( Category , CategoryAdmin ) admin . site . register ( Post , PostAdmin ) Filtros / opciones en los template tags \u00b6 En los template tags se le pueden a\u00f1adir funcionalidades a las variables que se ponen, la forma es {{ < mivariable > | < filtro > }} Formatear fechas \u00b6 Por ejemplo para poner un campo fecha en format DD/MM/YYYY podr\u00edamos hacer {{post.published|date:\"SHORT_DATE_FORMAT\"}} A\u00f1adir saltos de l\u00ednea \u00b6 {{post.content|linebreaks}} Bucles for - primera y \u00faltima iteraci\u00f3n \u00b6 Supongamos que queremos sacar todas las catergor\u00edas de un post. Esto es una relaci\u00f3n many-to-many. Si uso {{post.categories}} Devuelve None , porque la query no se ejecuta. Para que esto no pase har\u00edamos {{post.categories.all}} Pero esto devuele algo que no es legible, lo l\u00f3gico ser\u00eda usar un bucle for as\u00ed {% for category in post.categories.all %} {{category.name}} {% endfor %} Lo que pasa que esto no los pone separados por coma. Y si pongo la coma en el bucle, tambi\u00e9n la va a poner en el \u00faltimo elemento. Para que eso no pase existe un campo forloop , que cuenta entre otras cosas con dos variables forloop.first y forloop.last . As\u00ed que ahora podr\u00edamos hacer {% for category in post.categories.all %} {{category.name}}{% if not forloop.last %}, {% end if%} {% endfor %} Pasar par\u00e1metros a las vistas \u00b6 Todos los par\u00e1metros que se pasan en la url, se toman como string , pero se pueden formatear. Si se manda un par\u00e1metro que no existe, debemos lanzar un 404 . Ejemplo: En el urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . blog , name = 'blog' ), path ( 'category/<int:category_id>' , views . category , name = 'category' ), ] En el views.py from django.shortcuts import render , get_object_or_404 from .models import Post , Category # Create your views here. def blog ( request ): template = 'blog/blog.html' context = { 'posts' : Post . objects . all ()} return render ( request , template , context ) def category ( request , category_id ): template = 'blog/category.html' category = get_object_or_404 ( Category , id = category_id ) context = { 'category' : category } return render ( request , template , context ) Buscar inversamente en relaciones \u00b6 Cuando se tiene una relaci\u00f3n entre campos, se puede buscar tanto en un sentido como en otro. Ve\u00e1moslo con un ejemplo: Tenemos Post relacionado many-to-many con Category . Si quiera buscar todos los post que hay en una categoria podr\u00eda Buscar por cada post y filtrar por categor\u00eda. Buscar por categor\u00eda y sacar todos los posts La segunda opci\u00f3n de b\u00fasqueda es m\u00e1s eficiente y para hacerla tendr\u00eda que hacer {{category.post_set.all}} Pero esta forma queda bastante poco intuitiva. Para customizar esto usamos el campo related_name en el modelo del models.py class Post ( models . Model ): categories = models . ManyToManyField ( Category , related_name = \"get_posts\" ) Y ahora en el template {{category.get_posts.all}} Procesador de contexto \u00b6 El contexto en programaci\u00f3n se refiere al estado de variables, objetos, etc, y su estado, que hay en un momento concreto. Cuando procesamos una vista, hasta ahora lo que devolvemos es la funci\u00f3n render a la que se le pasa: La request -> Que no deja de ser un objeto / variable que contiene informaci\u00f3n sobre la petici\u00f3n http. El template -> El html (y css+js+media) que tiene que cargar. El contexto -> Es un diccionario con variables que le pasamos para que puedan ser usadas en el template. Hay veces en las que se necesita informaci\u00f3n de una app en distintas apps. Una buena manera es extender el contexto, a\u00f1adiendo esa info de una app para poder ser consumida en las dem\u00e1s. Para hacer eso, usamos lo que se llama el Procesador de contexto . Para crear uno hacemos: En la app de la que queremos compartir su informaci\u00f3n, creamos un archivo llamado processors.py . Creamos dentro una funci\u00f3n, a la que se le pasa la request como par\u00e1metro. Dentro creamos un diccionario con informaci\u00f3n. Devolvemos ese diccionario. En el settings.py debemos de darlo de alta. Vamos a la secci\u00f3n TEMPLATES . Dentro de est\u00e1 OPTIONS , y dentro de esta se encuentra context_processors . A\u00f1adimos lo siguiente '<app>.processors.<funcion>' . Esto se ve m\u00e1s f\u00e1cil con un ejemplo, donde vamos a a\u00f1adir las RRSS a una web. Todas las RRSS est\u00e1n en una app social Crear app social y darla de alta en el settings.py Modificar su models.py . from django.db import models # Create your models here. class Link ( models . Model ): key = models . SlugField ( verbose_name = 'Nombre clave' , max_length = 100 , unique = True ) name = models . CharField ( verbose_name = 'Red social' , max_length = 200 ) url = models . URLField ( verbose_name = 'Enlace' , max_length = 200 , null = True , blank = True ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'enlace' verbose_name_plural = 'enlaces' ordering = [ 'name' ] def __str__ ( self ): return self . name Modificar el admin.py , hacer las migraciones y migrarlas from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) admin . site . register ( Link , LinkAdmin ) Como no hay vista, ni template pasamos directamente a la fase de procesador de contexto. Crear el processor.py from .models import Link def ctx_dict ( request ): ctx = {} for link in Link . objects . all (): ctx [ link . key ] = link . url return ctx Darlo de alta en el settings.py Arrancar el server, entrar al Admin y crear un par de objetos con por ejemplo las claves LINK_FACEBOOK, LINK_TWITTER y LINK_INSTAGRAM. Modificar el base.html <!-- Pi\u00e9 de p\u00e1gina --> < footer class = \"footer text-faded text-center py-5\" > < div class = \"container\" > < p class = \"m-0\" > {% if LINK_TWITTER %} < a href = \"{{LINK_TWITTER}}\" class = \"link\" > < span class = \"fa-stack fa-lg\" > < i class = \"fa fa-circle fa-stack-2x\" ></ i > < i class = \"fa fa-twitter fa-stack-1x fa-inverse\" ></ i > </ span > </ a > {% endif %} {% if LINK_FACEBOOK %} < a href = \"{{LINK_FACEBOOK}}\" class = \"link\" > < span class = \"fa-stack fa-lg\" > < i class = \"fa fa-circle fa-stack-2x\" ></ i > < i class = \"fa fa-facebook fa-stack-1x fa-inverse\" ></ i > </ span > </ a > {% endif %} {% if LINK_INSTAGRAM %} < a href = \"{{LINK_INSTAGRAM}}\" class = \"link\" > < span class = \"fa-stack fa-lg\" > < i class = \"fa fa-circle fa-stack-2x\" ></ i > < i class = \"fa fa-instagram fa-stack-1x fa-inverse\" ></ i > </ span > </ a > {% endif %} </ p > < p class = \"m-0 mbt\" > < a href = \"{% url 'sample' %}\" class = \"link\" > Pol\u00edtica de privacidad </ a > \u00b7 < a href = \"{% url 'sample' %}\" class = \"link\" > Aviso legal </ a > \u00b7 < a href = \"{% url 'sample' %}\" class = \"link\" > Cookies </ a > </ p > < p class = \"m-0 mbt1\" > &copy; La Caffettiera 2018 </ p > </ div > </ footer > Template Tags propios \u00b6 Es una alternativa al Procesador de Contexto m\u00e1s flexible, pero tambi\u00e9n consume m\u00e1s recursos: En la app que su informaci\u00f3n sea compartida hay que crear: Carpeta templatetags Dentro un __init__.py Un fichero python, ficherotags.py , para los template tags . El ficherotags.py debe contener los template de django y el modelo de p\u00e1ginas from django import template from page.models import Page Luego hay que crear un registro de la librer\u00eda de templates register = template . Library () Ahora creamos una funci\u00f3n, <nuevotag> , con el decorador @register.simple_tag . En esa funci\u00f3n vamos a poder jugar con las p\u00e1ginas, con por ejemplo Page.objects.all() Para poder usar <nuevotag> en un template hay que cargar el fichero ficherotags.py . Ejemplo: Tenemos los t\u00edpicos links en el footer sobre las cookies y dem\u00e1s. Creamos una app pages models.py from django.db import models # Create your models here. class Page ( models . Model ): title = models . CharField ( verbose_name = 'T\u00edtulo' , max_length = 200 ) content = models . TextField ( verbose_name = 'Contenido' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'p\u00e1gina' verbose_name_plural = 'p\u00e1ginas' ordering = [ 'title' ] def __str__ ( self ): return self . title views.py from django.shortcuts import render , get_object_or_404 from .models import Page # Create your views here. def page ( request , page_id ): page = get_object_or_404 ( Page , id = page_id ) template = 'pages/sample.html' context = { 'page' : page } return render ( request , template , context ) urls.py Proyecto from django.urls import path , include urlpatterns = [ ... # Path del pages path ( 'page/' , include ( 'pages.urls' )), ... ] App pages from django.urls import path from . import views urlpatterns = [ ... path ( '<int:page_id>/' , views . page , name = 'page' ), ... ] pages/templatetags/pages_extra.py from django import template from pages.models import Page register = template . Library () @register . simple_tag def get_page_list (): pages = Page . objects . all () return pages core/templates/core/base.html {% load pages_extras %} {% get_page_list as page_list %} {% for page in page_list %} < a href = \"{% url 'page' page.id %}\" class = \"link\" > {{page.title}} </ a > {% if not forloop.last %}.{% endif %} {% endfor %} Ordenaci\u00f3n directa de p\u00e1ginas \u00b6 Si quisiera dar cierto orden a un tipo de elementos de una app, debemos de: En el models.py a\u00f1adir un campo por ejemplo class Page ( models . Model ): ... order = models . SmallIntegerField ( verbose_name = 'Orden' , default = 0 ) class Meta : ordering = [ 'order' ] En el admin.py class PageAdmin ( models . ModelAdmin ): ... list_display ( 'order' ) Ahora en el Admin puedo administrar pesos para obtener esa ordenaci\u00f3n. Edici\u00f3n directa de p\u00e1ginas \u00b6 En el propio procesador de contexto contamos con el usuario de la sesi\u00f3n en django.contrib.auth.context_processors.auth . As\u00ed que si queremos que ciertas partes aparezcan si un usuario est\u00e1 autenticado, podemos hacer en el template base {% if user.is_authenticated %} < p >< a href = \"{% url 'admin:<app>_<modelo>_<accion>' <objeto-id>%}\" > Editar </ a ></ p > {% endif %} Con el ejemplo anterior ser\u00eda base.html {% if user.is_authenticated %} < p >< a href = \"{% url 'admin:pages_page_change' page.id %}\" > Editar </ a ></ p > {% endif %} Editor WYSIWYG en el Admin \u00b6 Para a\u00f1adir un editor wysiswyg en el Admin podemos usar el ckeditor Instalar ckeditor pip install django-ckeditor A\u00f1adirlo en las apps instaladas -> settings.py INSTALLED_APPS = [ ... 'ckeditor' , ] En el models.py de la app donde queremos tener el campo con el editor: Importamos ckeditor.fields.RichTextField Modificamos el campo deseado Hacemos las migraciones ... from ckeditor.fields import RichTextField class Page ( models . Model ): ... content = RichTextField ( verbose_name = 'Contenido' ) Si queremos redefinir la barra del editor, en el settings.py al final a\u00f1adimos # Ckeditor CKEDITOR_CONFIGS = { 'default' : { 'toolbar' : 'Basic' , } } El modo 'Basic' es el m\u00e1s simple, pero podemos poner None si queremos tener todas las opciones. Repo Oficial -> aqu\u00ed Docu Oficial -> aqu\u00ed En su repo nos viene de ejemplo esto CKEDITOR_CONFIGS = { 'default' : { 'toolbar' : 'Custom' , 'toolbar_Custom' : [ [ 'Bold' , 'Italic' , 'Underline' ], [ 'NumberedList' , 'BulletedList' , '-' , 'Outdent' , 'Indent' , '-' , 'JustifyLeft' , 'JustifyCenter' , 'JustifyRight' , 'JustifyBlock' ], [ 'Link' , 'Unlink' ], [ 'RemoveFormat' , 'Source' ] ] } } Para que el contenido creado en el editor se vea sin problemas en el template, tenemos que ponerle el filtro safe al tag donde est\u00e9 este contenido. En el ejemplo anterior en miproyecto/pages/templates/pages/sample.html {{page.content|safe}} Formularios \u00b6 Para usar formularios en una app: Crear en la app forms.py Al igual que con los modelos: Importamos el \"modelo\" -> from django import forms Creamos una clase que herede del \"modelo\" -> class MiClaseForm(forms.Form): Generamos los campos del formulario, por ejemplo name = forms . CharField ( label = 'Nombre' , required = True ) email = forms . EmailField ( label = 'Email' , required = True ) content = forms . CharField ( label = 'Contenido' , required = True , widget = forms . Textarea ) En el views.py importamos el o los formularios, y los a\u00f1adimos al contexto de la vista. from django.shortcuts import render from .forms import MiClaseForm def mivista ( request ): template = 'miapp/miapp.html' context = { 'form' : MiClaseForm (), } return render ( request , template , context ) En el template lo dibujamos: Simplemente con {{form}} ya lo saca, pero totalmente desformateado. Podemos darle un formato m\u00e1s como p\u00e1rrafos {{form.as_p}} . Como si fuera una lista < ul > {{form.as_ul}} </ ul > Como una tabla < table > {{form.as_table}} </ table > Para a\u00f1adirle el bot\u00f3n de enviar: Metemos el formulario dentro de un <form> En el par\u00e1metro action ser\u00e1 la web donde ir / acci\u00f3n a hacer cuando se env\u00ede el formulario En el method el m\u00e9todo para enviar el formulario: POST es el m\u00e1s recomendado. GET no se recomienda. Dentro introducimos: Al principio {% csrf_token %} por motivos de seguridad. Al final un <input> : Con type=\"submit\" Y un texto a mostrar value=\"Enviar\" . Validar si el formulario es correcto: En la misma vista del views.py miramos si accedemos con POST con request.method == 'POST' Recupero el formulario con mi_formulario = MiClaseForm(data=request.POST) Compruebo si es valido con mi_forumulario.is_valid() Formateo los valores por defecto si alguno est\u00e1 vac\u00edo Hago una redirecci\u00f3n con la funci\u00f3n django.shortcuts.redirect Se recomiendo usar la funci\u00f3n django.urls.reverse para la redirecci\u00f3n Ejemplo de la app contact : forms.py from django import forms class ContactForm ( forms . Form ): name = forms . CharField ( label = 'Nombre' , required = True ) email = forms . EmailField ( label = 'Email' , required = True ) content = forms . CharField ( label = 'Contenido' , required = True , widget = forms . Textarea ) views.py from django.shortcuts import render , redirect from django.urls import reverse from .forms import ContactForm # Create your views here. def contact ( request ): if request . method == 'POST' : contact_form = ContactForm ( data = request . POST ) if contact_form . is_valid (): name = request . POST . get ( 'name' , '' ) email = request . POST . get ( 'email' , '' ) content = request . POST . get ( 'content' , '' ) return redirect ( reverse ( 'contact' ) + '?OK' ) template = 'contact/contact.html' context = { 'form' : ContactForm (), } return render ( request , template , context ) contact.html <!-- Formulario de contacto --> {% if 'OK' in request.GET %} < p >< strong > Su mensaje se ha reenviado correctamente </ strong ></ p > {% endif %} < form action = \"\" method = \"POST\" > {% csrf_token %} < table > {{form.as_table}} </ table > < input type = \"submit\" value = \"Enviar\" > </ form > Maquetar formulario \u00b6 Para poder dar un aspecto visual propio a un formulario es muy sencillo: Tenemos que volver a tener en nuestro form : Sus par\u00e1metros action + method El {% csrf_token %} al principio El <input type='submit' value='Enviar'> al final En cada campo: Poner el campo del formulario A\u00f1adirle despues al final el {{form.<campo>.errors}} Modificar los estilos de cada campo en el forms.py : Dentro de cada campo modificamos el par\u00e1metro widget . A este se le pasa un tipo de campo Dentro de este tipo, generamos los elementos CSS dentro del diccionario attrs . Podemos ajustar tambi\u00e9n el tama\u00f1o con min_length o max_length . Ejemplo contact.html app contact <!-- Formulario de contacto --> {% if 'OK' in request.GET %} < p >< strong > Su mensaje se ha reenviado correctamente </ strong ></ p > {% endif %} < form action = \"\" method = \"POST\" > {% csrf_token %} < div class = \"form-group\" > < label > Nombre * </ label > < div class = \"input-group\" > {{form.name}} </ div > {{form.name.errors}} </ div > < div class = \"form-group\" > < label > Email * </ label > < div class = \"input-group\" > {{form.email}} </ div > {{form.email.errors}} </ div > < div class = \"form-group\" > < label > Mensaje * </ label > < div class = \"input-group\" > {{form.content}} </ div > {{form.content.errors}} </ div > < div class = \"text-center\" > < input type = \"submit\" class = \"btn btn-primary btn-block py-2\" value = \"Enviar\" > </ div > </ form > forms.py app contact from django import forms class ContactForm ( forms . Form ): name = forms . CharField ( label = 'Nombre' , required = True , widget = forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Escribe tu nombre' } ), min_length = 3 , max_length = 100 ) email = forms . EmailField ( label = 'Email' , required = True , widget = forms . EmailInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Escribe tu email' } ), min_length = 3 , max_length = 100 ) content = forms . CharField ( label = 'Contenido' , required = True , widget = forms . Textarea ( attrs = { 'class' : 'form-control' , 'rows' : 3 , 'placeholder' : 'Escribe tu mensaje' } ), min_length = 10 , max_length = 1000 ) Enviar emails \u00b6 Para poder enviar emails hay configurar el correo, y existen muchas opciones. En este ejemplo para pruebas uso mailtrap.io . Dentro de la demo_inbox podemos buscar la configuraci\u00f3n para Django. La copiamos y la pegamos al final del settings.py # Email config EMAIL_HOST = 'smtp.mailtrap.io' EMAIL_HOST_USER = '9e9652ad27c050' EMAIL_HOST_PASSWORD = 'a4e2f4e19b02dc' EMAIL_PORT = '2525' Para enviar el correo, el views.py de la app correspondiente: Importamos la django.core.mail.EmailMessage Dentro de esta tenemos que poner: Asunto Cuerpo Email de origen Email de destino reply_to=[<objeto-EmailMessage>] Ejemplo con views.py de la app Contact anterior from django.shortcuts import render , redirect from django.urls import reverse from django.core.mail import EmailMessage from .forms import ContactForm # Create your views here. def contact ( request ): if request . method == 'POST' : contact_form = ContactForm ( data = request . POST ) if contact_form . is_valid (): name = request . POST . get ( 'name' , '' ) email = request . POST . get ( 'email' , '' ) content = request . POST . get ( 'content' , '' ) mail = EmailMessage ( 'MiAppDjango: Hola' , f 'De { name } < { email } > \\n\\n Escribio: \\n\\n { content } ' , 'noreply@inbox.mailtrap.io' , [ 'tuemail@email.com' ], reply_to = [ email ] ) try : mail . send () except : return redirect ( reverse ( 'contact' ) + '?FAIL' ) else : return redirect ( reverse ( 'contact' ) + '?OK' ) template = 'contact/contact.html' context = { 'form' : ContactForm (), } return render ( request , template , context ) Grupos, Usuarios y permisos \u00b6 Todo se hace desde el Admin y es muy intuitivo. Lo l\u00f3gico es crear primero un grupo con unos permisos concretos (app que puede ver, editar, borrar). Luego se crea un usuario con su nombre y contrase\u00f1a. Si queremos que pueda acceder al admin debemos a\u00f1adirlo como staff . Por \u00faltimo para ver si todo funciona, accedemos al admin con el nuevo usuario. Si hay campos que queremos que aparezcan como solo lectura para cierto grupo, podemos editar el admin.py de la app con: Creamos el m\u00e9todo def get_readonly_fields(self, request, obj=None) Dentro filtramos si el usuario pertenece a un grupo o no Si pertenece a un grupo devolvemos unos readonly Si no pertenece devolvemos otros Ejemplo: Para una app social hemos creado un grupo llamado Personal . No queremos que pueda editar los campos key y name que usaremos para las RRSS. Su admin.py queda como from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) def get_readonly_fields ( self , request , obj = None ): if request . user . groups . filter ( name = 'Personal' ) . exists (): return ( 'created' , 'updated' , 'key' , 'name' ) else : return ( 'created' , 'updated' ) admin . site . register ( Link , LinkAdmin ) Hacemos las migraciones.","title":"Intermedio"},{"location":"sw/web/backend/django/intermedio/#django-intermedio","text":"TODO:","title":"Django Intermedio"},{"location":"sw/web/backend/django/intermedio/#relacion-entre-modelos","text":"Los modelos se pueden conectar, a trav\u00e9s de las claves for\u00e1neas, con dos tipos de relaciones: One-To-Many -> Uno a muchos Relacionas un campo de una tabla con varias tablas. Many-To-Many -> Machos a muchos Relacionas varios campos de una tabla con varias tablas. Ejemplo de una one-to-many con el proyecto anterior. Creamos una app blog que va a contener dos modelos, uno categor\u00eda y otro post: Cada post solo tiene un autor, pero cada autor (usuario) puede tener varias entradas (one-to-many). Si se elimina a un autor, se deben de eliminar todos sus post (en cascada). Cuando la relaci\u00f3n es one-to-many se usa un campo ForeignKey (clave for\u00e1nea). La relaci\u00f3n one-to-many es User - Post . Cada post podr\u00e1 tener varias categor\u00edas, y cada categor\u00eda puede estar en varios post (many-to-many). Cuando la relaci\u00f3n es many-to-many se usa un campo ManyToManyField La relaci\u00f3n many-to-many es Category - Post . As\u00ed que el models.py quedar\u00eda from django.db import models from django.utils.timezone import now from django.contrib.auth.models import User # Create your models here. class Category ( models . Model ): name = models . CharField ( max_length = 100 , verbose_name = 'Nombre' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'categor\u00eda' verbose_name_plural = 'categorias' ordering = [ '-created' ] def __str__ ( self ): return self . name class Post ( models . Model ): title = models . CharField ( max_length = 200 , verbose_name = 'T\u00edtulo' ) content = models . TextField ( verbose_name = 'Contenido' ) published = models . DateTimeField ( default = now , verbose_name = 'Publicado' ) image = models . ImageField ( upload_to = 'blog' , null = True , blank = True , verbose_name = 'Imagen' ) author = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = 'Autor' ) categories = models . ManyToManyField ( Category , related_name = 'get_posts' , verbose_name = 'Categor\u00edas' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'entrada' verbose_name_plural = 'entradas' ordering = [ '-created' ] def __str__ ( self ): return self . title","title":"Relaci\u00f3n entre modelos"},{"location":"sw/web/backend/django/intermedio/#personalizar-el-admin","text":"El Admin permite ser customizado, para poder tener una mejor UX. Todos los cambios para que surtan efecto tendr\u00e1n que estar hechos en el admin.py , ya sea del proyecto o de cada apps.","title":"Personalizar el Admin"},{"location":"sw/web/backend/django/intermedio/#anadir-mas-columnas","text":"Igual que ten\u00edamos el campo readonly_fields para mostrar campos ocultos, existe otro comando list_display , al cual se le pasa una tupla con todos las columnas/campos que queremos tener.","title":"A\u00f1adir m\u00e1s columnas"},{"location":"sw/web/backend/django/intermedio/#ordenar-columnas","text":"Para poder ordenador columnas se usa ordering , donde se le pasa una tupla donde se ordena en funci\u00f3n de izquierda a derecha (por ejemplo, primero por autor, luego por fecha de publicaci\u00f3n, etc).","title":"Ordenar columnas"},{"location":"sw/web/backend/django/intermedio/#formulario-de-busqueda","text":"Con search_fields y una tupla con los campos. Hay que tener cuidado porque por ejemplo, si un campo en realidad se busca por subcampos que tiene dentro, hay que especificarlo y sino dar\u00e1 error. Por ejemplo, si quiero buscar por autor, en realidad quiero buscar por su usuario. O si quiero buscar por categor\u00edas, lo que quiero encontrar es el nombre de la catego\u0155ia. La nomemclatura es <campos>__<subcampo> (2 barras bajas). Por ejemplo: ordering = ( 'author__username' , 'categories__name' )","title":"Formulario de b\u00fasqueda"},{"location":"sw/web/backend/django/intermedio/#campos-con-fechas","text":"Para los campos datetime y similares, hay que definir una jerarqu\u00eda de fechas con date_hierarchy y la tupla con los campos.","title":"Campos con fechas"},{"location":"sw/web/backend/django/intermedio/#filtros-de-busqueda","text":"Para filtrar por campos se usa list_filter seguida de la tupla de campos.","title":"Filtros de b\u00fasqueda"},{"location":"sw/web/backend/django/intermedio/#crear-campos-propios-para-los-filtros","text":"Hay campos que pueden dar problemas, por ejemplo los many-to-many. Para eso, se crea una funci\u00f3n auxiliar que devuelva lo que realmente quiero. Luego reescribo el m\u00e9todo short_description pas\u00e1ndole el nombre del nuevo campo. En la siguiente secci\u00f3n hay un ejemplo final donde se ve esto en el post_categories() .","title":"Crear campos propios para los filtros"},{"location":"sw/web/backend/django/intermedio/#ejemplo-con-todo","text":"Ejemplo en el admin.py de un blog: from django.contrib import admin from .models import Category , Post # Register your models here. class CategoryAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) class PostAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) list_display = ( 'title' , 'author' , 'published' , 'post_categories' ) ordering = ( 'author' , 'published' ) search_fields = ( 'title' , 'content' , 'author__username' , 'categories__name' ) date_hierarchy = 'published' list_filter = ( 'author__username' , 'categories__name' ,) def post_categories ( self , obj ): return ', ' . join ( [ c . name for c in obj . categories . all () . order_by ( 'name' )]) post_categories . short_description = 'Categorias' admin . site . register ( Category , CategoryAdmin ) admin . site . register ( Post , PostAdmin )","title":"Ejemplo con todo"},{"location":"sw/web/backend/django/intermedio/#filtros-opciones-en-los-template-tags","text":"En los template tags se le pueden a\u00f1adir funcionalidades a las variables que se ponen, la forma es {{ < mivariable > | < filtro > }}","title":"Filtros / opciones en los template tags"},{"location":"sw/web/backend/django/intermedio/#formatear-fechas","text":"Por ejemplo para poner un campo fecha en format DD/MM/YYYY podr\u00edamos hacer {{post.published|date:\"SHORT_DATE_FORMAT\"}}","title":"Formatear fechas"},{"location":"sw/web/backend/django/intermedio/#anadir-saltos-de-linea","text":"{{post.content|linebreaks}}","title":"A\u00f1adir saltos de l\u00ednea"},{"location":"sw/web/backend/django/intermedio/#bucles-for-primera-y-ultima-iteracion","text":"Supongamos que queremos sacar todas las catergor\u00edas de un post. Esto es una relaci\u00f3n many-to-many. Si uso {{post.categories}} Devuelve None , porque la query no se ejecuta. Para que esto no pase har\u00edamos {{post.categories.all}} Pero esto devuele algo que no es legible, lo l\u00f3gico ser\u00eda usar un bucle for as\u00ed {% for category in post.categories.all %} {{category.name}} {% endfor %} Lo que pasa que esto no los pone separados por coma. Y si pongo la coma en el bucle, tambi\u00e9n la va a poner en el \u00faltimo elemento. Para que eso no pase existe un campo forloop , que cuenta entre otras cosas con dos variables forloop.first y forloop.last . As\u00ed que ahora podr\u00edamos hacer {% for category in post.categories.all %} {{category.name}}{% if not forloop.last %}, {% end if%} {% endfor %}","title":"Bucles for - primera y \u00faltima iteraci\u00f3n"},{"location":"sw/web/backend/django/intermedio/#pasar-parametros-a-las-vistas","text":"Todos los par\u00e1metros que se pasan en la url, se toman como string , pero se pueden formatear. Si se manda un par\u00e1metro que no existe, debemos lanzar un 404 . Ejemplo: En el urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . blog , name = 'blog' ), path ( 'category/<int:category_id>' , views . category , name = 'category' ), ] En el views.py from django.shortcuts import render , get_object_or_404 from .models import Post , Category # Create your views here. def blog ( request ): template = 'blog/blog.html' context = { 'posts' : Post . objects . all ()} return render ( request , template , context ) def category ( request , category_id ): template = 'blog/category.html' category = get_object_or_404 ( Category , id = category_id ) context = { 'category' : category } return render ( request , template , context )","title":"Pasar par\u00e1metros a las vistas"},{"location":"sw/web/backend/django/intermedio/#buscar-inversamente-en-relaciones","text":"Cuando se tiene una relaci\u00f3n entre campos, se puede buscar tanto en un sentido como en otro. Ve\u00e1moslo con un ejemplo: Tenemos Post relacionado many-to-many con Category . Si quiera buscar todos los post que hay en una categoria podr\u00eda Buscar por cada post y filtrar por categor\u00eda. Buscar por categor\u00eda y sacar todos los posts La segunda opci\u00f3n de b\u00fasqueda es m\u00e1s eficiente y para hacerla tendr\u00eda que hacer {{category.post_set.all}} Pero esta forma queda bastante poco intuitiva. Para customizar esto usamos el campo related_name en el modelo del models.py class Post ( models . Model ): categories = models . ManyToManyField ( Category , related_name = \"get_posts\" ) Y ahora en el template {{category.get_posts.all}}","title":"Buscar inversamente en relaciones"},{"location":"sw/web/backend/django/intermedio/#procesador-de-contexto","text":"El contexto en programaci\u00f3n se refiere al estado de variables, objetos, etc, y su estado, que hay en un momento concreto. Cuando procesamos una vista, hasta ahora lo que devolvemos es la funci\u00f3n render a la que se le pasa: La request -> Que no deja de ser un objeto / variable que contiene informaci\u00f3n sobre la petici\u00f3n http. El template -> El html (y css+js+media) que tiene que cargar. El contexto -> Es un diccionario con variables que le pasamos para que puedan ser usadas en el template. Hay veces en las que se necesita informaci\u00f3n de una app en distintas apps. Una buena manera es extender el contexto, a\u00f1adiendo esa info de una app para poder ser consumida en las dem\u00e1s. Para hacer eso, usamos lo que se llama el Procesador de contexto . Para crear uno hacemos: En la app de la que queremos compartir su informaci\u00f3n, creamos un archivo llamado processors.py . Creamos dentro una funci\u00f3n, a la que se le pasa la request como par\u00e1metro. Dentro creamos un diccionario con informaci\u00f3n. Devolvemos ese diccionario. En el settings.py debemos de darlo de alta. Vamos a la secci\u00f3n TEMPLATES . Dentro de est\u00e1 OPTIONS , y dentro de esta se encuentra context_processors . A\u00f1adimos lo siguiente '<app>.processors.<funcion>' . Esto se ve m\u00e1s f\u00e1cil con un ejemplo, donde vamos a a\u00f1adir las RRSS a una web. Todas las RRSS est\u00e1n en una app social Crear app social y darla de alta en el settings.py Modificar su models.py . from django.db import models # Create your models here. class Link ( models . Model ): key = models . SlugField ( verbose_name = 'Nombre clave' , max_length = 100 , unique = True ) name = models . CharField ( verbose_name = 'Red social' , max_length = 200 ) url = models . URLField ( verbose_name = 'Enlace' , max_length = 200 , null = True , blank = True ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'enlace' verbose_name_plural = 'enlaces' ordering = [ 'name' ] def __str__ ( self ): return self . name Modificar el admin.py , hacer las migraciones y migrarlas from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) admin . site . register ( Link , LinkAdmin ) Como no hay vista, ni template pasamos directamente a la fase de procesador de contexto. Crear el processor.py from .models import Link def ctx_dict ( request ): ctx = {} for link in Link . objects . all (): ctx [ link . key ] = link . url return ctx Darlo de alta en el settings.py Arrancar el server, entrar al Admin y crear un par de objetos con por ejemplo las claves LINK_FACEBOOK, LINK_TWITTER y LINK_INSTAGRAM. Modificar el base.html <!-- Pi\u00e9 de p\u00e1gina --> < footer class = \"footer text-faded text-center py-5\" > < div class = \"container\" > < p class = \"m-0\" > {% if LINK_TWITTER %} < a href = \"{{LINK_TWITTER}}\" class = \"link\" > < span class = \"fa-stack fa-lg\" > < i class = \"fa fa-circle fa-stack-2x\" ></ i > < i class = \"fa fa-twitter fa-stack-1x fa-inverse\" ></ i > </ span > </ a > {% endif %} {% if LINK_FACEBOOK %} < a href = \"{{LINK_FACEBOOK}}\" class = \"link\" > < span class = \"fa-stack fa-lg\" > < i class = \"fa fa-circle fa-stack-2x\" ></ i > < i class = \"fa fa-facebook fa-stack-1x fa-inverse\" ></ i > </ span > </ a > {% endif %} {% if LINK_INSTAGRAM %} < a href = \"{{LINK_INSTAGRAM}}\" class = \"link\" > < span class = \"fa-stack fa-lg\" > < i class = \"fa fa-circle fa-stack-2x\" ></ i > < i class = \"fa fa-instagram fa-stack-1x fa-inverse\" ></ i > </ span > </ a > {% endif %} </ p > < p class = \"m-0 mbt\" > < a href = \"{% url 'sample' %}\" class = \"link\" > Pol\u00edtica de privacidad </ a > \u00b7 < a href = \"{% url 'sample' %}\" class = \"link\" > Aviso legal </ a > \u00b7 < a href = \"{% url 'sample' %}\" class = \"link\" > Cookies </ a > </ p > < p class = \"m-0 mbt1\" > &copy; La Caffettiera 2018 </ p > </ div > </ footer >","title":"Procesador de contexto"},{"location":"sw/web/backend/django/intermedio/#template-tags-propios","text":"Es una alternativa al Procesador de Contexto m\u00e1s flexible, pero tambi\u00e9n consume m\u00e1s recursos: En la app que su informaci\u00f3n sea compartida hay que crear: Carpeta templatetags Dentro un __init__.py Un fichero python, ficherotags.py , para los template tags . El ficherotags.py debe contener los template de django y el modelo de p\u00e1ginas from django import template from page.models import Page Luego hay que crear un registro de la librer\u00eda de templates register = template . Library () Ahora creamos una funci\u00f3n, <nuevotag> , con el decorador @register.simple_tag . En esa funci\u00f3n vamos a poder jugar con las p\u00e1ginas, con por ejemplo Page.objects.all() Para poder usar <nuevotag> en un template hay que cargar el fichero ficherotags.py . Ejemplo: Tenemos los t\u00edpicos links en el footer sobre las cookies y dem\u00e1s. Creamos una app pages models.py from django.db import models # Create your models here. class Page ( models . Model ): title = models . CharField ( verbose_name = 'T\u00edtulo' , max_length = 200 ) content = models . TextField ( verbose_name = 'Contenido' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'p\u00e1gina' verbose_name_plural = 'p\u00e1ginas' ordering = [ 'title' ] def __str__ ( self ): return self . title views.py from django.shortcuts import render , get_object_or_404 from .models import Page # Create your views here. def page ( request , page_id ): page = get_object_or_404 ( Page , id = page_id ) template = 'pages/sample.html' context = { 'page' : page } return render ( request , template , context ) urls.py Proyecto from django.urls import path , include urlpatterns = [ ... # Path del pages path ( 'page/' , include ( 'pages.urls' )), ... ] App pages from django.urls import path from . import views urlpatterns = [ ... path ( '<int:page_id>/' , views . page , name = 'page' ), ... ] pages/templatetags/pages_extra.py from django import template from pages.models import Page register = template . Library () @register . simple_tag def get_page_list (): pages = Page . objects . all () return pages core/templates/core/base.html {% load pages_extras %} {% get_page_list as page_list %} {% for page in page_list %} < a href = \"{% url 'page' page.id %}\" class = \"link\" > {{page.title}} </ a > {% if not forloop.last %}.{% endif %} {% endfor %}","title":"Template Tags propios"},{"location":"sw/web/backend/django/intermedio/#ordenacion-directa-de-paginas","text":"Si quisiera dar cierto orden a un tipo de elementos de una app, debemos de: En el models.py a\u00f1adir un campo por ejemplo class Page ( models . Model ): ... order = models . SmallIntegerField ( verbose_name = 'Orden' , default = 0 ) class Meta : ordering = [ 'order' ] En el admin.py class PageAdmin ( models . ModelAdmin ): ... list_display ( 'order' ) Ahora en el Admin puedo administrar pesos para obtener esa ordenaci\u00f3n.","title":"Ordenaci\u00f3n directa de p\u00e1ginas"},{"location":"sw/web/backend/django/intermedio/#edicion-directa-de-paginas","text":"En el propio procesador de contexto contamos con el usuario de la sesi\u00f3n en django.contrib.auth.context_processors.auth . As\u00ed que si queremos que ciertas partes aparezcan si un usuario est\u00e1 autenticado, podemos hacer en el template base {% if user.is_authenticated %} < p >< a href = \"{% url 'admin:<app>_<modelo>_<accion>' <objeto-id>%}\" > Editar </ a ></ p > {% endif %} Con el ejemplo anterior ser\u00eda base.html {% if user.is_authenticated %} < p >< a href = \"{% url 'admin:pages_page_change' page.id %}\" > Editar </ a ></ p > {% endif %}","title":"Edici\u00f3n directa de p\u00e1ginas"},{"location":"sw/web/backend/django/intermedio/#editor-wysiwyg-en-el-admin","text":"Para a\u00f1adir un editor wysiswyg en el Admin podemos usar el ckeditor Instalar ckeditor pip install django-ckeditor A\u00f1adirlo en las apps instaladas -> settings.py INSTALLED_APPS = [ ... 'ckeditor' , ] En el models.py de la app donde queremos tener el campo con el editor: Importamos ckeditor.fields.RichTextField Modificamos el campo deseado Hacemos las migraciones ... from ckeditor.fields import RichTextField class Page ( models . Model ): ... content = RichTextField ( verbose_name = 'Contenido' ) Si queremos redefinir la barra del editor, en el settings.py al final a\u00f1adimos # Ckeditor CKEDITOR_CONFIGS = { 'default' : { 'toolbar' : 'Basic' , } } El modo 'Basic' es el m\u00e1s simple, pero podemos poner None si queremos tener todas las opciones. Repo Oficial -> aqu\u00ed Docu Oficial -> aqu\u00ed En su repo nos viene de ejemplo esto CKEDITOR_CONFIGS = { 'default' : { 'toolbar' : 'Custom' , 'toolbar_Custom' : [ [ 'Bold' , 'Italic' , 'Underline' ], [ 'NumberedList' , 'BulletedList' , '-' , 'Outdent' , 'Indent' , '-' , 'JustifyLeft' , 'JustifyCenter' , 'JustifyRight' , 'JustifyBlock' ], [ 'Link' , 'Unlink' ], [ 'RemoveFormat' , 'Source' ] ] } } Para que el contenido creado en el editor se vea sin problemas en el template, tenemos que ponerle el filtro safe al tag donde est\u00e9 este contenido. En el ejemplo anterior en miproyecto/pages/templates/pages/sample.html {{page.content|safe}}","title":"Editor WYSIWYG en el Admin"},{"location":"sw/web/backend/django/intermedio/#formularios","text":"Para usar formularios en una app: Crear en la app forms.py Al igual que con los modelos: Importamos el \"modelo\" -> from django import forms Creamos una clase que herede del \"modelo\" -> class MiClaseForm(forms.Form): Generamos los campos del formulario, por ejemplo name = forms . CharField ( label = 'Nombre' , required = True ) email = forms . EmailField ( label = 'Email' , required = True ) content = forms . CharField ( label = 'Contenido' , required = True , widget = forms . Textarea ) En el views.py importamos el o los formularios, y los a\u00f1adimos al contexto de la vista. from django.shortcuts import render from .forms import MiClaseForm def mivista ( request ): template = 'miapp/miapp.html' context = { 'form' : MiClaseForm (), } return render ( request , template , context ) En el template lo dibujamos: Simplemente con {{form}} ya lo saca, pero totalmente desformateado. Podemos darle un formato m\u00e1s como p\u00e1rrafos {{form.as_p}} . Como si fuera una lista < ul > {{form.as_ul}} </ ul > Como una tabla < table > {{form.as_table}} </ table > Para a\u00f1adirle el bot\u00f3n de enviar: Metemos el formulario dentro de un <form> En el par\u00e1metro action ser\u00e1 la web donde ir / acci\u00f3n a hacer cuando se env\u00ede el formulario En el method el m\u00e9todo para enviar el formulario: POST es el m\u00e1s recomendado. GET no se recomienda. Dentro introducimos: Al principio {% csrf_token %} por motivos de seguridad. Al final un <input> : Con type=\"submit\" Y un texto a mostrar value=\"Enviar\" . Validar si el formulario es correcto: En la misma vista del views.py miramos si accedemos con POST con request.method == 'POST' Recupero el formulario con mi_formulario = MiClaseForm(data=request.POST) Compruebo si es valido con mi_forumulario.is_valid() Formateo los valores por defecto si alguno est\u00e1 vac\u00edo Hago una redirecci\u00f3n con la funci\u00f3n django.shortcuts.redirect Se recomiendo usar la funci\u00f3n django.urls.reverse para la redirecci\u00f3n Ejemplo de la app contact : forms.py from django import forms class ContactForm ( forms . Form ): name = forms . CharField ( label = 'Nombre' , required = True ) email = forms . EmailField ( label = 'Email' , required = True ) content = forms . CharField ( label = 'Contenido' , required = True , widget = forms . Textarea ) views.py from django.shortcuts import render , redirect from django.urls import reverse from .forms import ContactForm # Create your views here. def contact ( request ): if request . method == 'POST' : contact_form = ContactForm ( data = request . POST ) if contact_form . is_valid (): name = request . POST . get ( 'name' , '' ) email = request . POST . get ( 'email' , '' ) content = request . POST . get ( 'content' , '' ) return redirect ( reverse ( 'contact' ) + '?OK' ) template = 'contact/contact.html' context = { 'form' : ContactForm (), } return render ( request , template , context ) contact.html <!-- Formulario de contacto --> {% if 'OK' in request.GET %} < p >< strong > Su mensaje se ha reenviado correctamente </ strong ></ p > {% endif %} < form action = \"\" method = \"POST\" > {% csrf_token %} < table > {{form.as_table}} </ table > < input type = \"submit\" value = \"Enviar\" > </ form >","title":"Formularios"},{"location":"sw/web/backend/django/intermedio/#maquetar-formulario","text":"Para poder dar un aspecto visual propio a un formulario es muy sencillo: Tenemos que volver a tener en nuestro form : Sus par\u00e1metros action + method El {% csrf_token %} al principio El <input type='submit' value='Enviar'> al final En cada campo: Poner el campo del formulario A\u00f1adirle despues al final el {{form.<campo>.errors}} Modificar los estilos de cada campo en el forms.py : Dentro de cada campo modificamos el par\u00e1metro widget . A este se le pasa un tipo de campo Dentro de este tipo, generamos los elementos CSS dentro del diccionario attrs . Podemos ajustar tambi\u00e9n el tama\u00f1o con min_length o max_length . Ejemplo contact.html app contact <!-- Formulario de contacto --> {% if 'OK' in request.GET %} < p >< strong > Su mensaje se ha reenviado correctamente </ strong ></ p > {% endif %} < form action = \"\" method = \"POST\" > {% csrf_token %} < div class = \"form-group\" > < label > Nombre * </ label > < div class = \"input-group\" > {{form.name}} </ div > {{form.name.errors}} </ div > < div class = \"form-group\" > < label > Email * </ label > < div class = \"input-group\" > {{form.email}} </ div > {{form.email.errors}} </ div > < div class = \"form-group\" > < label > Mensaje * </ label > < div class = \"input-group\" > {{form.content}} </ div > {{form.content.errors}} </ div > < div class = \"text-center\" > < input type = \"submit\" class = \"btn btn-primary btn-block py-2\" value = \"Enviar\" > </ div > </ form > forms.py app contact from django import forms class ContactForm ( forms . Form ): name = forms . CharField ( label = 'Nombre' , required = True , widget = forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Escribe tu nombre' } ), min_length = 3 , max_length = 100 ) email = forms . EmailField ( label = 'Email' , required = True , widget = forms . EmailInput ( attrs = { 'class' : 'form-control' , 'placeholder' : 'Escribe tu email' } ), min_length = 3 , max_length = 100 ) content = forms . CharField ( label = 'Contenido' , required = True , widget = forms . Textarea ( attrs = { 'class' : 'form-control' , 'rows' : 3 , 'placeholder' : 'Escribe tu mensaje' } ), min_length = 10 , max_length = 1000 )","title":"Maquetar formulario"},{"location":"sw/web/backend/django/intermedio/#enviar-emails","text":"Para poder enviar emails hay configurar el correo, y existen muchas opciones. En este ejemplo para pruebas uso mailtrap.io . Dentro de la demo_inbox podemos buscar la configuraci\u00f3n para Django. La copiamos y la pegamos al final del settings.py # Email config EMAIL_HOST = 'smtp.mailtrap.io' EMAIL_HOST_USER = '9e9652ad27c050' EMAIL_HOST_PASSWORD = 'a4e2f4e19b02dc' EMAIL_PORT = '2525' Para enviar el correo, el views.py de la app correspondiente: Importamos la django.core.mail.EmailMessage Dentro de esta tenemos que poner: Asunto Cuerpo Email de origen Email de destino reply_to=[<objeto-EmailMessage>] Ejemplo con views.py de la app Contact anterior from django.shortcuts import render , redirect from django.urls import reverse from django.core.mail import EmailMessage from .forms import ContactForm # Create your views here. def contact ( request ): if request . method == 'POST' : contact_form = ContactForm ( data = request . POST ) if contact_form . is_valid (): name = request . POST . get ( 'name' , '' ) email = request . POST . get ( 'email' , '' ) content = request . POST . get ( 'content' , '' ) mail = EmailMessage ( 'MiAppDjango: Hola' , f 'De { name } < { email } > \\n\\n Escribio: \\n\\n { content } ' , 'noreply@inbox.mailtrap.io' , [ 'tuemail@email.com' ], reply_to = [ email ] ) try : mail . send () except : return redirect ( reverse ( 'contact' ) + '?FAIL' ) else : return redirect ( reverse ( 'contact' ) + '?OK' ) template = 'contact/contact.html' context = { 'form' : ContactForm (), } return render ( request , template , context )","title":"Enviar emails"},{"location":"sw/web/backend/django/intermedio/#grupos-usuarios-y-permisos","text":"Todo se hace desde el Admin y es muy intuitivo. Lo l\u00f3gico es crear primero un grupo con unos permisos concretos (app que puede ver, editar, borrar). Luego se crea un usuario con su nombre y contrase\u00f1a. Si queremos que pueda acceder al admin debemos a\u00f1adirlo como staff . Por \u00faltimo para ver si todo funciona, accedemos al admin con el nuevo usuario. Si hay campos que queremos que aparezcan como solo lectura para cierto grupo, podemos editar el admin.py de la app con: Creamos el m\u00e9todo def get_readonly_fields(self, request, obj=None) Dentro filtramos si el usuario pertenece a un grupo o no Si pertenece a un grupo devolvemos unos readonly Si no pertenece devolvemos otros Ejemplo: Para una app social hemos creado un grupo llamado Personal . No queremos que pueda editar los campos key y name que usaremos para las RRSS. Su admin.py queda como from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) def get_readonly_fields ( self , request , obj = None ): if request . user . groups . filter ( name = 'Personal' ) . exists (): return ( 'created' , 'updated' , 'key' , 'name' ) else : return ( 'created' , 'updated' ) admin . site . register ( Link , LinkAdmin ) Hacemos las migraciones.","title":"Grupos, Usuarios y permisos"},{"location":"sw/web/backend/django/principiante/","text":"Django Principiante \u00b6 TODO: Vamos a ver como empezar con Django a trav\u00e9s de un mini ejemplo. Crear proyecto Django \u00b6 Instalamos Django pip install django Django CLI \u00b6 Django tiene un CLI (menu de comandos) llamado django-admin que es con el que se trabaja. Desde una terminal donde este Django instalado lo ejecutamos y salen todas las opciones que tiene django-admin Crear Proyecto \u00b6 Para crear nuestro primer proyecto hacemos django-admin startproject <proyecto> Veremos que se ha generado una con la siguiente estructura (supongamos que he llamado al proyecto miproyecto ): miproyecto -> Proyecto Django miproyecto -> App principal del proyecto, contiene configuracion inicial y despliegue. init .py -> Para inicializar el proyecto e indicar que es un paquete. settings.py -> Toda la configuraci\u00f3n del proyecto Django. urls.py -> Punto de entrada de todas nuestras peticiones http (ver una web, consumir un webservice, etc). wsgi.py -> Encargado del despliegue (implementar el protocolo WSGI que usan todas las apps webs hechas en Python). manage.py -> Script para gestionar el proyecto desde la terminal. El otro CLI con el que cuenta Django es ese \u00faltimo fichero llamado manage.py . Si lo ejecutamos en la terminal tal cual, veremos todas las opciones que tiene (ordenadas ademas por tem\u00e1ticas). Lanzar servidor \u00b6 Si ejecutamos ahora el comando python manage.py runserver Veremos como ha arrancado un servidor de pruebas para poder ver desde el navegador (http://127.0.0.1:8000) nuestro proyecto Django. Para pararlo es tan f\u00e1cil como usar Ctrl+C Sincronizar BBDD -> Migraciones \u00b6 Una vez arrancado, necesitamos generar las bases de datos y dem\u00e1s. Paramos el servidor y hacemos python manage.py migrate Primera app -> Core \u00b6 Un proyecto Django est\u00e1 compuesto por muchas apps. Todas estas apps son independientes y pueden compartir recursos. Aparte de la app principal, la que se llama igual que el proyecto, se suele crear otra \"central\" llamada CORE . Para crear una app se hace python manage.py startapp <app> En este caso creamos core , y al hacerlo se crea una carpeta core con los siguientes ficheros: core migrations -> Carpeta donde se guardan los cambios del modelo de la bbdd init .py -> Definir paquete admin.py -> Fichero encargado de la configuracion de la app en el Django Admin apps.py -> Configuracion de la app. models.py -> Es donde se definen el modelo de la bbdd para la app. tests.py -> Fichero de pruebas. views.py -> Es donde se definen las Vistas (las funciones / clases que se ejecutan cuando se accede a una url). Vistas \u00b6 Cada vez que marca una url en el navegador, el proceso que sigue Django para ofrecer la web es el siguiente: Se entra al fichero urls.py de la app principal del proyecto (la que se llama como el propio proyecto). En ese fichero se busca en que vista despacha esa url. Puede haber una vista definida. Puede haber una redicci\u00f3n a otro fichero urls.py de la app encargada de despachar esa vista. Dentro del urls.py final se indica que vista del views.py de la app ejecuta. En el views.py de la app se ejecuta la vista correspondiente y se devuelve la respuesta para el navegador. Existen 2 tipos de vistas: Function views -> El encargado de generar la vista es una funci\u00f3n. Son para vistas que apenas tienen operaciones, m\u00e1s simples. Class-based views -> El encargado de generar la vista es una clase. Son para vistas mas complejas. Son las m\u00e1s usadas. Ejemplo de como se carga una vista en el navegador \u00b6 Un ejemplo donde se pasa por urls.py de miproyecto que redirecciona al urls.py de core y despacha la function view home : miproyecto -> urls.py from django.urls import path , include urlpatterns = [ # Path del core path ( '' , include ( 'core.urls' )), ] core -> urls.py from django.urls import path from core import views urlpatterns = [ path ( '' , views . home , name = 'home' ), ] core -> views.py from django.shortcuts import HttpResponse def home ( request ): return HttpResponse ( '<h1>Vista home</h1>' ) Templates \u00b6 En el ejemplo anterior pon\u00edamos c\u00f3digo HTML, a pelo , para generar las vistas. Esto no es ni \u00f3ptimo ni escalable. Lo normal es usar plantillas HTML / templates, que son ficheros HTML que se van a usar para generar cada vista. Para usar templates en una app hay que crear dentro de la app: Carpeta templates . Dentro de esta otra carpeta que se llama igual que la app. Es decir que en core tendr\u00edamos miproyecto core templates core Esto se hace as\u00ed porque Django cuando se despliega el proyecto, busca todas las carpetas templates dentro de cada app y mete lo que haya dentro en una carpeta templates gen\u00e9rica para \u00e9l. Supongamos que hemos creado el fichero home.html en el directorio miproyecto/core/templates/core , la forma de despacharlo en views.py de core se hace: Poner la app core en el settings.py del proyecto Django # Application definition INSTALLED_APPS = [ 'core.apps.CoreConfig' , 'portfolio.apps.PortfolioConfig' , 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , ] Modificar el views.py con from django.shortcuts import render def home ( request ): # Template -> fichero html para devolver template = 'core/home.html' # Context -> diccionario con variables para el html context = { mivariable : 'Hola home' } return render ( request , template , context ) Herencia \u00b6 La gracia de las plantillas es poder reutilizar c\u00f3digo html. Lo normal es definir una plantilla base, base.html , o varias, y reusarla en las dem\u00e1s. Creo un fichero base.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > {% block title %}{% endblock %} </ title > </ head > < body > <!-- Cabecera --> {% block header %}{% endblock %} <!-- Contenido --> {% block content %}{% endblock %} <!-- Pie de p\u00e1gina --> {% block footer %}{% endblock %} </ body > </ html > Las partes que van entre {% block <bloque> %}{% endblock %} , ser\u00e1n las partes que se har\u00e1n en cada fichero a parte. Todo lo dem\u00e1s es com\u00fan. Ahora en el home.html har\u00edamos lo siguiente {% extends 'core/base.html' %} {% block title %}Home{% endblock %} {% block header %} < h1 > HOME </ h1 > {% endblock %} {% block content %} < h2 > {{ mivariable }} </ h2 > {% endblock %} {% block footer %} < p > Footer de la home </ p > {% endblock %} Extendemos la plantilla base Generamos el contenido de cada bloque Si se pasa alguna variable en el context de la vista, podemos ponerla con {{ <variable> }} Enlaces relativos \u00b6 Si queremos enlazar entre secciones de nuestra web, la manera de hacerlo es usando {% url < vista > %} Por ejemplo {% url 'home' %} . El nombre de la vista, es decir, <vista> lo hemos definido en el urls.py anteriormente. Cargas ficheros est\u00e1ticos (CSS, JS, img, media...) \u00b6 Para poder cargar los estilos, im\u00e1genes, scripts JS, etc, primero hay que crear una carpeta donde los contenga. Esta carpeta va a seguir el mismo princpio que la carpeta templates , pero se va a llamar static . Es decir, que dentro de cada app que tenga ficheros est\u00e1ticos tendremos: < proyecto-django > < app > static < app > Ya que luego Django recolectar\u00e1 todas las carpetas static en una static com\u00fan. En nuestro ejemplo tendr\u00edamos miproyecto/core/static/core/ . Una vez hecho esto, lo siguiente ser\u00e1 en el base.html y cada plantilla poner lo siguiente: {% load static %} Tanto en el <head></head> del base.html . Como en cada plantilla, solo se debe poner una vez : Puede ser al principio, despues del {% entends '<app>/base.html' %} . Como dentro de un {% block <bloque> %}{% endblock %} . Luego en cada enlace hacia el fichero est\u00e1tico, ponemos \"{% static '<app>/<path-al-estatico>' %}\" . Un ejemplo podr\u00eda ser < head > <!-- Estilos y fuentes --> {% load static %} < link href = \"{% static 'core/bootstrap/css/bootstrap.min.css' %}\" rel = \"stylesheet\" > </ head > < body > < script src = \"{% static 'core/jquery/jquery.min.js' %}\" ></ script > </ body > Templates tags \u00b6 Dentro de este sistema de plantillas lo que hemos estado usando se llaman Template Tags -> informaci\u00f3n oficial aqu\u00ed Existen muchos, como por ejemplo el {% block <bloque> %}{% endblock %} , o cuando queremos referirnos a una variable del contexto que usamos {{ variable }} . Django permite muchos y muy diversos, como por ejemplo el t\u00edpico if , for , y dem\u00e1s. Tambi\u00e9n hay una variable de la propia web que es request y esta a su vez contiene m\u00e1s variables e informaci\u00f3n, como request.path , que indica en que path tenemos en la url. Por ejemplo, supongamos que queremos ver un salto de l\u00ednea en cierto sitio, si y solo si, si estoy en la home. La forma de hacerlo ser\u00eda, en el <body> del base.html : {% if request.path != \"/home/\" %} < hr > {% endif %} Modelos \u00b6 Django cuenta con su propio ORM para trabajar con las BBDD y trabaja siguiendo el paradigma MVT (Modelo Vista Template). Cada modelo es una clase heredar\u00e1 de una clase Modelo especifica. Por ejemplo supongamos que queremos tener una secci\u00f3n que va a ser un proyecto, y cada proyecto contiene un t\u00edtulo, una descripci\u00f3n y una imagen. Esto lo modelar\u00edamos en bbdd de la siguiente manera from django.db import models class Project ( models . Model ): title = models . CharField ( max_length = 200 ) description = models . TextField () image = models . ImageField () link = models . UrlField ( null = True , blank = True ) # null para permitir nulo en bbdd, blank para permitir vac\u00edo en html created = models . DateTimeField ( auto_now_add = True ) updated = models . DateTimeField ( auto_now = True ) Se han a\u00f1adido dos campos para poder tener un control de cuando se cre\u00f3, created , y cuando se ha actualizado, updated . Para aplicar estos cambios a la bbdd tenemos que hacer python manage.py makemigrations [ <app> ] Si queremos ponemos la app especifica, o sino no ponemos nada y har\u00e1 todas las apps. Despu\u00e9s de hacer las migraciones, tenemos que aplicarlas, para ello python manage.py migrate [ <app> ] Django Admin \u00b6 En el urls.py del proyecto tenemos una redirecci\u00f3n a una cosa llamada admin path ( 'admin/' , admin . site . urls ), Si en el navegador lo abrimos, veremos que sale un login. Esto es una herramienta potent\u00edsima que tiene Django, el Panel de Administrador . Crear superusuario \u00b6 Para poder acceder a \u00e9l necesitamos crear primero el superusuario del proyecto python manage.py createsuperuser Completamos el registro y volvemos a acceder al Django Admin con este usuario nuevo creado. Habilitar Modelo \u00b6 Para poder trabajar con un modelo de una app debemos hacer lo siguiente en el fichero admin.py de la app correspondiente. Por ejemplo para el /miproyecto/core/admin.py tengo que poner from django.contrib import admin from .models import Project admin . site . register ( Project ) Ahora podremos manipular el modelo desde el Admin. Tunear el Admin \u00b6 Cambiar nombre de la app \u00b6 En el fichero apps.py de la app, debemos de a\u00f1adir el campo verbose_name con el nombre que queramos. Por ejemplo a la app core la voy a llamar principal, as\u00ed que el /miproyecto/core/apps.py debe quedar as\u00ed from django.apps import AppConfig class CoreConfig ( AppConfig ): name = 'core' vebose_name = 'Principal' Recordemos que en el /miproyecto/miproyecto/settings.py en la parte de apps instaladas debe aparecer INSTALLED_APPS = [ 'core.apps.CoreConfig' , ... ] Cambiar nombre del modelo \u00b6 Dentro de la clase del modelo, debemos crear una subclase llamada Meta (para metadata) y debe contener el atributo verbose_name . Si queremos que luego cada objeto de ese modelo tenga un nombre m\u00e1s f\u00e1cil de leer, debemos a\u00f1adir el m\u00e9todo __str__ a la clase del modelo. Por \u00faltimo, para que cada campo aparezca con el nombre que queramos, le a\u00f1adimos el par\u00e1metro verbose_name a cada campo del modelo. Siguiendo con el ejemplo, en /miproyecto/core/models.py pondremos al modelo Project el nombre Proyecto . Adem\u00e1s le vamos a a\u00f1adir el plural, y vamos a permitir que se ordene por fecha de creaci\u00f3n m\u00e1s nueva a m\u00e1s vieja (con -created , si hubieramos puesto solo created ser\u00eda de m\u00e1s antiguo al m\u00e1s nuevo). Para el nombre de cada proyecto le vamos a poner su t\u00edtulo: from django.db import models class Project ( models . Model ): title = models . CharField ( max_length = 200 , verbose_name = 'Titulo' ) description = models . TextField ( verbose_name = 'Descripci\u00f3n' ) image = models . ImageField ( verbose_name = 'Imagen' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'proyecto' verbose_name_plural = 'proyectos' ordering = [ '-created' ] def __str__ ( self ): return self . title Los campos created y updated Django los oculta por defecto, ya que son de solo lectura. Para hacer que aparecan debemos de Modificar el admin.py de la app Creando un modelo extendido para el Admin Pas\u00e1ndole una tupla con los campos de solo lectura. A\u00f1adiendo el modelo extendido al admin. /miproyecto/ /admin.py from django.contrib import admin from .models import < Modelo > class < Modelo > Admin ( admin . ModelAdmin ): readonly_fields = ( '<campo1>' , '<campo2>' ) admin . site . register ( < Modelo > , < Modelo > Admin ) Lo vemos m\u00e1s f\u00e1cil con el ejemplo que estamos haciendo, el /miproyecto/core/admin.py tiene que quedar as\u00ed from django.contrib import admin from .models import Project class ProjectAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) admin . site . register ( Project , ProjectAdmin ) Servir ficheros multimedia \u00b6 Django por defecto no puede servir ficheros multimedia (im\u00e1genes, v\u00eddeos, etc). Los pasos para habilitarlos son Crear una carpeta com\u00fan llamada media por ejemplo, y estar\u00eda al mismo nivel que las apps, es decir /media. En el settings.py ( / /settings.py) del proyecto debemos de indicarle donde est\u00e1 la carpeta de estos archivos con # Media files MEDIA_URL = '/media/' # Ruta del navegador para encontrarlos MEDIA_ROOT = os . path . join ( BASE_DIR , 'media' ) # Ruta para encontrarlos dentro del Django Si en el modelo tenemos alg\u00fan formulario donde los usuarios pueden subir este tipo de ficheros, debemos a\u00f1adirle el par\u00e1metro upload_to con el nombre del directorio que tendr\u00e1 dentro de la carpeta media Por ejemplo en el /miproyecto/core/models.py hacemos que las im\u00e1genes de los proyectos las guarde en la carpeta /miproyecto/media/projects que Django generar\u00e1 autom\u00e1ticamente con class Project ( models . Model ): ... image = models . ImageField ( verbose_name = 'Imagen' , upload_to = 'projects' ) Ahora tenemos que habilitar una url para el directorio media , pero que solo sea accesible cuando estamos en modo debug . Modificar el urls.py del proyecto ( / /urls.py) con from django.conf import settings urlpatterns = [ ... ] if settings . DEBUG : from django.conf.urls.static import static urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) MVT Modelo-Vista-Template \u00b6 Django se basa en el paradigma MVT, que est\u00e1 basado en el MVC (Modelo-Vista-Controlador). Estos paradigmas indican b\u00e1sicamente como es el flujo de trabajo y a la vez permiten desacoplar las distintas partes del proyecto. Es un poco lioso al principio si vienes del MVC. En el MVC tienes: Modelo -> Como est\u00e1 creada y almacenada la informaci\u00f3n (BBDD). Vista -> Es la parte encargada de la interfaz visual (Frontend). Controlador -> Como se manipula y trabaja con la informaci\u00f3n detr\u00e1s de la interfaz (Backend). En el MVT hay: Modelo -> Igual que el anterior (BBDD). Vista -> Equivale en realidad al Controlador (Backend). Por eso dec\u00eda que es lioso, porque al Controlador en Django se le llama Vista. Y a la Vista se le llama Template. Template -> Equivale a la Vista (Frontend). Hay que tener en cuenta que MVT define el flujo de desarrollo . En el MVT nosotros desarrollamos siguiendo estos pasos: MODELO models.py -> Creamos / modificamos el Modelo (BBDD). admin.py -> Habilitamos las opciones que sean necesarias en el Admin. VISTA views.py -> Creamos / modificamos la Vista (Backend). urls.py -> Habilitamos el acceso a trav\u00e9s de la web a esa vista. TEMPLATE templates/<app>/ -> Creamos / modificamos la Template (Frontend). static/<app>/ -> Creamos / modificamos los est\u00e1ticos (CSS's, JS's). NOTA : Un mnem\u00f3nico para recordar esto es MAVUTS -> Models.py Admin.py Views.py Urls.py Templates Static. Pero el flujo que sigue Django para servir una web en un enlace concreto es: El navegador hace una petici\u00f3n a una url concreta. Eso entra por el urls.py del proyecto y se redirecciona hasta llegar al urls.py de la app concreta. De ah\u00ed se pasa a la vista, views.py . El views.py interactua con la bbdd gracias al models.py . Despu\u00e9s computar toda la info, devuelve la template espec\u00edfica, <app>/templates/<app>/<vista>.html , ya formateada (con los tags sustituidos por su valor final). El navegador renderiza el fichero y sirve la web. Ejemplo pr\u00e1ctico \u00b6 Para que tu editor no te de problemas, se recomienda instalar el linter pylint-django . Para activarlo hay que hacer: Editar los pylintArgs con --errors-only --load-plugins pytlint_django Supongamos que vamos a querer tener una secci\u00f3n portfolio en esta web, llena de los proyectos. Lo primero ser\u00e1 crear la app portfolio python manage.py startapp portfolio Tendremos nuestra nueva app portfolio junto con core y miproyecto . Una vez creada, damos de alta la app en el settings.py del proyecto INSTALLED_APPS = [ 'portfolio.apps.PortfolioConfig' , ] Modelo -> models.py : Quitamos Projects del modelo de core (en su models.py ) y nos lo llevamos al models.py de portfolio . Hacemos las migraciones en la base de datos con python manage.py makemigrations python manage.py migrate Admin -> admin.py : Quitamos el Projects de core del Admin en su admin.py . Damos de alta Projects de portfolio en el Admin con su admin.py . Vista -> views.py : Creamos la vista portfolio en el views.py . Podemmos usar el modelo en la vista de la siguiente manera from django.shortcuts import render from .models import Project def portfolio ( request ): template = 'portfolio/portfolio.html' projects = Project . objects . all () context = { 'projects' : projects } return render ( request , template , context ) Urls -> urls.py : En el urls.py del proyecto redireccionamos al urls.py de portfolio from django.urls import path , include urlpatterns = [ path ( 'portfolio/' , include ( 'portfolio.urls' )), ] En el urls.py de portfolio enlazamos la vista creada. from django.urls import path from . import views urlpatterns = [ path ( '' , views . portfolio , name = 'portfolio' ), ] Template -> miproyecto/portfolio/templates/portfolio/<plantilla>.html Creamos el template miproyecto/portfolio/templates/portfolio/portfolio.html . Dentro de esta template, heredamos del base.html del templates de core . Un ejemplo de como podr\u00edamos usar el modelo dentro de la plantilla podria ser un template-tag {% for %} , ya que le hemos pasado todos los proyectos. {% extends 'core/base.html' %} {% load static %} {% block title%}Portfolio{% endblock%} ... {% block content%} < ul > {% for project in projects %} < li > T\u00edtulo: {{project.title}} Descripci\u00f3n: {{project.description}} Imagen: {{project.image.url}} </ li > {% endfor %} </ ul > {% endblock } Static -> miproyecto/portfolio/static/portfolio/<archivos> si necesito cualquier est\u00e1tico lo uso en portfolio.html con {% static 'portfolio/ < fichero-estatico > ' %}","title":"Principiante"},{"location":"sw/web/backend/django/principiante/#django-principiante","text":"TODO: Vamos a ver como empezar con Django a trav\u00e9s de un mini ejemplo.","title":"Django Principiante"},{"location":"sw/web/backend/django/principiante/#crear-proyecto-django","text":"Instalamos Django pip install django","title":"Crear proyecto Django"},{"location":"sw/web/backend/django/principiante/#django-cli","text":"Django tiene un CLI (menu de comandos) llamado django-admin que es con el que se trabaja. Desde una terminal donde este Django instalado lo ejecutamos y salen todas las opciones que tiene django-admin","title":"Django CLI"},{"location":"sw/web/backend/django/principiante/#crear-proyecto","text":"Para crear nuestro primer proyecto hacemos django-admin startproject <proyecto> Veremos que se ha generado una con la siguiente estructura (supongamos que he llamado al proyecto miproyecto ): miproyecto -> Proyecto Django miproyecto -> App principal del proyecto, contiene configuracion inicial y despliegue. init .py -> Para inicializar el proyecto e indicar que es un paquete. settings.py -> Toda la configuraci\u00f3n del proyecto Django. urls.py -> Punto de entrada de todas nuestras peticiones http (ver una web, consumir un webservice, etc). wsgi.py -> Encargado del despliegue (implementar el protocolo WSGI que usan todas las apps webs hechas en Python). manage.py -> Script para gestionar el proyecto desde la terminal. El otro CLI con el que cuenta Django es ese \u00faltimo fichero llamado manage.py . Si lo ejecutamos en la terminal tal cual, veremos todas las opciones que tiene (ordenadas ademas por tem\u00e1ticas).","title":"Crear Proyecto"},{"location":"sw/web/backend/django/principiante/#lanzar-servidor","text":"Si ejecutamos ahora el comando python manage.py runserver Veremos como ha arrancado un servidor de pruebas para poder ver desde el navegador (http://127.0.0.1:8000) nuestro proyecto Django. Para pararlo es tan f\u00e1cil como usar Ctrl+C","title":"Lanzar servidor"},{"location":"sw/web/backend/django/principiante/#sincronizar-bbdd-migraciones","text":"Una vez arrancado, necesitamos generar las bases de datos y dem\u00e1s. Paramos el servidor y hacemos python manage.py migrate","title":"Sincronizar BBDD -&gt; Migraciones"},{"location":"sw/web/backend/django/principiante/#primera-app-core","text":"Un proyecto Django est\u00e1 compuesto por muchas apps. Todas estas apps son independientes y pueden compartir recursos. Aparte de la app principal, la que se llama igual que el proyecto, se suele crear otra \"central\" llamada CORE . Para crear una app se hace python manage.py startapp <app> En este caso creamos core , y al hacerlo se crea una carpeta core con los siguientes ficheros: core migrations -> Carpeta donde se guardan los cambios del modelo de la bbdd init .py -> Definir paquete admin.py -> Fichero encargado de la configuracion de la app en el Django Admin apps.py -> Configuracion de la app. models.py -> Es donde se definen el modelo de la bbdd para la app. tests.py -> Fichero de pruebas. views.py -> Es donde se definen las Vistas (las funciones / clases que se ejecutan cuando se accede a una url).","title":"Primera app -&gt; Core"},{"location":"sw/web/backend/django/principiante/#vistas","text":"Cada vez que marca una url en el navegador, el proceso que sigue Django para ofrecer la web es el siguiente: Se entra al fichero urls.py de la app principal del proyecto (la que se llama como el propio proyecto). En ese fichero se busca en que vista despacha esa url. Puede haber una vista definida. Puede haber una redicci\u00f3n a otro fichero urls.py de la app encargada de despachar esa vista. Dentro del urls.py final se indica que vista del views.py de la app ejecuta. En el views.py de la app se ejecuta la vista correspondiente y se devuelve la respuesta para el navegador. Existen 2 tipos de vistas: Function views -> El encargado de generar la vista es una funci\u00f3n. Son para vistas que apenas tienen operaciones, m\u00e1s simples. Class-based views -> El encargado de generar la vista es una clase. Son para vistas mas complejas. Son las m\u00e1s usadas.","title":"Vistas"},{"location":"sw/web/backend/django/principiante/#ejemplo-de-como-se-carga-una-vista-en-el-navegador","text":"Un ejemplo donde se pasa por urls.py de miproyecto que redirecciona al urls.py de core y despacha la function view home : miproyecto -> urls.py from django.urls import path , include urlpatterns = [ # Path del core path ( '' , include ( 'core.urls' )), ] core -> urls.py from django.urls import path from core import views urlpatterns = [ path ( '' , views . home , name = 'home' ), ] core -> views.py from django.shortcuts import HttpResponse def home ( request ): return HttpResponse ( '<h1>Vista home</h1>' )","title":"Ejemplo de como se carga una vista en el navegador"},{"location":"sw/web/backend/django/principiante/#templates","text":"En el ejemplo anterior pon\u00edamos c\u00f3digo HTML, a pelo , para generar las vistas. Esto no es ni \u00f3ptimo ni escalable. Lo normal es usar plantillas HTML / templates, que son ficheros HTML que se van a usar para generar cada vista. Para usar templates en una app hay que crear dentro de la app: Carpeta templates . Dentro de esta otra carpeta que se llama igual que la app. Es decir que en core tendr\u00edamos miproyecto core templates core Esto se hace as\u00ed porque Django cuando se despliega el proyecto, busca todas las carpetas templates dentro de cada app y mete lo que haya dentro en una carpeta templates gen\u00e9rica para \u00e9l. Supongamos que hemos creado el fichero home.html en el directorio miproyecto/core/templates/core , la forma de despacharlo en views.py de core se hace: Poner la app core en el settings.py del proyecto Django # Application definition INSTALLED_APPS = [ 'core.apps.CoreConfig' , 'portfolio.apps.PortfolioConfig' , 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , ] Modificar el views.py con from django.shortcuts import render def home ( request ): # Template -> fichero html para devolver template = 'core/home.html' # Context -> diccionario con variables para el html context = { mivariable : 'Hola home' } return render ( request , template , context )","title":"Templates"},{"location":"sw/web/backend/django/principiante/#herencia","text":"La gracia de las plantillas es poder reutilizar c\u00f3digo html. Lo normal es definir una plantilla base, base.html , o varias, y reusarla en las dem\u00e1s. Creo un fichero base.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > {% block title %}{% endblock %} </ title > </ head > < body > <!-- Cabecera --> {% block header %}{% endblock %} <!-- Contenido --> {% block content %}{% endblock %} <!-- Pie de p\u00e1gina --> {% block footer %}{% endblock %} </ body > </ html > Las partes que van entre {% block <bloque> %}{% endblock %} , ser\u00e1n las partes que se har\u00e1n en cada fichero a parte. Todo lo dem\u00e1s es com\u00fan. Ahora en el home.html har\u00edamos lo siguiente {% extends 'core/base.html' %} {% block title %}Home{% endblock %} {% block header %} < h1 > HOME </ h1 > {% endblock %} {% block content %} < h2 > {{ mivariable }} </ h2 > {% endblock %} {% block footer %} < p > Footer de la home </ p > {% endblock %} Extendemos la plantilla base Generamos el contenido de cada bloque Si se pasa alguna variable en el context de la vista, podemos ponerla con {{ <variable> }}","title":"Herencia"},{"location":"sw/web/backend/django/principiante/#enlaces-relativos","text":"Si queremos enlazar entre secciones de nuestra web, la manera de hacerlo es usando {% url < vista > %} Por ejemplo {% url 'home' %} . El nombre de la vista, es decir, <vista> lo hemos definido en el urls.py anteriormente.","title":"Enlaces relativos"},{"location":"sw/web/backend/django/principiante/#cargas-ficheros-estaticos-css-js-img-media","text":"Para poder cargar los estilos, im\u00e1genes, scripts JS, etc, primero hay que crear una carpeta donde los contenga. Esta carpeta va a seguir el mismo princpio que la carpeta templates , pero se va a llamar static . Es decir, que dentro de cada app que tenga ficheros est\u00e1ticos tendremos: < proyecto-django > < app > static < app > Ya que luego Django recolectar\u00e1 todas las carpetas static en una static com\u00fan. En nuestro ejemplo tendr\u00edamos miproyecto/core/static/core/ . Una vez hecho esto, lo siguiente ser\u00e1 en el base.html y cada plantilla poner lo siguiente: {% load static %} Tanto en el <head></head> del base.html . Como en cada plantilla, solo se debe poner una vez : Puede ser al principio, despues del {% entends '<app>/base.html' %} . Como dentro de un {% block <bloque> %}{% endblock %} . Luego en cada enlace hacia el fichero est\u00e1tico, ponemos \"{% static '<app>/<path-al-estatico>' %}\" . Un ejemplo podr\u00eda ser < head > <!-- Estilos y fuentes --> {% load static %} < link href = \"{% static 'core/bootstrap/css/bootstrap.min.css' %}\" rel = \"stylesheet\" > </ head > < body > < script src = \"{% static 'core/jquery/jquery.min.js' %}\" ></ script > </ body >","title":"Cargas ficheros est\u00e1ticos (CSS, JS, img, media...)"},{"location":"sw/web/backend/django/principiante/#templates-tags","text":"Dentro de este sistema de plantillas lo que hemos estado usando se llaman Template Tags -> informaci\u00f3n oficial aqu\u00ed Existen muchos, como por ejemplo el {% block <bloque> %}{% endblock %} , o cuando queremos referirnos a una variable del contexto que usamos {{ variable }} . Django permite muchos y muy diversos, como por ejemplo el t\u00edpico if , for , y dem\u00e1s. Tambi\u00e9n hay una variable de la propia web que es request y esta a su vez contiene m\u00e1s variables e informaci\u00f3n, como request.path , que indica en que path tenemos en la url. Por ejemplo, supongamos que queremos ver un salto de l\u00ednea en cierto sitio, si y solo si, si estoy en la home. La forma de hacerlo ser\u00eda, en el <body> del base.html : {% if request.path != \"/home/\" %} < hr > {% endif %}","title":"Templates tags"},{"location":"sw/web/backend/django/principiante/#modelos","text":"Django cuenta con su propio ORM para trabajar con las BBDD y trabaja siguiendo el paradigma MVT (Modelo Vista Template). Cada modelo es una clase heredar\u00e1 de una clase Modelo especifica. Por ejemplo supongamos que queremos tener una secci\u00f3n que va a ser un proyecto, y cada proyecto contiene un t\u00edtulo, una descripci\u00f3n y una imagen. Esto lo modelar\u00edamos en bbdd de la siguiente manera from django.db import models class Project ( models . Model ): title = models . CharField ( max_length = 200 ) description = models . TextField () image = models . ImageField () link = models . UrlField ( null = True , blank = True ) # null para permitir nulo en bbdd, blank para permitir vac\u00edo en html created = models . DateTimeField ( auto_now_add = True ) updated = models . DateTimeField ( auto_now = True ) Se han a\u00f1adido dos campos para poder tener un control de cuando se cre\u00f3, created , y cuando se ha actualizado, updated . Para aplicar estos cambios a la bbdd tenemos que hacer python manage.py makemigrations [ <app> ] Si queremos ponemos la app especifica, o sino no ponemos nada y har\u00e1 todas las apps. Despu\u00e9s de hacer las migraciones, tenemos que aplicarlas, para ello python manage.py migrate [ <app> ]","title":"Modelos"},{"location":"sw/web/backend/django/principiante/#django-admin","text":"En el urls.py del proyecto tenemos una redirecci\u00f3n a una cosa llamada admin path ( 'admin/' , admin . site . urls ), Si en el navegador lo abrimos, veremos que sale un login. Esto es una herramienta potent\u00edsima que tiene Django, el Panel de Administrador .","title":"Django Admin"},{"location":"sw/web/backend/django/principiante/#crear-superusuario","text":"Para poder acceder a \u00e9l necesitamos crear primero el superusuario del proyecto python manage.py createsuperuser Completamos el registro y volvemos a acceder al Django Admin con este usuario nuevo creado.","title":"Crear superusuario"},{"location":"sw/web/backend/django/principiante/#habilitar-modelo","text":"Para poder trabajar con un modelo de una app debemos hacer lo siguiente en el fichero admin.py de la app correspondiente. Por ejemplo para el /miproyecto/core/admin.py tengo que poner from django.contrib import admin from .models import Project admin . site . register ( Project ) Ahora podremos manipular el modelo desde el Admin.","title":"Habilitar Modelo"},{"location":"sw/web/backend/django/principiante/#tunear-el-admin","text":"","title":"Tunear el Admin"},{"location":"sw/web/backend/django/principiante/#cambiar-nombre-de-la-app","text":"En el fichero apps.py de la app, debemos de a\u00f1adir el campo verbose_name con el nombre que queramos. Por ejemplo a la app core la voy a llamar principal, as\u00ed que el /miproyecto/core/apps.py debe quedar as\u00ed from django.apps import AppConfig class CoreConfig ( AppConfig ): name = 'core' vebose_name = 'Principal' Recordemos que en el /miproyecto/miproyecto/settings.py en la parte de apps instaladas debe aparecer INSTALLED_APPS = [ 'core.apps.CoreConfig' , ... ]","title":"Cambiar nombre de la app"},{"location":"sw/web/backend/django/principiante/#cambiar-nombre-del-modelo","text":"Dentro de la clase del modelo, debemos crear una subclase llamada Meta (para metadata) y debe contener el atributo verbose_name . Si queremos que luego cada objeto de ese modelo tenga un nombre m\u00e1s f\u00e1cil de leer, debemos a\u00f1adir el m\u00e9todo __str__ a la clase del modelo. Por \u00faltimo, para que cada campo aparezca con el nombre que queramos, le a\u00f1adimos el par\u00e1metro verbose_name a cada campo del modelo. Siguiendo con el ejemplo, en /miproyecto/core/models.py pondremos al modelo Project el nombre Proyecto . Adem\u00e1s le vamos a a\u00f1adir el plural, y vamos a permitir que se ordene por fecha de creaci\u00f3n m\u00e1s nueva a m\u00e1s vieja (con -created , si hubieramos puesto solo created ser\u00eda de m\u00e1s antiguo al m\u00e1s nuevo). Para el nombre de cada proyecto le vamos a poner su t\u00edtulo: from django.db import models class Project ( models . Model ): title = models . CharField ( max_length = 200 , verbose_name = 'Titulo' ) description = models . TextField ( verbose_name = 'Descripci\u00f3n' ) image = models . ImageField ( verbose_name = 'Imagen' ) created = models . DateTimeField ( auto_now_add = True , verbose_name = 'Creado' ) updated = models . DateTimeField ( auto_now = True , verbose_name = 'Actualizado' ) class Meta : verbose_name = 'proyecto' verbose_name_plural = 'proyectos' ordering = [ '-created' ] def __str__ ( self ): return self . title Los campos created y updated Django los oculta por defecto, ya que son de solo lectura. Para hacer que aparecan debemos de Modificar el admin.py de la app Creando un modelo extendido para el Admin Pas\u00e1ndole una tupla con los campos de solo lectura. A\u00f1adiendo el modelo extendido al admin. /miproyecto/ /admin.py from django.contrib import admin from .models import < Modelo > class < Modelo > Admin ( admin . ModelAdmin ): readonly_fields = ( '<campo1>' , '<campo2>' ) admin . site . register ( < Modelo > , < Modelo > Admin ) Lo vemos m\u00e1s f\u00e1cil con el ejemplo que estamos haciendo, el /miproyecto/core/admin.py tiene que quedar as\u00ed from django.contrib import admin from .models import Project class ProjectAdmin ( admin . ModelAdmin ): readonly_fields = ( 'created' , 'updated' ) admin . site . register ( Project , ProjectAdmin )","title":"Cambiar nombre del modelo"},{"location":"sw/web/backend/django/principiante/#servir-ficheros-multimedia","text":"Django por defecto no puede servir ficheros multimedia (im\u00e1genes, v\u00eddeos, etc). Los pasos para habilitarlos son Crear una carpeta com\u00fan llamada media por ejemplo, y estar\u00eda al mismo nivel que las apps, es decir /media. En el settings.py ( / /settings.py) del proyecto debemos de indicarle donde est\u00e1 la carpeta de estos archivos con # Media files MEDIA_URL = '/media/' # Ruta del navegador para encontrarlos MEDIA_ROOT = os . path . join ( BASE_DIR , 'media' ) # Ruta para encontrarlos dentro del Django Si en el modelo tenemos alg\u00fan formulario donde los usuarios pueden subir este tipo de ficheros, debemos a\u00f1adirle el par\u00e1metro upload_to con el nombre del directorio que tendr\u00e1 dentro de la carpeta media Por ejemplo en el /miproyecto/core/models.py hacemos que las im\u00e1genes de los proyectos las guarde en la carpeta /miproyecto/media/projects que Django generar\u00e1 autom\u00e1ticamente con class Project ( models . Model ): ... image = models . ImageField ( verbose_name = 'Imagen' , upload_to = 'projects' ) Ahora tenemos que habilitar una url para el directorio media , pero que solo sea accesible cuando estamos en modo debug . Modificar el urls.py del proyecto ( / /urls.py) con from django.conf import settings urlpatterns = [ ... ] if settings . DEBUG : from django.conf.urls.static import static urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT )","title":"Servir ficheros multimedia"},{"location":"sw/web/backend/django/principiante/#mvt-modelo-vista-template","text":"Django se basa en el paradigma MVT, que est\u00e1 basado en el MVC (Modelo-Vista-Controlador). Estos paradigmas indican b\u00e1sicamente como es el flujo de trabajo y a la vez permiten desacoplar las distintas partes del proyecto. Es un poco lioso al principio si vienes del MVC. En el MVC tienes: Modelo -> Como est\u00e1 creada y almacenada la informaci\u00f3n (BBDD). Vista -> Es la parte encargada de la interfaz visual (Frontend). Controlador -> Como se manipula y trabaja con la informaci\u00f3n detr\u00e1s de la interfaz (Backend). En el MVT hay: Modelo -> Igual que el anterior (BBDD). Vista -> Equivale en realidad al Controlador (Backend). Por eso dec\u00eda que es lioso, porque al Controlador en Django se le llama Vista. Y a la Vista se le llama Template. Template -> Equivale a la Vista (Frontend). Hay que tener en cuenta que MVT define el flujo de desarrollo . En el MVT nosotros desarrollamos siguiendo estos pasos: MODELO models.py -> Creamos / modificamos el Modelo (BBDD). admin.py -> Habilitamos las opciones que sean necesarias en el Admin. VISTA views.py -> Creamos / modificamos la Vista (Backend). urls.py -> Habilitamos el acceso a trav\u00e9s de la web a esa vista. TEMPLATE templates/<app>/ -> Creamos / modificamos la Template (Frontend). static/<app>/ -> Creamos / modificamos los est\u00e1ticos (CSS's, JS's). NOTA : Un mnem\u00f3nico para recordar esto es MAVUTS -> Models.py Admin.py Views.py Urls.py Templates Static. Pero el flujo que sigue Django para servir una web en un enlace concreto es: El navegador hace una petici\u00f3n a una url concreta. Eso entra por el urls.py del proyecto y se redirecciona hasta llegar al urls.py de la app concreta. De ah\u00ed se pasa a la vista, views.py . El views.py interactua con la bbdd gracias al models.py . Despu\u00e9s computar toda la info, devuelve la template espec\u00edfica, <app>/templates/<app>/<vista>.html , ya formateada (con los tags sustituidos por su valor final). El navegador renderiza el fichero y sirve la web.","title":"MVT Modelo-Vista-Template"},{"location":"sw/web/backend/django/principiante/#ejemplo-practico","text":"Para que tu editor no te de problemas, se recomienda instalar el linter pylint-django . Para activarlo hay que hacer: Editar los pylintArgs con --errors-only --load-plugins pytlint_django Supongamos que vamos a querer tener una secci\u00f3n portfolio en esta web, llena de los proyectos. Lo primero ser\u00e1 crear la app portfolio python manage.py startapp portfolio Tendremos nuestra nueva app portfolio junto con core y miproyecto . Una vez creada, damos de alta la app en el settings.py del proyecto INSTALLED_APPS = [ 'portfolio.apps.PortfolioConfig' , ] Modelo -> models.py : Quitamos Projects del modelo de core (en su models.py ) y nos lo llevamos al models.py de portfolio . Hacemos las migraciones en la base de datos con python manage.py makemigrations python manage.py migrate Admin -> admin.py : Quitamos el Projects de core del Admin en su admin.py . Damos de alta Projects de portfolio en el Admin con su admin.py . Vista -> views.py : Creamos la vista portfolio en el views.py . Podemmos usar el modelo en la vista de la siguiente manera from django.shortcuts import render from .models import Project def portfolio ( request ): template = 'portfolio/portfolio.html' projects = Project . objects . all () context = { 'projects' : projects } return render ( request , template , context ) Urls -> urls.py : En el urls.py del proyecto redireccionamos al urls.py de portfolio from django.urls import path , include urlpatterns = [ path ( 'portfolio/' , include ( 'portfolio.urls' )), ] En el urls.py de portfolio enlazamos la vista creada. from django.urls import path from . import views urlpatterns = [ path ( '' , views . portfolio , name = 'portfolio' ), ] Template -> miproyecto/portfolio/templates/portfolio/<plantilla>.html Creamos el template miproyecto/portfolio/templates/portfolio/portfolio.html . Dentro de esta template, heredamos del base.html del templates de core . Un ejemplo de como podr\u00edamos usar el modelo dentro de la plantilla podria ser un template-tag {% for %} , ya que le hemos pasado todos los proyectos. {% extends 'core/base.html' %} {% load static %} {% block title%}Portfolio{% endblock%} ... {% block content%} < ul > {% for project in projects %} < li > T\u00edtulo: {{project.title}} Descripci\u00f3n: {{project.description}} Imagen: {{project.image.url}} </ li > {% endfor %} </ ul > {% endblock } Static -> miproyecto/portfolio/static/portfolio/<archivos> si necesito cualquier est\u00e1tico lo uso en portfolio.html con {% static 'portfolio/ < fichero-estatico > ' %}","title":"Ejemplo pr\u00e1ctico"},{"location":"sw/web/frontend/frontend/","text":"Frontend \u00b6 Extensiones VSCode \u00b6 Auto Close Tag Auto Rename Tag axe Accessibility Linter Babel JavaScript Debugger fo Firefox ES6 String HTML IntelliSense for CSS class names in HTML Live Server open in browser","title":"\u00cdndice"},{"location":"sw/web/frontend/frontend/#frontend","text":"","title":"Frontend"},{"location":"sw/web/frontend/frontend/#extensiones-vscode","text":"Auto Close Tag Auto Rename Tag axe Accessibility Linter Babel JavaScript Debugger fo Firefox ES6 String HTML IntelliSense for CSS class names in HTML Live Server open in browser","title":"Extensiones VSCode"},{"location":"sw/web/frontend/css/css/","text":"CSS \u00b6 TODO: Cascada \u00b6 TODO: Especificidad \u00b6 TODO: Modelo de Cajas \u00b6 TODO: Position \u00b6 TODO:","title":"CSS"},{"location":"sw/web/frontend/css/css/#css","text":"TODO:","title":"CSS"},{"location":"sw/web/frontend/css/css/#cascada","text":"TODO:","title":"Cascada"},{"location":"sw/web/frontend/css/css/#especificidad","text":"TODO:","title":"Especificidad"},{"location":"sw/web/frontend/css/css/#modelo-de-cajas","text":"TODO:","title":"Modelo de Cajas"},{"location":"sw/web/frontend/css/css/#position","text":"TODO:","title":"Position"},{"location":"sw/web/frontend/html/html/","text":"HTML5 \u00b6 Snippet VSCode \u00b6 Escribir html:5","title":"HTML"},{"location":"sw/web/frontend/html/html/#html5","text":"","title":"HTML5"},{"location":"sw/web/frontend/html/html/#snippet-vscode","text":"Escribir html:5","title":"Snippet VSCode"},{"location":"sw/web/frontend/js/javascript/","text":"JavaScript \u00b6 TODO","title":"VanillaJS"},{"location":"sw/web/frontend/js/javascript/#javascript","text":"TODO","title":"JavaScript"}]}